// How to build
// Betupe-ji jikkou
// cd scripts
// ./copyKey.sh
native setTimeout;
native $;
native window;
native console;
native Tonyu;
native Error;
native BitArrow;

\Math {
    return window.Math;
}

\document {
    return window.document;
}
\setInterval(f,t) {
    return window.setInterval(catchException(f),t);
}
\setTimeout(f,t) {
    return window.setTimeout(catchException(f),t);
}
\catchException(f) {
    return function () {
        try {
            return f.apply(this,arguments);
        } catch (e) {
            //Tonyu.onRuntimeError(e);
            window.onerror("","","","",e);
        }
    };
}
\findElement(elem) {
    if (elem instanceof $) return elem;
    var res=$("[name="+elem+"]");
    if (res[0]) return res;
    return $("#"+elem);
}
\isFormElement(elem) {
    elem=findElement(elem);
    if (!elem[0]) return false;
    var t=(""+elem[0].tagName).toLowerCase();
    return t==="input" || t==="textarea";
}
\clearContent(elem) {
    elem=findElement(elem);
    if (isFormElement(elem)) {
        elem.val("");
    } else {
        elem.empty();
    }
}
\addText(elem,val){
    elem=findElement(elem);
    if (isFormElement(elem)) {
        elem.val(elem.val()+val);   
    } else {
        if (document.baWriteTo) {
            var dst=elem[0];
            if (dst) document.baWriteTo(dst, val);
        } else {
            elem.append(val);
        }
    }
}
\setText(elem,val){
    clearContent(elem);
    addText(elem,val);
}
\getNumber(elem){
    return getText(elem)-0;
}
\getText(elem){
    elem=findElement(elem);
    if (isFormElement(elem)) {
        return elem.val();
    } else {
        return elem[0] && elem[0].innerHTML;
    }
}
\setNumber(elem,num){
    setText(elem,num);
}

\onClick(elem,func){
    var usepara,fname;
    if(typeof func == 'function'){
        if (func.methodInfo) {
            fname=func.methodInfo.name;            
        }
    } else {
        fname=func+"";
    }
    if (typeof fname=="string") {
        if (!this[fname]) throw new Error("メソッド"+func+"が存在しません");
        if (this["fiber$"+fname]) {
            usepara=true;
        }
    }
    if (usepara) {
        findElement(elem).click(catchException \ {
            parallel(fname);
        });
    } else {
        //document.getElementsByName(elem)[0].onclick=func;
        findElement(elem).click(catchException(func));
    }
}
\onTouch(func){
    if(typeof func=="function"){
        $("body").on("touchstart",function(e){
            func(e.originalEvent.changedTouches[0].pageX,
            e.originalEvent.changedTouches[0].pageY,"start");
        });
        $("body").on("touchmove",function(e){
            func(e.originalEvent.changedTouches[0].pageX,
            e.originalEvent.changedTouches[0].pageY,"move");
        });
        $("body").on("touchend",function(e){
            func(e.originalEvent.changedTouches[0].pageX,
            e.originalEvent.changedTouches[0].pageY,"end");
        });
        $("body").on("mousedown",function(e){
            down=true;
            func(e.pageX,e.pageY,"start");
        });
        $("body").on("mousemove",function(e){
            if(down) func(e.pageX,e.pageY,"move");
        });
        $("body").on("mouseup",function(e){
            down=false;
            func(e.pageX,e.pageY,"end");
        });
    }
}
\setCanvas(canv){
    //canvas=document.getElementsByName(canv)[0];
    _canvas=findElement(canv)[0];
}
\searchCanvas(){
    if(!_canvas){
        return _canvas=$("canvas")[0];
    }else{
        return _canvas;
    }
}
\setColor(r,g,b){
    if(searchCanvas()){
        ctx=_canvas.getContext("2d");
        ctx.fillStyle="rgb("+r+","+g+","+b+")";
        ctx.strokeStyle="rgb("+r+","+g+","+b+")";
    }
}
\fillRect(x,y,w,h){
    if(searchCanvas()){
        ctx=_canvas.getContext("2d");
        ctx.fillRect(x,y,w,h);
    }
}

\changeImage(elem,newsrc){
    if (!(newsrc+"").match(/^http/)) {
        newsrc=window.runtimePath+newsrc;
    }
    findElement(elem).attr("src",newsrc);
}

\move(elem,x,y){
    findElement(elem).css({
        position:"absolute",
    left:x,top:y});
}
\transform(elem,angle,scaleX,scaleY){
    console.log(scaleX,scaleY);
    if(!scaleX){
        scaleX=1;
        scaleY=1;
    }else if(!scaleY){
        scaleY=scaleX;
    }
    console.log(scaleX,scaleY);
    findElement(elem).css({
        position:"absolute",
        transform:"rotate("+angle+"deg) scale("+scaleX+","+scaleY+")"
    });
}
\rotate(elem,angle){
    findElement(elem).css({
        position:"absolute",
        transform:"rotate("+angle+"deg)"
    });
}
\resize(elem,w,h){
    findElement(elem).css({
        position:"absolute",
        transform:"scale("+w+","+h+")"
    });
}

\wait(time) {
    time=time||100;
    var t=_thread;
    var runThread=catchException \{
        t.steps();
        if (t.preempted) {
            setTimeout(runThread,0);
        }
    };
    t.suspend();
    setTimeout(runThread,time);
}
\rnd(max) {
    return Math.floor(Math.random()*max);
}
\setBGColor(c) {
    $("body").attr("bgcolor",c);
}

// 動的DOM生成
\newElement(elem,n){
    var e= document.createElement(elem);
    e.setAttribute("name", n);
    document.body.appendChild(e);
}
\fillOval(x,y,w,h){
    if(searchCanvas()){
        ctx=_canvas.getContext("2d");
        ctx.save();
        ctx.beginPath();
        ctx.translate(x+w/2,y+h/2);
        ctx.scale(w/w, h/w);
        ctx.arc(0, 0, w/2, 0, 2 * Math.PI, false);
        ctx.fill();
        ctx.restore();
    }
}
\drawLine(x1,y1,x2,y2){
    if(searchCanvas()){
        ctx=_canvas.getContext("2d");
        ctx.beginPath();
        ctx.moveTo(x1,y1);
        ctx.lineTo(x2,y2);
        ctx.stroke();
    }
}
\clearRect(x,y,w,h){
    if(searchCanvas()){
        ctx=_canvas.getContext("2d");
        ctx.clearRect(x,y,w,h);
    }
}
\fillText(t,x,y){
    if(searchCanvas()){
        ctx=_canvas.getContext("2d");
        ctx.fillText(t,x,y);
    }
}
\new() {
    // --- TODO
    activityGroup=activityGroup||"default";
    keyData=[];
    document.onkeydown = function (e){
        if(!e) e = window.event;
        var key_code = e.keyCode;
        var key_char = String.fromCharCode(key_code).toLowerCase();
        if(e.shiftKey && (!keyData["shift_key"] || keyData["shift_key"]==0)) keyData["shift_key"]=1;
        else if(e.ctrlKey && (!keyData["ctrl_key"] || keyData["ctrl_key"]==0)) keyData["ctrl_key"]=1;
        else if(e.altKey && (!keyData["alt_key"] || keyData["alt_key"]==0)) keyData["alt_key"]=1;
        else if(e.keyCode==37 && (!keyData["left"] || keyData["left"]==0)) keyData["left"]=1;
        else if(e.keyCode==38 && (!keyData["up"] || keyData["up"]==0)) keyData["up"]=1;
        else if(e.keyCode==39 && (!keyData["right"] || keyData["right"]==0)) keyData["right"]=1;
        else if(e.keyCode==40 && (!keyData["down"] || keyData["down"]==0)) keyData["down"]=1;
        else if(!keyData[key_char] || keyData[key_char]==0)keyData[key_char]=1;
        //console.log(key_char+"data="+keyData[key_char]);
        //console.log(keyData);
        //console.log("key downed");
    };
    document.onkeyup = function (e){
        if(!e) e = window.event;
        var key_code = e.keyCode;
        var key_char = String.fromCharCode(key_code).toLowerCase();
        if(e.keyCode==16) keyData["shift_key"]=0;
        else if(e.keyCode==17) keyData["ctrl_key"]=0;
        else if(e.keyCode==18) keyData["alt_key"]=0;
        else if(e.keyCode==37) keyData["left"]=0;
        else if(e.keyCode==38) keyData["up"]=0;
        else if(e.keyCode==39) keyData["right"]=0;
        else if(e.keyCode==40) keyData["down"]=0;
        else keyData[key_char]=0;
        //console.log(keyData);
    };
}
\getkey(k){
    return keyData[k.toLowerCase()] || 0;
}
// dist or within 
\dist(x,y){
    return sqrt(x*x+y*y);
}
\angle(x,y) {
    return deg(Math.atan2(y,x));
}
nowait \rad(d) {
    return d/180*Math.PI;
}
nowait \deg(d) {
    return d/Math.PI*180;
}
\sqrt(x){
    return Math.sqrt(x);
}
\sin(x){
    return Math.sin(rad(x));
}
\cos(x){
    return Math.cos(rad(x));
}
\tan(x){
    return Math.tan(rad(x));
}
\parallel() {
    var a=Array.prototype.slice.call(arguments);
    var methodName=a.shift();
    var t=Tonyu.thread();
    t.apply(this,methodName,a);
    t.steps();
}
\waitClick(elem){
    var clicked=0;
    var _func=function(){
        clicked=1;
    };
    onClick(elem,_func);
    while(clicked==0){
        wait(10);
    }
    findElement(elem).off("click","",_func);
}
\_waitFor(promise) {
    var t=_thread;
    t.suspend();
    _err=null;
    promise.then(\(r) {
        _res=r;
        t.steps();
    },\(e) {
        _err=(e instanceof window.Error ? e : new Error(e.responseText || e+""));
        t.steps();
    });
}
\waitFor(promise) {
    _waitFor(promise);
    if (_err) throw _err;
    return _res;
}
/*\putToServer(key,value) {
    var url=window.location.href;
    var p=window.$.ajax(window.runtimePath+"a.php?KeyValue/put"+
    "&key="+key+
    "&value="+value+
    "&url="+url+
    "&group="+activityGroup
    );
    var r;
    r=waitFor(p);
    return r;
}*/
\putToServer(key,value) {
    var url=window.location.href;
    var p=window.$.ajax({
        url: window.runtimePath+"a.php?KeyValue/put",
        type:'POST',
        data : {key : key, value : value, url : url, group : activityGroup}
    });
    var r;
    r=waitFor(p);
    return r;
}
\setGroup(g) {
    activityGroup=g||"default";
}
\getFromServer(key) {
    var url=window.location.href;
    var p=window.$.ajax(window.runtimePath+"a.php?KeyValue/get"+
    "&key="+key+
    "&url="+url+
    "&group="+activityGroup
    );
    var r;
    r=waitFor(p);
    return r;
}
\addLog(practice,d1,d2,d3,d4) {
    group=activityGroup;
    var url=window.location.href;
    var params="&group="+group+"&practice="+practice+"&url="+url;
    if (d1!=null) params+="&data1="+d1;
    if (d2!=null) params+="&data2="+d2;
    if (d3!=null) params+="&data3="+d3;
    if (d4!=null) params+="&data4="+d4;
    var p=window.$.ajax(window.runtimePath+"a.php?BigData/add"+params);
    var r;
    r=waitFor(p);
    return r;
}
\findLog(practice,d1,d2,d3,d4) {
    group=activityGroup;
    var url=window.location.href;
    var params="&group="+group+"&practice="+practice+"&url="+url;
    if (d1!=null) params+="&data1="+d1;
    if (d2!=null) params+="&data2="+d2;
    if (d3!=null) params+="&data3="+d3;
    if (d4!=null) params+="&data4="+d4;
    var p=window.$.ajax(window.runtimePath+"a.php?BigData/find"+params);
    var r;
    r=waitFor(p);
    return r;
}
\curProject() {
    var url;
    if (typeof BitArrow==="object" && BitArrow.publishedURL) {
        url=BitArrow.publishedURL;
    } else {
        url=window.location.href;
    }
    var params="&url="+url;
    var p=window.$.ajax(window.runtimePath+"a.php?KeyValue/info"+params);
    var r;
    r=waitFor(p);
    return r;
    
}
\createGraph(target,src) {
    var e=findElement(target);
    if (!e[0]) {
        e=$("<div>").appendTo("body");
    }
    var g=new Graph(e[0]);
    g.src=src||[];
    return g;
}
\readFile(path) {
    var a=path.split("/");
    var context=a[0], filename=a[1];
    var p=window.$.ajax{
        url: window.runtimePath+"a.php?Asset/download",
        data: {
            context, filename
        }
    };
    var r;
    r=waitFor(p);
    return r;
}

\writeFile(path, content) {
    var a=path.split("/");
    var context=a[0], filename=a[1];
    var p=window.$.ajax{
        url: window.runtimePath+"a.php?Asset/upload",
        data: {
            context, filename, content
        }
    };
    var r;
    r=waitFor(p);
    return r;
}
