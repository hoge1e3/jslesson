//NOGENERATOR
//テーブルオブジェクトの定義
テーブル=!作る。
//テーブル="テーブルオブジェクト"。
テーブル:データ＝配列！作る。
テーブル：_画面幅=画面！幅？．
テーブル：_画面高さ=画面！高さ？．
テーブル：x=20+(テーブル：_画面幅)/-2。
テーブル：y=(テーブル：_画面高さ)/2。
テーブル：リスト高さ=(テーブル:_画面高さ)*3/10.

//テキストファイルの処理
テーブル：テキストファイル＝！作る。
テーブル：テキストファイル：initialize=[|filename|
    text=自分！(filename)fromWebStorage.
    [text]!else[
        text=自分！（filename）fromServer.
    ]execute.
    arr=text!(window!"[\r\n]"RegExp)split.
    arr.
].
テーブル：テキストファイル：fromServer=[|filename|
    opt=system![]new.
    opt:url="https://bitarrow.eplang.jp/beta1808/".
    [(window:BitArrow:runtimePath)!"localhost" 含む?] ! then [
        opt:url="http://localhost/".
    ] execute.
    //↑サーバ内のtsvやcsvファイルがある場所
    「filename!"^data/"含む？」！そうでなければ「
        opt:url=opt:url+"data/"．
    」実行．
    opt:url=opt:url+filename.
    opt:async=:false.
    file=window:$!(opt)ajax.
    「file:responseText!"404 Not Found" 含む？」！なら「
        "ファイルが存在しません。ファイル名を見直してください"。
    」そうでなければ「
        //(window:console) ! (file:responseText) log.
        file:responseText。
    」実行。
].
テーブル：テキストファイル：fromWebStorage=[|filename|
    「filename!"^data/"含む？」！なら「
        filename=filename!"^data/" ""置き換える。
    」実行．
    :window:localStorage!("dtl/uploadFile/"+filename)getItem
].

テーブル：テキストファイル：読む＝「arr」。

テーブル：getarg＝「|n|
    「全部！（自分!(n)  配列？）（自分!（n！1  読む）配列？）本当」！なら「n！1  読む」そうでなければ「n」実行
」。
テーブル：作る＝「||
    ret＝テーブル！create。
    ret:データ＝配列！作る。
    args=自分!(_rest)  getarg。
    「args!=undef」！なら「
        ret：フィールド名＝args。
    」そうでなければ「
        ret:フィールド名=配列!作る。
    」実行。
    ret。
」。
テーブル：配列？＝「|n|
    「どれか！(（""+n）！"]"  含む？)    （n==undef）    本当」!なら「true」そうでなければ「false」実行。
」。
テーブル：書く＝「|v|
    「自分!(v)配列?」!なら「
        v!「|n|
            自分：データ＝自分：データ！（n）書く。
        」それぞれ実行。
    」そうでなければ「
        自分：データ＝自分：データ！（v）書く。
    」実行。
    自分。
」。
テーブル：読む＝「｜i｜自分：データ！（i）読む」。
テーブル：連結＝「｜v;ret｜
    自分：データ＝自分：データ！（v）連結。
    自分。
」。

テーブル：区切り文字=「|deli|
    自分：deli=deli。
    自分。
」。

テーブル：文字コード=「|encode|
    自分：encode=encode。
    自分。
」。

テーブル：ファイルから作る＝「｜fn;  fld_tmp  fld _tmp deli｜
    tf＝自分：テキストファイル！（fn）作る。
    「encode==(undef)」!なら「encode="Shift-JIS"」実行。
    dt＝tf！(encode)  読む。
    //dt＝tf！  読む  ""  消す。
    「dt!=undef」!なら「
        「deli==undef」!なら「
            「(dt!1  読む)!  "\t"  含む?」!なら「
                deli="\t"。
            」そうでなければ「
                deli=","。
            」実行。
        」実行。
        「自分:フィールド名==undef」！なら「
            fld_tmp＝（dt！1  読む）！(deli)  分割。
            fld=配列!作る。
            fld_tmp!「|n|
                n=""+n。
                「n!"[(]"  含む？」!なら「_tmp=n!"[(]"  分割。n=_tmp! 1 読む。」実行。
                「n!"[(]"  含む？」!なら「_tmp=n!"[(]"  分割。 n=_tmp! 1 読む。」実行。
                「n!"[^0-9０-９\-\.]"    含む?」!なら「
                    fld!(n)  書く
                」そうでなければ「
                    fld!("F"+n)  書く
                」実行。
            」それぞれ実行。
            ret＝テーブル！（fld）作る。
        」そうでなければ「
            （（dt！1  読む）！(deli)  分割）！「
                dt!1  ""  挿入。
            」それぞれ実行。
        」実行。
        dt!「|n  i|
            「i>1」!なら「
                n=n+" "。
                tmp=n!(deli)  分割。
                tmp!「|m|
                    m=m!" $"  ""  置き換える。
                    m=m!"^ "  ""  置き換える。
                    m=m!"^\-$" ""  置き換える。
                    m=m!"^\-$" ""  置き換える。
                    m=m!"^\ー$" ""  置き換える。
                    「ｍ!"[^0-9０-９\.\-]" 含む?」!なら「
                        ret!(m)  書く。
                    」そうでなければ「
                        ret!(:window!(m)  parseFloat)    書く。
                        //ret!(m)  書く。
                    」実行。
                」それぞれ実行。
            」実行。
        」それぞれ実行。
        ret。
    」そうでなければ「
        undef。
    」実行。
」。

テーブル：ファイルから追加=「|  fn  |
    tf＝テキストファイル！（fn）作る。
    「encode==(undef)」!なら「encode="Shift-JIS"」実行。
    dt＝tf！(encode)  読む。
    「deli==(undef)」！なら「deli="\t"」実行。
    fld＝（dt！1  読む）！(deli)  分割。
    ret=自分。
    dt!「|n  i|
        tmp=n!(deli)  分割。
        tmp!「|m|
            ret!(m)  書く。
        」それぞれ実行。
    」それぞれ実行。
    ret。
」。

テーブル：値読み出し＝「
    val=(自分:データ!1  読む)。
    val。
」。

テーブル：フィールド番号取得＝「|  f  |
    fs=undef。
    要素数=フィールド名!要素数?。
    「｜n｜
        「(フィールド名！（n）読む）＝＝f」！なら「fs=n。」実行。
    」！（フィールド名！要素数？）繰り返す。
    fs。
」。

テーブル：文字数カウント=「|  Str  |
    Str=Str+""。
    length=Str！長さ？。
    sum=0。
    「|  n  |
        「全部！(((Str！(  n  )  1  部分)！文字コード  10  進数)  >31)  (((Str！(  n  )  1  部分)！文字コード  10  進数)  <127)  本当」！なら
        「sum=sum+1」そうでなければ
        「sum=sum+2」実行。
    」！  (length)    繰り返す。
    sum。
」。


テーブル：表示＝「|  ;要素数  文字列  レコード  カラム名  tmp  space  s  幅  文字数  lst  件数  |
    要素数=自分：フィールド名！要素数？。
    文字数＝配列！作る。
    レコード=""。
    カラム名＝""。
    フィールド名！「|n  i|
        文字数！(自分！(n)  文字数カウント)    書く。
    」それぞれ実行。
    
    自分:データ！「|n  i|
        「n==""」!なら「n="NA"」実行。
        「全部!(((n+"")!"[^0-9０-９\-\.]"  含む?)==false)  (((n+"")!長さ?)  >5)  本当」!なら「
            n=round(n*10000)。
            n=n/10000。
        」実行。
        tmp=自分！(n+"")  文字数カウント。
        「(文字数！((i-1)%要素数+1)  読む)  <  tmp」!なら「
            文字数！((i-1)%要素数+1)    (tmp)  上書き。
        」実行。
    」それぞれ実行。
    
    space=""。
    フィールド名！「|n  i|
        n=n+""。
        「space=space+" "。」！((文字数！((i-1)%要素数+1)  読む)-(自分！(n+"")  文字数カウント))  繰り返す。
        「i==要素数」!なら「
            カラム名=カラム名！(space+n)    連結。
        」そうでなければ「
            カラム名=カラム名!(space+n+"|")  連結。
        」実行。
        space=""。
    」それぞれ実行。
    
    幅=0。
    文字数！「|n|  幅＝幅+n。」それぞれ実行。
    s=""。
    「s=s+"-"」！(幅+要素数-1)  繰り返す。
    件数=(自分:データ！要素数？)/(フィールド名!要素数?)。
    リスト幅=テーブル:_画面幅/2.5。
    「要素数==1」!なら「
        横幅=s!長さ?。
        「横幅<=1」!なら「補正値=15*横幅」そうでなければ
        「横幅<=2」なら「補正値=4*横幅」そうでなければ
        「横幅<=3」なら「補正値=3*横幅」そうでなければ
        「横幅<7」なら「補正値=2*横幅」そうでなければ
        「補正値=横幅」実行。
        「(23+(幅+要素数)*7+補正値) <= (リスト幅)」!なら「リスト幅=(23+(幅+要素数)*7+補正値)」実行。
        lst=テキストエリア！(カラム名)    作る  (リスト幅)  (リスト高さ)  大きさ  (テーブル：x)  (テーブル：y)  位置。
        テーブル：x=(テーブル：x)+(40+リスト幅)。
    」そうでなければ「
        「(23+(幅+要素数)*7) <= (リスト幅)」!なら「リスト幅=(23+(幅+要素数)*7)」実行。
        lst=テキストエリア！(カラム名)    作る  (リスト幅)  (リスト高さ)  大きさ  (テーブル：x)  (テーブル：y)  位置。
        テーブル：x=(テーブル：x)+(40+リスト幅)。
    」実行。
    lst!(s)  書く    改行。
    
    自分:データ！「|n  i|
        「n==""」!なら「n="NA"」実行。
        「全部!(((n+"")!"[^0-9０-９\-\.]"  含む?)==false)  (((n+"")!長さ?)  >5)  本当」!なら「
            n=round(n*10000)。
            n=n/10000。
        」実行。
        「space=space+" "。」！((文字数！((i-1)%要素数+1)  読む)-(自分！(n+"")  文字数カウント))  繰り返す。
        「i%要素数==0」!なら「
            レコード＝レコード！(space+n)    連結。
        」そうでなければ「
            レコード＝レコード！(space+n+"|")    連結。
        」実行。
        space=""。
        「((i-1)%要素数==要素数-1)」!なら「
            lst!(レコード)  書く    改行。
            レコード=""。
        」実行。
    」それぞれ実行。
    テーブル：フラグ=1。
    自分。
」。

// テーブル：ファイル出力＝「｜fn  deli  encode｜
    //     tf＝テキストファイル！（fn）  作る。
    //     「encode==(undef)」!なら「encode="Shift-JIS"」実行。
    //     tmp=""。
    //     「deli==(undef)」！なら「deli="\t"」実行。
    //     tf！（配列！作る）(encode)  全部書く。
    //     フィールド名!「|n  i|
        //         tmp=(tmp)!(n+deli)    連結。
    //     」それぞれ実行。
    //     tf!(tmp)  (encode)    書く。
    //     tmp=""。
    //     自分:データ！「|n  i|
        //         tmp=(tmp)!(n+deli)    連結。
        //         「i%(フィールド名!要素数?)==0」!なら「  tf!(tmp)  (encode)  書く。tmp=""。」実行。
    //     」それぞれ実行。
    //     ラベル！"書き出し完了"  作る。
    //     自分。
// 」。

テーブル：TSV表示＝「|  ;要素数  文字列  レコード  カラム名  tmp  space  s  幅  文字数  lst  件数  |
    要素数=自分：フィールド名！要素数？。
    文字数＝配列！作る。
    レコード=""。
    カラム名＝""。
    フィールド名！「|n  i|
        文字数！(自分！(n)  文字数カウント)    書く。
    」それぞれ実行。
    
    フィールド名！「|n  i|
        「i==要素数」!なら「
            カラム名=カラム名！(n)    連結。
        」そうでなければ「
            カラム名=カラム名!(n+"\t")  連結。
        」実行。
    」それぞれ実行。
    
    
    自分:データ！「|n  i|
        tmp=自分！(n+"")  文字数カウント。
        「(文字数！((i-1)%要素数+1)  読む)  <  tmp」!なら「
            文字数！((i-1)%要素数+1)    (tmp)  上書き。
        」実行。
    」それぞれ実行。
    
    幅=0。
    文字数！「|n|  幅＝幅+n。」それぞれ実行。
    件数=(自分:データ！要素数？)/(フィールド名!要素数?)。
    リスト幅=テーブル:_画面幅/2.5。
    「(23+(幅+要素数)*7) <= (リスト幅)」!なら「リスト幅=(23+(幅+要素数)*7)」実行。
    lst=テキストエリア！(カラム名)    作る  (リスト幅)  (リスト高さ)  大きさ  (テーブル：x)  (テーブル：y)  位置。
    テーブル：x=(テーブル：x)+(40+リスト幅)。
    自分:データ！「|n  i|
        「i%要素数==0」!なら「
            レコード＝レコード！(n)    連結。
        」そうでなければ「
            レコード＝レコード！(n+"\t")    連結。
        」実行。
        「((i-1)%要素数==要素数-1)」!なら「
            lst!(レコード)  書く    改行。
            レコード=""。
        」実行。
    」それぞれ実行。
    自分。
」。

テーブル：CSV表示＝「|  ;要素数  文字列  レコード  カラム名  tmp  space  s  幅  文字数  lst  件数  |
    要素数=自分：フィールド名！要素数？。
    文字数＝配列！作る。
    レコード=""。
    カラム名＝""。
    フィールド名！「|n  i|
        文字数！(自分！(n)  文字数カウント)    書く。
    」それぞれ実行。
    
    フィールド名！「|n  i|
        「i==要素数」!なら「
            カラム名=カラム名！(n)    連結。
        」そうでなければ「
            カラム名=カラム名!(n+",")  連結。
        」実行。
    」それぞれ実行。
    
    
    自分:データ！「|n  i|
        tmp=自分！(n+"")  文字数カウント。
        「(文字数！((i-1)%要素数+1)  読む)  <  tmp」!なら「
            文字数！((i-1)%要素数+1)    (tmp)  上書き。
        」実行。
    」それぞれ実行。
    
    幅=0。
    文字数！「|n|  幅＝幅+n。」それぞれ実行。
    件数=(自分:データ！要素数？)/(フィールド名!要素数?)。
    リスト幅=テーブル:_画面幅/2.5。
    「(23+(幅+要素数)*7) <= (リスト幅)」!なら「リスト幅=(23+(幅+要素数)*7)」実行。
    lst=テキストエリア！(カラム名)    作る  (リスト幅)  (リスト高さ)  大きさ  (テーブル：x)  (テーブル：y)  位置。
    テーブル：x=(テーブル：x)+(40+リスト幅)。
    自分:データ！「|n  i|
        「i%要素数==0」!なら「
            レコード＝レコード！(n)    連結。
        」そうでなければ「
            レコード＝レコード！(n+",")    連結。
        」実行。
        「((i-1)%要素数==要素数-1)」!なら「
            lst!(レコード)  書く    改行。
            レコード=""。
        」実行。
    」それぞれ実行。
    自分。
」。

テーブル：配列から作る＝「|  |
    arg=_rest！作る。
    field_arr=配列！作る。
    arg!「|i|
        field_arr!  (i!1  読む)    書く。
    」それぞれ実行。
    要素数=(arg!1  読む)!要素数?。
    
    ret=テーブル！(field_arr)  作る。
    「|j|
        「j>1」!なら「
            arg!「|n  i|
                ret!(n!(j)  読む)  書く。
            」それぞれ実行。
        」実行。
    」！(要素数)    繰り返す。
    ret。
」。

テーブル：フィールド名変更＝「|before  after|
    「全部!(after!=undef)  (before!=undef)  本当」!なら「
        フィールド名！「|n  i|
            「n==before」!なら「num=i」実行。
        」それぞれ実行。
        フィールド名！(num)  (after)  上書き。
        自分：フィールド名＝フィールド名。
    」実行。
    自分。
」。

テーブル：件数＝「|;ret|
    ret=テーブル!"件数"  作る。
    ret!((自分：データ！要素数？)/(フィールド名!要素数?))  書く。
    ret。
」。

テーブル：数にする＝「
    //num=(自分:データ！1  読む)＋0。
    num=:window!(自分:データ！1  読む)  parseFloat.
    num。
」。

テーブル：配列にする＝「
    arr=配列!作る。
    自分:データ!「|  n  |
        arr!(n)  書く。
    」それぞれ実行。
    arr。
」。

テーブル：欠損値の置換＝「  |option|
    「option=="0置換"」！なら「
        自分:データ!「|n  i|
            「n==""」!なら「自分:データ！(i)  0  上書き。」実行。
        」それぞれ実行。
    」そうでなければ「option=="平均値置換"」なら「
        自分:データ！「|n  i|
            「n==""」!なら「
                tmp=自分！作る。
                フィールド=フィールド名！(i%(フィールド名！要素数?))  読む。
                自分:データ！(i)  (自分！(フィールド)    平均値    値読み出し)  上書き。
            」実行。
        」それぞれ実行。
    」そうでなければ「
        自分:データ！「|n  i|
            「n==""」!なら「
                tmp=自分！作る。
                フィールド=フィールド名！(i%(フィールド名！要素数?))  読む。
                自分:データ！(i)  (自分！(フィールド)    中央値    値読み出し)  上書き。
            」実行。
        」それぞれ実行。
    」実行。
    自分。
」。

テーブル:check_fn＝「|;args  flag  res|
    args=自分!(_rest)  getarg。
    flag=0。
    res=false。
    args!「|n|
        フィールド名!「|m|
            「n==m」!なら「flag=flag+1」実行。
        」それぞれ実行。
    」それぞれ実行。
    「flag==(args!要素数?)」!なら「res=true」実行。
    res。
」。

テーブル:check_dt＝「|;res  |
    res=true。
    自分:データ!「|n  i|
        「(n+"")!"[^0-9０-９\-\.]"    含む?」!なら「
            res=false。
        」実行。
    」それぞれ実行。
    res。
」。

テーブル:check_arg=「|  args  option  ;_max  flag|
    「args!=undef」!なら「
        arg_num=args!要素数?。
        flag=true。
        「option=="freq"」!なら「
            「  (arg_num)<1」!なら「flag=false」実行。
            「(arg_num)>=2」!なら「_max=args!2    読む」実行。
            「(arg_num)>=3」!なら「_min=args!3    読む」実行。
            「(arg_num)>=4」!なら「階級幅=args!4    読む」実行。
            「階級幅!=undef」!なら「
                「(階級幅+"")!"[^0-9０-９\.-]"    含む?」!なら「flag=false」実行。
            」実行。
            「_min!=undef」!なら「
                「(_min+"")!"[^0-9０-９\.-]"    含む?」!なら「flag=false」実行。
            」実行。
            「_max!=undef」!なら「
                「(_max+"")!"[^0-9０-９\.-]"    含む?」!なら「flag=false」実行。
            」実行。
            「(自分!(args!1  読む)  check_fn)==false」!なら「flag=false」実行。
            「flag==true」!なら「
                「(自分!(args!1  読む)    射影  (args!1  読む)  check_dt)==false」!なら「flag=false」実行。
            」実行。
            
        」そうでなければ「option=="common"」なら「
            
            「arg_num<1」!なら「flag=false」実行。
            「(自分!(args)  check_fn)==false」!なら「flag=false」実行。
            
            「flag==true」!なら「
                tmp=自分!(args)  射影。
                str_arr=tmp:データ!「|  n  |    (n+"")!"[^0-9０-９\.-]"  含む?」  選ぶ。
                「(str_arr!要素数?)  >0  」！なら「flag==false」実行。
            」実行。
            
        」そうでなければ「option=="common1"」なら「
            
            「arg_num<1」!なら「flag=false」実行。
            
            「(自分!(args!1    読む)  check_fn)==false」!なら「flag=false」実行。
            
        」そうでなければ「option=="common2"」なら「
            
            「arg_num<2」!なら「flag=false」実行。
            「(自分!(args!1  読む)  check_fn)==false」!なら「flag=false」実行。
            「(自分!(args!2  読む)  check_fn)==false」!なら「flag=false」実行。
            
        」そうでなければ「option=="qn1"」なら「
            
            「arg_num<1」!なら「flag=false」実行。
            「(自分!(args!1  読む)  check_fn)==false」!なら「flag=false」実行。
            「flag==true」!なら「
                「(自分!(args!1  読む)    射影  (args!1  読む)  check_dt)==false」!なら「flag=false」実行。
            」実行。
        」そうでなければ「option=="qn2"」なら「
            
            「arg_num<2」!なら「flag=false」実行。
            「(自分!(args!1  読む)  check_fn)==false」!なら「flag=false」実行。
            「(自分!(args!2  読む)  check_fn)==false」!なら「flag=false」実行。
            「flag==true」!なら「
                「(自分!(args!1  読む)    射影  (args!1  読む)  check_dt)==false」!なら「flag=false」実行。
                「(自分!(args!2  読む)    射影  (args!2  読む)  check_dt)==false」!なら「flag=false」実行。
            」実行。
            
        」そうでなければ「option=="qn3"」なら「
            
            「arg_num<2」!なら「flag=false」実行。
            「(自分!(args!1  読む)  check_fn)==false」!なら「flag=false」実行。
            「(自分!(args!2  読む)  check_fn)==false」!なら「flag=false」実行。
            「(自分!(args!3  読む)  check_fn)==false」!なら「flag=false」実行。
            「flag==true」!なら「
                「(自分!(args!1  読む)    射影  (args!1  読む)  check_dt)==false」!なら「flag=false」実行。
                「(自分!(args!2  読む)    射影  (args!2  読む)  check_dt)==false」!なら「flag=false」実行。
                「(自分!(args!3  読む)    射影  (args!2  読む)  check_dt)==false」!なら「flag=false」実行。
            」実行。
        」そうでなければ「option=="qn"」なら「
            
            「arg_num<1」!なら「flag=false」実行。
            「(自分!(args)  check_fn)==false」!なら「flag=false」実行。
            「flag==true」!なら「
                「(自分!(args!1  読む)    射影  (args!1  読む)  check_dt)==false」!なら「flag=false」実行。
                「(自分!(args!2  読む)    射影  (args!2  読む)  check_dt)==false」!なら「flag=false」実行。
            」実行。
            
        」実行。
    」そうでなければ「
        flag=false。
    」実行。
    flag。
」。

//RDB演算の定義
テーブル：射影＝「｜;fs  fn  ret    全数｜
    fs=配列！作る。
    fn=配列！作る。
    要素数=フィールド名!要素数?。
    引数=自分!(_rest)  getarg。
    「自分!(引数)    check_fn」!なら「
        引数！「｜f  i｜
            「｜n｜
                「(自分：フィールド名！（n）読む）＝＝f」！なら「fs！（n）書く。fn!  (f)  書く」実行。
            」！（自分：フィールド名！要素数？）繰り返す。
        」それぞれ実行。
        ret＝テーブル！（fn）作る。
        tmp=配列!作る。
        fs!「|m  j|
            自分:データ！「|n  i|
                「((i-1)%要素数)==(m-1)」!なら「tmp!(n)  書く。」実行。
            」それぞれ実行。
        」それぞれ実行。
        全数=自分!件数    数にする。
        「|i|
            「|j|
                ret!(tmp!(i+((j-1)*全数))    読む)    書く。
            」!(fs!要素数?)  繰り返す
        」!(全数)    繰り返す。
        ret。
    」そうでなければ「
        undef。
    」実行。
」。

テーブル：選択＝「｜条件  ;ret｜
    ret＝テーブル！（フィールド名）作る。
    自分:データ！「｜r  i｜
        番号=(i-1)%(フィールド名！要素数？)。
        f＝フィールド名！（番号+1）読む。
        「(r+"")!"[^0-9０-９\-\.]"    含む?」!なら「
            s＝""+f+"＝"+コード文字(0x22)+r+コード文字(0x22)+"。"。
        」そうでなければ「
            s＝""+f+"＝"+r+"。"。
        」実行。
        
        「(s!"<"  含む?)==false」！なら「
            （s）！実行。
        」実行。
        //条件が正しければ戻り値にrを設定
        「全部!（条件！実行）(i%(自分:フィールド名!要素数?)==0)  本当」！なら「
            「|  n  |
                ret!(自分:データ！(i-番号+(n-1))  読む)    書く。
            」!(自分:フィールド名!要素数?)  繰り返す。
        」実行。
    」それぞれ実行。
    ret。
」。

テーブル：結合=「|t  ;ret|
    keyf=配列!作る。
    keyn=配列!作る。
    keye=配列!作る。
    要素数m=自分：フィールド名！要素数？。
    要素数t=t：フィールド名！要素数？。
    「｜n｜f=自分：フィールド名！（n）読む。//  結合キーkの判別
        「｜i｜f2＝t:フィールド名！（i）読む。
            「f==f2」！なら「kf=f。kn=n。ki=i。keyf!(f)  書く。keyn!(n)  書く。keye!(i)    書く」実行。
        」！（要素数t）繰り返す。
    」！（要素数m）繰り返す。
    途中データm=自分!(keyf)  射影。
    途中データt=t!(keyf)  射影。
    行数m=途中データm!件数    数にする。
    行数t=途中データt!件数    数にする。
    列数=keyf!要素数?。
    
    連結m=途中データm!(行数m)  (列数)  _レコード連結。
    連結t=途中データt!(行数t)  (列数)  _レコード連結。
    
    一致レコード行番号配列=配列!  作る。
    追加予定レコード行番号配列=配列!作る。
    連結m!「|n  i|
        連結t!「|m  j|
            「("@@"+n)==("@@"+m)」!なら「
                一致レコード行番号配列!(i)    書く。
                追加予定レコード行番号配列!(j)  書く。
            」実行。
        」それぞれ実行。
    」それぞれ実行。
    
    tmp_arr=配列！作る。
    //tmp=t:フィールド名！作る。
    //tmp=t:フィールド名！concat。
    tmp=配列!作る。
    t:フィールド名!「|n|
        ｔｍｐ！（ｎ）    書く。
    」それぞれ実行。
    t:フィールド名!「|n|
        keyf!「|m|
            「n==m」!なら「tmp!(n)    消す」実行。
        」それぞれ実行。
    」それぞれ実行。
    追加データ＝t!(tmp)    射影。
    fn=(自分:フィールド名)!(tmp)  連結。
    ret=テーブル!(fn)  作る。
    一致レコード行番号配列!「|  n  i|
        
        「|j|
            ret!(自分:データ!((n*要素数m)+(j-1)-(要素数-1))    読む)    書く。
        」!(要素数m)  繰り返す。
        
        「|j|
            番号=追加予定レコード行番号配列!(i)  読む。
            ret!(追加データ!(((番号-1)*(追加データ:フィールド名!要素数?))+(j))  読む)  書く。
        」!(追加データ:フィールド名!要素数?)  繰り返す。
        
    」それぞれ実行。
    
    
    「全部！((ret:データ!要素数?)==0)  ((一致レコード行番号配列!要素数)!=0)    本当」！なら「
        mn=(自分！要素数？)/要素数m。
        tn=(t！要素数？)/要素数t。
        time=0。
        time2=0。
        「|  cnt  |
            「|i|  ret!(自分:データ!(i+time)  読む)  書く。」！(要素数m)  繰り返す。
            「|i|  ret!(t!(i+time2)  読む)  書く。」！(要素数t)  繰り返す。
            time2=time2+要素数t。
            「time2==(t!要素数?)」!なら「time2=0」実行。
            「(cnt%tn)==0」！なら「
                time=time+要素数m。
            」実行。
        」!(mn*tn)    繰り返す。
    」実行。
    
    ret。
」。

テーブル:_レコード連結=「|  行数    列数  |
    ret=配列!作る。
    「|i|
        tmp=""。
        「|j|
            「j!=(列数)」！なら    「
                tmp=(tmp+"")!  ((自分:データ!(((i-1)*(列数))+j)  読む)+"＠＠")  連結。
            」そうでなければ「
                tmp=(tmp+"")!  ((自分:データ!(((i-1)*(列数))+j)  読む)+"")  連結。
            」実行。
        」!(列数)    繰り返す。
        ret!(tmp)  書く。
    」!(行数)  繰り返す。
    ret
」。

テーブル:行列入れ替え＝「|;tmp  f|
    tmp=配列！作る。
    f=自分:フィールド名。
    フィールド数=f！要素数？。
    「|i|  tmp！(配列！  (f!(i)  読む)  作る)  書く」!(フィールド数)    繰り返す。
    (自分:データ)!「|  n  i  |
        index＝「(i%フィールド数)==0」!なら「フィールド数」そうでなければ「(i%フィールド数)」実行。
        (tmp!(index)  読む)!  (n)  書く。
    」それぞれ実行。
    tmp!「|n  i|
        「i==1」!なら「
            n!「|m|  m+""」    加工。
            ret  =  テーブル!(n)  作る。
        」そうでなければ「
            ret:データ=(ret:データ)!(n)  連結。
        」実行。
    」それぞれ実行。
    ret。
」。


テーブル：小さい順＝「|並び替えたいフィールド名;  ret  res|
    「並び替えたいフィールド名==undef」!なら「
        自分。
    」そうでなければ「
        並び替えたいフィールド名の番号＝０．
        「｜番号｜
            「（フィールド名！（番号）読む）＝＝並び替えたいフィールド名」！なら「
                並び替えたいフィールド名の番号＝番号。
            」実行。
        」！（フィールド名！要素数？）繰り返す。
        quick=「｜arr  num  num_f;  ret  n  p  left  right  v  p番号  v番号｜
            ret=arr。
            n＝arr！要素数？。
            「(n/num_f)＞1」！なら「
                p番号＝n-num_f。
                left=配列！作る。
                right=配列！作る。
                「｜i;v番号｜
                    v番号＝(i-1)*num_f。
                    「(arr!(v番号+num)読む)<(arr!(p番号+num)読む)」！なら「
                        「｜i｜
                            left！（arr!(v番号+i)読む）書く
                        」！（num_f）繰り返す。
                    」そうでなければ「
                        「｜i｜
                            right！（arr!(v番号+i)読む）書く。
                        」！（num_f）繰り返す。
                    」実行。
                」！（n/num_f-1）繰り返す。
                p＝配列！作る。
                「|i|p!(arr!(p番号+i)読む)書く」！（num_f）繰り返す。
                ret＝配列！作る（！（left）(num)(num_f)quick）（p）（！（right）(num)(num_f)quick）連結。
            」実行。
            ret。
        」。
        res=!(自分:データ)  (並び替えたいフィールド名の番号)(自分：フィールド名！要素数？)quick。
        
        ret=テーブル！(フィールド名)作る。
        「|n|ret!(res!(n)読む)書く」！（res!要素数？）繰り返す。
        ret。
    」実行。
」。

テーブル：大きい順＝「|並び替えたいフィールド名;  ret  res|
    「並び替えたいフィールド名==undef」!なら「
        自分。
    」そうでなければ「
        並び替えたいフィールド名の番号＝０．
        「｜番号｜
            「（フィールド名！（番号）読む）＝＝並び替えたいフィールド名」！なら「
                並び替えたいフィールド名の番号＝番号。
            」実行。
        」！（フィールド名！要素数？）繰り返す。
        quick=「｜arr  num  num_f;  ret  n  p  left  right  v  p番号  v番号｜
            ret=arr。
            n＝arr！要素数？。
            「(n/num_f)＞1」！なら「
                p番号＝n-num_f。
                left=配列！作る。
                right=配列！作る。
                「｜i;v番号｜
                    v番号＝(i-1)*num_f。
                    「(arr!(v番号+num)読む)>(arr!(p番号+num)読む)」！なら「
                        「｜i｜
                            left！（arr!(v番号+i)読む）書く
                        」！（num_f）繰り返す。
                    」そうでなければ「
                        「｜i｜
                            right！（arr!(v番号+i)読む）書く
                        」！（num_f）繰り返す。
                    」実行。
                」！（n/num_f-1）繰り返す。
                p＝配列！作る。
                「|i|p!(arr!(p番号+i)読む)書く」！（num_f）繰り返す。
                ret＝配列！作る（！（left）(num)(num_f)quick）（p）（！（right）(num)(num_f)quick）連結。
            」実行。
            ret。
        」。
        res=!(自分:データ)  (並び替えたいフィールド名の番号)(自分：フィールド名！要素数？)quick.
        ret=テーブル！(フィールド名)作る。
        「|n|ret!(res!(n)読む)書く」！（res!要素数？）繰り返す。
        ret。
    」実行。
」。

テーブル：内部_重複なし＝「|;ret  flag|
    f=_rest!1  読む。
    arr=((自分！(f)    射影):データ)!  ""  消す。
    ret＝テーブル！(f)    作る。
    flag=0。
    arr!「|n  i|
        ret:データ!「|m  j|
            「n==m」!なら「flag=1」実行。
        」それぞれ実行。
        「flag==0」!なら「ret!(n)  書く。」実行。
        flag=0。
    」それぞれ実行。
    ret。
」。

テーブル：重複なし＝「|;ret  flag|
    列数=自分:フィールド名！要素数？。
    行数=(自分:データ!要素数?)/列数。
    res=テーブル!(自分:フィールド名)    作る。
    連結データ配列=配列!作る。
    重複削除配列=配列!作る。
    「|i|
        tmp=""。
        「|j|
            「j!=(列数)」！なら    「
                tmp=(tmp+"")!  ((自分!(((i-1)*(列数))+j)  読む)+"＠＠")  連結。
            」そうでなければ「
                tmp=(tmp+"")!  ((自分!(((i-1)*(列数))+j)  読む)+"")  連結。
            」実行。
        」!(列数)    繰り返す。
        連結データ配列!(tmp)  書く。
    」!(行数)  繰り返す。
    連結データ配列!「|n|
        「i==1」!なら「
            重複削除配列!(n)  書く。
        」そうでなければ「
            flag=0。
            重複削除配列!「|m|
                「m==n」!なら「flag=1」実行。
            」それぞれ実行。
            「flag==0」!なら「重複削除配列!(n)  書く」実行。
            flag=0。
        」実行。
    」それぞれ実行。
    res=テーブル!(自分:フィールド名)  作る。
    重複削除配列!「|n|
        tmp=n!"＠＠"    分割。
        tmp!「|m|
            //res!(m)  書く。
            「(m+"")!"[^0-9０-９\-\.]"    含む?」!なら「
                res!(m)  書く。
            」そうでなければ「
                //res!(m)  書く。
                res!(:window！(m)parseFloat)  書く。
            」実行。
        」それぞれ実行。
    」それぞれ実行。
    res。
」。

テーブル：追加＝「|  |
    フィールド数=自分:フィールド名!要素数?。
    追加数=_rest!要素数?。
    _rest！「|n  i|
        「自分!(n)配列?」！なら「
            追加数=n!要素数？。
            n!「|m|
                自分！(m)  書く。
            」それぞれ実行。
        」そうでなければ「
            「i<=フィールド数」!なら「
                自分！(n)  書く。
            」実行。
        」実行。
    」それぞれ実行。
    「全部!((フィールド数-追加数)>0)  (追加数!=0)  本当」！なら「
        「
            自分!""    書く。
        」!(フィールド数-追加数)    繰り返す。
    」実行。
    自分。
」。

テーブル：レコード取り出し＝「｜key  num  ;ret｜
    ret＝テーブル！（フィールド名）作る。
    要素数＝フィールド名!要素数？。
    自分：データ！「｜r  i｜
        「全部!(key==ｒ)  ((i-num)%要素数==0)  本当」!なら「
            「|j|
                ret!(自分！(i-num+(j))  読む)    書く。
            」！(要素数)    繰り返す。
        」実行。
    」それぞれ実行。
    ret。
」。

テーブル：集計＝「|  f    con  ;cnt|
    ret=テーブル！(f+"_集計")  作る。
    cnt=0。
    arr=自分！(f)  射影。
    arr：データ!「|n  i|
        「n==con」!なら「cnt=cnt+1」実行。
    」それぞれ実行。
    ret!(cnt)    書く。
    ret。
」。

テーブル：集計2＝「|  f1  con1  f2  con2  ;cnt|
    ret=テーブル！(f1+"_集計")  作る。
    cnt=0。
    f1_arr=自分！(f1)  射影。
    f2_arr=自分！(f2)  射影。
    要素数=(f1_arr:フィールド名)!要素数?。
    「|i;  v1  v2|
        v1=f1_arr：データ!(i)    読む。
        v2=f2_arr：データ!(i)  読む。
        「  全部!((v1+"")==(con1+""))  ((v2+"")==(con2+""))    本当」！なら「
            cnt=cnt+1。
        」実行。
    」!(f1_arr!件数    数にする)    繰り返す。
    ret!(cnt)    書く。
    ret。
」。

テーブル:_引数設定＝「
    args=配列!作る。
    自分:フィールド名!「|  n  |
        args!(n)  書く。
    」それぞれ実行。
    型配列=グラフ!(自分)  型判定。
    型配列!「|  n  |
        args!(n)  消す。
    」それぞれ実行。
    args。
」。

//データ分析機能の定義
テーブル：最大値＝「|;ret  f1_arr  args  arg_num max|
    args=自分!(_rest)  getarg。
    「args==undef」!なら「
        args=自分!_引数設定。
    」実行。
    
    「自分!(args)  "common"  check_arg」!なら「
        ret=テーブル!作る。
        args!「|  n  i |
            ret:フィールド名!(n+"_最大値")  書く。
            f1_arr=自分!(n)  射影。
            f1_arr：データ!""  消す。
            f1_arr：データ!「| m j |
                「j==1」!なら「max=m」実行。
                「max < m」!なら「 max=m」実行。
            」それぞれ実行。
            ret!(max)  書く。
        」それぞれ実行。
        ret。
    」そうでなければ「
        undef。
    」実行。
」。

テーブル：最小値＝「|;ret  f1_arr  args  arg_num min|
    args=自分!(_rest)  getarg。
    「args==undef」!なら「
        args=自分!_引数設定。
    」実行。
    
    「自分!(args)  "common"  check_arg」!なら「
        ret=テーブル!作る。
        args!「|  n  i |
            ret:フィールド名!(n+"_最大値")  書く。
            f1_arr=自分!(n)  射影。
            f1_arr：データ!""  消す。
            f1_arr：データ!「| m j |
                「j==1」!なら「min=m」実行。
                「min > m」!なら「 min=m」実行。
            」それぞれ実行。
            ret!(min)  書く。
        」それぞれ実行。
        ret。
    」そうでなければ「
        undef。
    」実行。
」。

テーブル：最頻値＝「|  ;freq_arr  _max_rec  args  arg_num _max|
    args=自分!(_rest)  getarg。
    「自分!(args)  "common1"  check_arg」!なら「
        f1=args!1  読む。
        freq_arr=自分！(f1)  度数。
        _max=freq_arr!"度数"  最大値  数にする。
        _max_rec=freq_arr！(_max)  2  レコード取り出し。
        ret=テーブル！((f1)+"_最頻値")  "度数"  作る。
        _max_rec：データ！「|  val  cnt  |
            ret!(val)  書く。
        」それぞれ実行。
        ret。
    」そうでなければ「
        undef。
    」実行。
」。

テーブル：合計値＝「|;args  f1  ret  sum    |
    args=自分!(_rest)  getarg。
    「args==undef」!なら「
        args=自分!_引数設定。
    」実行。
    
    「自分!(args)  "common"  check_arg」!なら「
        ret=テーブル!作る。
        args!「|  n  i  |
            フィールド番号=自分！(ｎ)  フィールド番号取得。
            ret:フィールド名！(n+"_合計値")  書く。
            sum=0。
            「フィールド番号！=undef」！なら「
                「|i|
                    「(自分：データ！(フィールド番号+(i-1)*(フィールド名!要素数?))  読む)!="NA"」!なら「
                        sum=sum+(自分：データ！(フィールド番号+(i-1)*(フィールド名!要素数?))  読む)  。
                    」実行。
                」！((自分：データ！要素数?)/要素数)  繰り返す。
                ret!(sum)  書く。
            」実行。
        」それぞれ実行。
    」そうでなければ「
        undef。
    」実行。
    ret。
」。

テーブル：平均値＝「|  ;  args  f1  ret  sum  レコード数  フィールド番号|
    args=自分!(_rest)  getarg。
    「args==undef」!なら「
        args=自分!_引数設定。
    」実行。
    
    「自分!(args)  "common"  check_arg」!なら「
        ret=テーブル!作る。
        args!「|  n  i  |
            フィールド番号=自分！(n)  フィールド番号取得。
            ret:フィールド名！(n+"_平均値")  書く。
            レコード数=(自分：データ！要素数?)/(フィールド名!要素数?)。
            sum=0。
            「フィールド番号！=undef」！なら「
                「|i|
                    「(自分:データ！(フィールド番号+(i-1)*(フィールド名!要素数?))  読む)==""」！なら「
                        レコード数=レコード数-1。
                    」そうでなければ「
                        //sum=sum+(自分:データ！(フィールド番号+(i-1)*(フィールド名!要素数?))  読む)  。
                        sum=sum+(:window!(自分:データ！(フィールド番号+(i-1)*(フィールド名!要素数?))  読む)  parseFloat)。
                    」実行。
                」！((自分：データ！要素数?)/要素数)  繰り返す。
                ret!(sum/(レコード数))  書く。
            」実行。
        」それぞれ実行。
    」そうでなければ「
        undef。
    」実行。
    ret。
」。

テーブル：偏差＝「|  ;args  f1    f1_arr  dev_arr  ret  ave|
    args=自分!(_rest)  getarg。
    「自分!(args)  "qn1"  check_arg」!なら「
        f1=args!1    読む。
        f1_arr=自分！(f1)  射影。
        f1_arr:データ=f1_arr:データ!""    消す。
        ave=f1_arr！(f1)  平均値  値読み出し。
        dev_arr=配列！作る。
        f1_arr:データ！「｜n｜
            「n!="NA"」!なら「
                dev_arr!(n-ave)  書く。
            」実行。
        」それぞれ実行。
        ret=テーブル！((f1)+"_偏差")  作る。
        dev_arr！「|  val  |
            ret!(val)  書く。
        」それぞれ実行。
        ret。
    」そうでなければ「
        undef。
    」実行。
」。

テーブル：分散＝「|;ret  sum  data_array  ave  dev  disp  args  f1  |
    args=自分!(_rest)  getarg。
    「自分!(args)  "qn1"  check_arg」!なら「
        f1=args!1    読む。
        data_array＝自分！(f1)  射影。
        data_array:データ=data_array:データ!""  消す。
        sum=data_array！(f1)  合計値    値読み出し。
        ave=sum/(data_array:データ!要素数?)。
        dev=0.
        data_array:データ！「｜n｜
            dev  =  dev  +  (((n)-(ave))*((n)-(ave)))。
        」それぞれ実行。
        disp=0.
        disp  =  dev/(data_array：データ！要素数?)。
        ret=テーブル！((f1)+"_分散")  作る。
        ret!(disp)  書く。
        ret。
    」そうでなければ「
        undef。
    」実行。
」。

テーブル：不偏分散＝「|;data_array  sum  要素数  ave  dev  disp  args  f1|
    args=自分!(_rest)  getarg。
    「自分!(args)  "qn1"  check_arg」!なら「
        f1=args!1    読む。
        data_array＝自分！(f1)  射影。
        data_array:データ=data_array:データ!""  消す。
        sum=data_array！(f1)  合計値    値読み出し。
        要素数＝data_array：データ！要素数?。
        ave=sum/要素数。
        dev=0.
        data_array:データ！「｜n｜
            dev  =  dev  +  (((n)-(ave))*((n)-(ave)))。
        」それぞれ実行。
        disp=0.
        disp  =  (要素数/(要素数-1))*dev/要素数。
        ret=テーブル！((f1)+"_不偏分散")  作る。
        ret!(disp)  書く。
        ret。
    」そうでなければ「
        undef。
    」実行。
」。

テーブル：共分散＝「|;args  f1  f2  f1_dev_arr  f2_dev_arr  total  ret  cav  args  |
    args=自分!(_rest)  getarg。
    「自分!(args)  "qn2"  check_arg」!なら「
        f1=args!1    読む。
        f2=args!2    読む。
        f1_dev_arr=自分！(f1)  偏差。
        f2_dev_arr=自分！(f2)  偏差。
        total＝0。
        f1_dev_arr:データ！「|  val  cnt  |
            total=total+(val*(f2_dev_arr：データ!  (cnt)  読む))。
        」それぞれ実行。
        
        cav=total/(f1_dev_arr:データ!要素数?)。
        ret=テーブル！((f1)+"&"+(f2)+"_共分散")  作る。
        ret!(cav)    書く。
        ret。
    」そうでなければ「
        undef。
    」実行。
」。

テーブル：不偏共分散＝「|;args  f1  f2  f1_dev_arr  f2_dev_arr  要素数  total  cav  ret|
    args=自分!(_rest)  getarg。
    「自分!(args)  "qn2"  check_arg」!なら「
        f1=args!1    読む。
        f2=args!2    読む。
        f1_dev_arr=自分！(f1)  偏差。
        f2_dev_arr=自分！(f2)  偏差。
        要素数＝f1_dev_arr：データ!要素数?。
        total＝0。
        f1_dev_arr:データ！「|  val  cnt  |
            total=total+(val*(f2_dev_arr：データ!  (cnt)  読む))。
        」それぞれ実行。
        
        cav=(要素数/(要素数-1))*(total/要素数)。
        ret=テーブル！((f1)+"&"+(f2)+"_不偏共分散")  作る。
        ret!(cav)    書く。
        ret。
    」そうでなければ「
        undef。
    」実行。
」。

テーブル：相関係数＝「|;  f1  f2  tmp1  tmp2  cav  st_dev1  st_dev2  cor  ret  |
    args=自分!(_rest)  getarg。
    args2=args!concat。
    //args2=args!作る。
    「自分!(args)  "qn"  check_arg」!なら「
        f1=args!1    読む。
        f2=args!2    読む。
        tmp1  =  配列！作る。
        args!「|  f1  |
            tmp2  =  配列！作る。
            args！「|  f2  |
                cav=自分！(f1)  (f2)  共分散  値読み出し。
                st_dev1=自分！(f1)  標準偏差  値読み出し。
                st_dev2=自分！(f2)  標準偏差  値読み出し。
                cor=cav/(st_dev1*st_dev2)。
                tmp2!(cor)    書く。
            」それぞれ実行。
            tmp1!(tmp2)    書く。
        」それぞれ実行。
        
        ret=テーブル！(args!1  ""  挿入)  作る。
        tmp1！「|  f  i  |
            ret!(f!1  (args!(i+1)    読む)  挿入)  追加。
        」それぞれ実行。
        ret。
    」そうでなければ「
        undef。
    」実行。
」。

テーブル：不偏共分散＝「|;args  f1  f2  f1_dev_arr  f2_dev_arr  要素数  total  cav  ret|
    args=自分!(_rest)  getarg。
    「自分!(args)  "qn2"  check_arg」!なら「
        f1=args!1    読む。
        f2=args!2    読む。
        f1_dev_arr=自分！(f1)  偏差。
        f2_dev_arr=自分！(f2)  偏差。
        要素数＝f1_dev_arr：データ!要素数?。
        total＝0。
        f1_dev_arr:データ！「|  val  cnt  |
            total=total+(val*(f2_dev_arr：データ!  (cnt)  読む))。
        」それぞれ実行。
        
        cav=(要素数/(要素数-1))*(total/要素数)。
        ret=テーブル！((f1)+"&"+(f2)+"_不偏共分散")  作る。
        ret!(cav)    書く。
        ret。
    」そうでなければ「
        undef。
    」実行。
」。

テーブル：_相関係数＝「|f1  f2;  tmp1  tmp2  cav  st_dev1  st_dev2  cor  ret  |
    cav=自分！(f1)  (f2)  共分散  値読み出し。
    st_dev1=自分！(f1)  標準偏差  値読み出し。
    st_dev2=自分！(f2)  標準偏差  値読み出し。
    cor=cav/(st_dev1*st_dev2)。
    cor。
」。

テーブル：偏相関係数＝「|;  f1  f2  tmp1  tmp2  cav  st_dev1  st_dev2  cor  ret  |
    args=自分!(_rest)  getarg。
    args2=args!concat。
    //args2=args!作る。
    「自分!(args)  "qn3"  check_arg」!なら「
        f1=args!1    読む。
        f2=args!2    読む。
        f3=args!3    読む。
        cor1=自分!(f2)  (f3)    _相関係数。
        cor2=自分!(f1)  (f2)    _相関係数。
        cor3=自分!(f1)  (f3)    _相関係数。
        
        cor2=0.706。
        cor3=0.870。
        cor1=0.302。
        
        r=(cor2-(cor1*cor3))/(sqrt(1-((cor1)!  2  pow))*sqrt(1-((cor3)!  2  pow)))。
        ret=テーブル！(ｆ１＋”&”+f2+"&"+f3+"_偏相関係数")  作る。
        ret!(r)  書く。
        ret。
    」そうでなければ「
        undef。
    」実行。
」。

テーブル：標準偏差＝「|;f1  disp  sdev  ret  args|
    args=自分!(_rest)  getarg。
    「自分!(args)  "qn1"  check_arg」!なら「
        f1=args!1    読む。
        disp=自分！(f1)  分散    値読み出し。
        sdev=sqrt(disp)。
        ret=テーブル！((f1)+"_標準偏差")  作る。
        ret!(sdev)  書く。
    」そうでなければ「
        undef。
    」実行。
」。

テーブル：不偏標準偏差＝「|;f1  disp  sdev  ret  args|
    args=自分!(_rest)  getarg。
    「自分!(args)  "qn1"  check_arg」!なら「
        f1=args!1    読む。
        disp=自分！(f1)  不偏分散    値読み出し。
        sdev=sqrt(disp)。
        ret=テーブル！((f1)+"_不偏標準偏差")  作る。
        ret!(sdev)  書く。
    」そうでなければ「
        undef。
    」実行。
」。

テーブル：中央値＝「|;f1  data_arr  要素数  中心  median  disp  sdev  ret  args|
    args=自分!(_rest)  getarg。
    「args==undef」!なら「
        args=自分!_引数設定。
    」実行。
    
    「自分!(args)  "common"  check_arg」!なら「
        ret=テーブル!作る。
        args!「|  n  i  |
            data_arr＝自分！(n)    小さい順  (n)  射影。
            data_arr:データ=data_arr:データ!""  消す。
            要素数=data_arr:データ!要素数?。
            ret:フィールド名！(n+"_中央値")  書く。
            「要素数!=0」!なら「
                中心=ceil(要素数/2)。
                「(要素数%2)==0」!なら「
                    median=((data_arr:データ！(中心)    読む)+(data_arr！(中心+1)  読む))/2。
                」そうでなければ「
                    median=data_arr:データ！(中心)  読む。
                」実行。
                ret!(median)  書く。
            」そうでなければ「
                ret!(undef)  書く。
            」実行。
        」それぞれ実行。
        ret。
    」そうでなければ「
        undef。
    」実行。
」。

テーブル:第１四分位数＝「|;args  f1  data_arr  要素数    中心  data  qua1  ret  |
    args=自分!(_rest)  getarg。
    「args==undef」!なら「
        args=自分!_引数設定。
    」実行。
    
    「自分!(args)  "common"  check_arg」!なら「
        ret=テーブル!作る。
        args!「|  n  i  |
            data_arr＝自分！(n)    小さい順  (n)  射影。
            data_arr:データ=data_arr:データ!""  消す。
            要素数=data_arr：データ!要素数?。
            中心=floor(要素数/2)。
            data=テーブル!(n)  作る。
            「|i|    data!(data_arr:データ!(i)  読む)  書く」!(中心)    繰り返す。
            qua1  =  data!  (n)  中央値    値読み出し。
            ret:フィールド名！((n)+"_第1四分位数")  書く。
            ret!(qua1)    書く。
        」それぞれ実行。
    」そうでなければ「
        undef。
    」実行。
」。

テーブル:第3四分位数＝「|;args  f1  data_arr  要素数    中心  data  qua3  ret  |
    args=自分!(_rest)  getarg。
    「args==undef」!なら「
        args=自分!_引数設定。
    」実行。
    
    「自分!(args)  "common"  check_arg」!なら「
        ret=テーブル!作る。
        args!「|  n  i  |
            data_arr＝自分！(n)    大きい順  (n)  射影。
            data_arr:データ=data_arr:データ!""  消す。
            要素数=data_arr:データ!要素数?。
            中心=floor(要素数/2)。
            data=テーブル!(n)  作る。
            「|i|    data!(data_arr:データ!(i)  読む)  書く」!(中心)    繰り返す。
            qua3  =  data!  (n)  中央値    値読み出し。
            ret:フィールド名！(n+"_第3四分位数")  書く。
            ret!(qua3)    書く。
        」それぞれ実行。
    」そうでなければ「
        undef。
    」実行。
」。

テーブル：度数＝「|;  args  arg_num      キー達    値達    ret  f1_arr  件数    |
    args=自分!(_rest)  getarg。
    「自分!(args)  "common1"  check_arg」!なら「
        arg_num=args!要素数?。
        f1=args!1  読む。
        キー達＝配列！作る。
        値達=配列！作る。
        f1の番号＝0。
        f1_arr=自分!(f1)  射影。
        f1_arr：データ=f1_arr：データ!""  消す。
        件数=f1_arr：データ!要素数?。
        階級=配列！作る。
        カウント=配列！作る。
        フィールド名要素数＝自分：フィールド名！要素数？。
        
        文字コード配列にする＝「｜str;ret｜
            ret=配列！作る。
            (str+"")!""分割「｜要素｜
                ret!(要素！文字コード)書く。
            」それぞれ実行。
            ret。
        」。
        文字列にする＝「｜文字コード配列;ret｜
            ret=""。
            文字コード配列！「｜要素｜
                ret＝（ret！（（要素）！コード文字）連結）。
            」それぞれ実行。
            ret。
        」。
        
        キー達：探す＝「｜キー；結果    ｜
            結果＝０。
            文字コード配列の比較＝「｜左    右｜
                (""+左)==(""+右)
            」。
            「｜番号｜
                「！（自分！（番号）読む）（キー）文字コード配列の比較」！なら「結果＝番号」実行。
            」！（自分！要素数？）繰り返す。
            結果。
        」。
        
        「｜番号｜
            「（フィールド名！（番号）読む）＝＝f1」！なら「
                f1の番号＝番号。
            」実行。
        」！（フィールド名要素数）繰り返す。
        
        「｜番号；値    キー番号｜
            「(自分：データ！（フィールド名要素数*(番号-1)+f1の番号）読む)!=""」！なら「
                値＝!(自分：データ！（フィールド名要素数*(番号-1)+f1の番号）読む)文字コード配列にする。
                「（キー達！（値）探す）＝＝０」！なら「キー達！（値）書く。値達！０    書く。」実行。
                キー番号＝キー達！（値）探す。
                値達！（キー番号）（（値達！（キー番号）読む）＋１）上書き。
            」実行。
        」！（（自分：データ！要素数？）/（フィールド名要素数））繰り返す。
        
        ret=テーブル！(f1)  "度数"    作る。
        「｜番号｜
            ret!(！(キー達！（番号）読む)文字列にする）書く。
            ret!（値達！（番号）読む）書く。
        」！（キー達！要素数？）繰り返す。
        ret。
    」そうでなければ「
        undef。
    」実行。
」。

テーブル：度数分布＝「｜；ret  args  arg_num  件数  f1_arr  _min  _max  階級幅  f1  flag｜
    args=自分!(_rest)  getarg。
    「自分!(args)  "freq"  check_arg」!なら「
        arg_num=args!要素数?。
        f1=args!1  読む。
        「(arg_num)>=2」!なら「_max=args!2    読む」実行。
        「(arg_num)>=3」!なら「_min=args!3    読む」実行。
        「(arg_num)>=4」!なら「階級幅=args!4    読む」実行。
        f1の番号=0。
        f1_arr=自分!(f1)  射影。
        f1_arr:データ=f1_arr:データ!""  消す。
        件数=f1_arr:データ!要素数?。
        階級=配列！作る。
        カウント=配列！作る。
        「_min==undef」！なら「_min=f1_arr!(f1) 最小値 数にする。」実行。
        「_max==undef」！なら「_max=f1_arr!(f1) 最大値 数にする。」実行。
        //「_min==undef」！なら「_min=:window!(f1_arr：データ!最小)  parseFloat。」実行。
        //「_max==undef」！なら「_max=:window!(f1_arr：データ!最大)  parseFloat。」実行。
        「_max > _min」!なら「
            min桁数=floor(log(_min)+1)。
            「min桁数 > 0」!なら「
                _min= floor(_min/(10!(min桁数-1) pow))*(10!(min桁数-1) pow)。
            」そうでなければ「
                _min=0。
            」実行。
            max桁数=floor(log(_max)+1)。
            _min= floor(_min/(10!(min桁数-1) pow))*(10!(min桁数-1) pow)。
            _max= ceil(_max/(10!(max桁数-1) pow))*(10!(max桁数-1) pow)。
            sum=_max-_min.
            「階級幅  ==  undef」!なら「
                「sum > 1 」！なら「
                    階級数=sum/(10!(floor(log(sum))) pow)。
                」そうでなければ「
                    階級数=10。
                」実行。
                桁数=floor(log(sum/階級数)+1)．
                「桁数  <=  0」!なら「桁数=桁数-1」実行。
                「_max >= 10 」!なら「
                    階級幅=ceil((sum/階級数)*桁数)/(桁数)．
                」そうでなければ「
                    階級幅=ceil((sum/階級数)*10*桁数)/(10*桁数)．
                」実行。
            」そうでなければ「
                階級数＝round(sum/階級幅)。
            」実行。
            ret=テーブル！"階級"  "度数"作る。
            「|  n  |
                「n!=階級数」!なら「
                    階級!(配列!  ((round((_min+階級幅*(n-1))*100)/100+"")!("~"+(round((_min+階級幅*n)*10)/10))  連結)  作る)  書く。
                」そうでなければ「
                    階級!(配列!  ((round((_min+階級幅*(n-1))*100)/100+"")!("~"+(_max))  連結)  作る)  書く。
                」実行。
                (階級!(n)  読む)!  0  書く。
                「n==1」！なら「
                    カウント!(_min+階級幅*(n-1))  書く。
                」そうでなければ「
                    「(_min+階級幅*(n-1)) < _max」!なら「
                        カウント!(_min+階級幅*(n-1))  書く。
                    」そうでなければ「
                        カウント!(_max) 書く。
                    」実行。
                」実行。
            」！(階級数)  繰り返す。
            
            f1_arr：データ!「|  n  i  |
                カウント！「|  m  j  |
                    「j==階級数」！なら「
                        「全部！((m  <=  n))  ((m+階級幅)  >=  n)  本当」!なら「
                            (階級！(j)  読む)!  2    (((階級！(j)  読む)!  2  読む)+1)  上書き。
                        」実行。
                    」そうでなければ「
                        「全部！((m  <=  n))  ((m+階級幅)  >  n)  本当」!なら「
                            (階級！(j)  読む)!  2    (((階級！(j)  読む)!  2  読む)+1)  上書き。
                        」実行。
                    」実行。
                」それぞれ実行。
            」それぞれ実行。
            階級!「|  n  |
                n!「|val|  ret!(val)  書く。」それぞれ実行。
            」それぞれ実行。
            ret。
        」そうでなければ「
            undef。
        」実行。
    」そうでなければ「
        undef。
    」実行。
」。

テーブル：度数分布表＝「|  ;  args  arg_num  f1  freq  frec_sum  frecdist_sum  ret  ｜
    args=自分!(_rest)  getarg。
    「自分!(args)  "freq"  check_arg」!なら「
        arg_num=args!要素数?。
        f1=args!1  読む。
        「(arg_num)>=2」!なら「_max=args!2    読む」実行。
        「(arg_num)>=3」!なら「_min=args!3    読む」実行。
        「(arg_num)>=4」!なら「階級幅=args!4    読む」実行。
        freq=自分!(f1) (_max) (_min) (階級幅) 度数分布。
        frec_sum=freq!"度数"  合計値    数にする。
        frecdist_sum=0。
        ret  =    テーブル!"階級"  "度数"  "相対度数"  作る。
        freq:データ!「|  n  i  |
            ret!  (n)  書く。
            「i%2==0」!なら「
                ret!(n/frec_sum)  書く。
                frecdist_sum=frecdist_sum+(n/frec_sum)。
            」実行。
        」それぞれ実行。
        ret!"計"    書く。
        ret!(frec_sum)  書く。
        ret!(frecdist_sum)    書く。
        ret。
    」そうでなければ「
        f1=  args!1  読む。
        ret=テーブル！(f1)  "度数"  "相対度数"  作る。
        f_arr=自分!(f1)  度数  (f1)    射影。
        freq=自分!(f1)  度数  "度数"    射影。
        sum=0。
        freq：データ!「|n|
            sum=sum+n。
        」それぞれ実行。
        
        freq:データ！「|n  i|
            ret!(f_arr：データ!(i)  読む)  書く。
            ret!(n)    書く。
            ret!(n/sum)  書く。
        」それぞれ実行。
        ret。
    」実行。
」。

テーブル：クロス集計=「|;ret  val  cp  tmp  sum  sum_array  args  arg_num  |
    args=自分!(_rest)  getarg。
    「自分!(args)  "common2"  check_arg」!なら「
        arg_num=args!要素数?。
        tmp  =  配列！作る。
        args!「|n  i|
            「i<=2」！なら「
                tmp!(自分！(n)  射影    重複なし)  書く。
            」実行。
        」それぞれ実行。
        カウント＝配列！作る。
        ((tmp!1  読む):データ)!「|n  j|
            sum=0。
            カウント！(n)  書く。
            ((tmp!2  読む):データ)！「|m|
                「全部!(n!="")  (m!="")  本当」!なら「
                    val=自分！(args!1  読む)  (n)  (args!2    読む)  (m)  集計2  数にする。
                    カウント！(val)  書く。
                    sum=sum+val。
                」実行。
            」それぞれ実行。
        」それぞれ実行。
        ret=テーブル！""  作る。
        ((tmp!2  読む):データ)!「|n  i|
            「n!=""」!なら「
                ret:フィールド名!(n)  書く。
            」実行。
        」それぞれ実行。
        
        カウント！「|n  i|
            ret!(n)  書く。
        」それぞれ実行。
        ret。
    」そうでなければ「
        undef。
    」実行。
」。


テーブル：クロス集計表=「|;ret    val  cp  tmp  sum  sum_array  args  arg_num|
    args=自分!(_rest)  getarg。
    「自分!(args)  "common2"  check_arg」!なら「
        arg_num=args!要素数?。
        tmp  =  配列！作る。
        args!「|n  i|
            「i<=2」！なら「
                tmp!(自分！(n)  射影    重複なし)  書く。
            」実行。
        」それぞれ実行。
        カウント＝配列！作る。
        
        (tmp!1  読む)!「|n  j|
            sum=0。
            カウント！(n)  書く。
            (tmp!2  読む)！「|m|
                「全部!(n!="")  (m!="")  本当」!なら「
                    val=自分！(args!1  読む)  (n)  (args!2    読む)  (m)  集計2  数にする。
                    カウント！(val)  書く。
                    sum=sum+val。
                」実行。
            」それぞれ実行。
            カウント！(sum)  書く。
        」それぞれ実行。
        
        ret=テーブル！""  作る。
        (tmp!2  読む)!「|n  i|
            「n!=""」!なら「
                ret:フィールド名!(n)  書く。
            」実行。
        」それぞれ実行。
        ret:フィールド名!"合計"  書く。
        
        カウント！「|n  i|
            ret!(n)  書く。
        」それぞれ実行。
        
        sum_array=配列！"合計"  作る。
        sum=0。
        (tmp!2  読む)!「|n  i|
            「n!=""」!なら「
                val  =  自分！(args!2  読む)  (n)  集計    数にする。
                sum_array!(val)    書く。
                sum=sum+val。
            」実行。
        」それぞれ実行。
        sum_array!(sum)  書く。
        ret!(sum_array)  追加。
        ret。
    」そうでなければ「
        undef。
    」実行。
」。

テーブル：数える＝「|;ret  f１    f1_arr  _max  args  arg_num|
    args=自分!(_rest)  getarg。
    ret=テーブル！""  作る。
    
    自分:フィールド名!「|n  i|
        ret:データ!(n)  書く。
        args!「|m  j|
            「i==1」！なら「ret:フィールド名!(m)  書く。  」実行。
            num=自分!(n)  (m)  集計  数にする。
            「num!=0」!なら「ret:データ!(num)  書く。」そうでなければ「ret:データ!(0)  書く。」実行。
        」それぞれ実行。
        
    」それぞれ実行。
    
    ret。
」。

テーブル:フィールド名取得＝「|  |
    res=自分：フィールド名!作る．
    res．
」．

テーブル：抜き出す＝「｜start end ;要素数 res｜
    要素数＝(自分:フィールド名)!要素数？。
    自分：データ!「｜n i｜
        行番号＝floor（(i-1)/要素数）。
        「i==1」！なら「res＝テーブル!（自分：フィールド名）  作る。」実行。
        「end==undef」！なら「
            「（行番号）==start」！なら「res!（n）  書く」実行。
        」そうでなければ「
            「全部!（（行番号）>= start）（（行番号）<= end）  本当」！なら「res!（n）  書く」実行。
        」実行。
    」それぞれ実行。
    res。
」。

//グラフオブジェクト
グラフ＝タートル！作る  消える  図形を作る。

グラフ:_間隔  =  30.
グラフ:_プロット幅  =  20.
グラフ:_原点x=(テーブル：_画面幅)/-2.2.
//JAVA2.5JS2.8
グラフ:_原点y=  -1*(テーブル：_画面高さ)*2.8/10.
グラフ:_縦幅=(テーブル：_画面高さ)*4.5/10.
グラフ:_横幅=(グラフ:_縦幅)*1.5.
グラフ:_方向="縦"。
グラフ:_天井=グラフ:_原点y+30.
グラフ:_底=グラフ:_原点y-10.
グラフ:_左端=グラフ:_原点x-20。
グラフ:_右端=グラフ:_原点x+グラフ:_横幅+10。
グラフ:_マーカフラグ=true。
グラフ:_最小メモリ=undef。
グラフ:_最大メモリ=undef。
グラフ：_横軸タイトル文=undef。
グラフ：_縦軸タイトル文=undef。
グラフ:_起点メモリ=0。
//JAVA_14  JS_8
グラフ:_軸ラベルサイズ=8。
//JAVA_20  JS_10
グラフ:_軸タイトルサイズ=10。


グラフ:_含む？＝「|arr  key;  res|
    res=false。
    arr!「|  n  |
        「n==key」!なら「res=true」実行。
    」それぞれ実行。
    res。
」。

グラフ：位置確定=「
    グラフ:_原点x=60+(グラフ:_原点x)。
    自分：_左端=(グラフ:_原点x-30)。
    自分：_右端=(グラフ:_原点x+自分:_横幅+10)。
」。

グラフ：型判定＝「  |  data  |
    arr=配列!作る。
    「|  i  |
        「((data：データ!(i)    読む)+"")!  "[^0-9.-]"    含む?」!なら「arr!(data:フィールド名!(i)  読む)  書く」実行。
    」!(data:フィールド名!要素数?)    繰り返す。
    arr。
」。

グラフ：横軸タイトル描画＝「|option  ;画面パーツ  付箋    文字数|
    文字数＝自分:_横軸タイトル文！長さ?。
    ラベル！(自分:_横軸タイトル文)  作る  (自分:_軸タイトルサイズ)  文字サイズ  (自分:_左端+(自分:_右端-自分:_左端)/2-文字数*5)  (自分:_底-10)  位置。
    自分:_底=(自分:_底)-(3*自分:_軸タイトルサイズ)。
    自分。
」。

グラフ：横軸タイトル＝「|title|
    「title!=undef」!なら「
        自分：_横軸タイトル文=title。
    」実行。
    自分。
」。

グラフ：縦軸タイトル描画＝「  |;画面パーツ  付箋    文字数|
    文字数＝自分:_縦軸タイトル文！長さ?。
    自分！(自分:_縦軸タイトル文)  (自分:_左端-10)  (自分:_底+(自分:_天井-自分:_底)/2+文字数*5)  "title"  縦表示。
    自分:_左端=自分:_左端-25。
    自分。
」。

グラフ：縦軸タイトル＝「|title|
    「title!=undef」!なら「
        自分：_縦軸タイトル文=title。
    」実行。
    自分。
」。

グラフ：移動する＝「|  x    y|
    グラフ:_原点x=グラフ:_原点x+x。
    グラフ:_原点y=グラフ:_原点y+y。
    自分：_左端=自分：_左端+x。
    自分：_右端=自分：_右端+x。
    自分：_天井=自分：_天井+y。
    自分：_底=自分：_底+y。
    自分。
」。

グラフ：位置＝「|  x    y;移動距離x  移動距離y|
    移動距離x=x-グラフ:_原点x。
    移動距離y=y-グラフ:_原点y。
    グラフ:_原点x=x。
    グラフ:_原点y=y。
    自分：_左端=自分：_左端+移動距離x。
    自分：_右端=自分：_右端+移動距離x。
    自分：_天井=自分：_天井+移動距離y。
    自分：_底=自分：_底+移動距離y。
    自分。
」。

グラフ：ｘ軸データ_multi＝「｜data_arr  option    ;num  cnt  _max  付箋｜
    data_arr:データ!「|data  cnt|
        num=(data+"")!長さ?。
        「cnt==1」!なら「_max=num」実行。
        「_max  <  num」!なら「_max=num」実行。
    」それぞれ実行。
    「option!="ラベルなし"」！なら「
        data_arr:データ!「  |data  cnt|
            data=data+""。
            「(_max)<4」！なら「
                付箋=ラベル！(data)  作る  (自分：_軸ラベルサイズ)  文字サイズ  ((_XORIGIN)+(_XINTERVAL)*(cnt))  ((_YLOWERLIM)-20)    位置。
                付箋：タイプ＝"横軸ラベル"。
                //付箋：個体番号＝個体番号。
                //描画済みグラフ!(付箋)  書く。
            」そうでなければ「
                「(自分：種類)!="ヒストグラム"」!なら「
                    自分！(data)  ((_XORIGIN)+(_XINTERVAL)*(cnt)+_XINTERVAL*0.6)  ((_YLOWERLIM)-20)  etc表示。
                」そうでなければ「
                    自分！(data)  ((_XORIGIN)+(_XINTERVAL)*(cnt)+_XINTERVAL*0.6)  ((_YLOWERLIM)-20)  "横軸ラベル"  縦表示。
                」実行。
            」実行。
        」それぞれ実行。
    」実行。
    自分:_YLOWERLIM=_YLOWERLIM-20。
    自分。
」．

グラフ:データ補正値計算＝「|  data_arr  range;    scale  段数  up_lim|
    data_arr!「  |data  cnt|
        「自分:_範囲指定」！なら「
            「自分:_最大メモリ!=undef」！なら「
                「data    >  自分:_最大メモリ」！なら「
                    data=自分:_最大メモリ。
                」実行。
            」実行。
            「自分:_最小メモリ!=undef」！なら「
                「data    <  自分:_最小メモリ」!なら「
                    data=自分:_最小メモリ。
                」実行。
            」実行。
        」実行。
        ab=abs(data)。
        「cnt  ==  1」！なら「ab__max  =  ab.  _min=data.  _max=data  」実行．
        「ab__max  <  ab  」！なら「ab__max  =  ab  」実行。
        「_min  >  data  」！なら「  _min  =  data  」実行。
        「_max  <  data  」！なら「  _max  =  data  」実行。
    」それぞれ実行。
    「全部!    (自分:_最小メモリ==undef)    (_min  >=  0)  本当」！なら「
        自分:_最小メモリ=0。
    」そうでなければ「
        自分:_最小メモリ=_min。
    」実行。
    「自分:_最大メモリ==undef」!なら「自分:_最大メモリ=_max」実行。
    「ab__max  >  0  」！なら「
        digit=ceil(log(abs(ab__max)))。
        base=ab__max*1.05。
        place=10!(floor(log(base)))  pow。
        up1_digit=floor(base/place)。
        
        scale=「up1_digit  <  2」!なら「place*0.2」
        そうでなければ「
            「up1_digit  <  5」!なら「  place  *  0.5」
            そうでなければ「place」実行。
        」実行。
        段数=floor(base/scale+1)。
        roof=段数*scale.
    」実行。
    「自分:_最小メモリ < 0」!なら「
        自分:_縦幅=自分:_縦幅/1.5。
        自分:_DACOL=range/roof。
        自分:_段数＝段数*2。
        自分:__min  =  _min。
        自分:__max  =  _max。
        自分:_digit=digit。
        自分:_scale=scale/2。
        自分:_roof=roof/2。
        グラフ:_原点y=グラフ:_原点y/3。
        _DACOL=_DACOL/1.5。
    」そうでなければ「
        自分:_DACOL=range/roof。
        自分:_段数＝段数。
        自分:__min  =  _min。
        自分:__max  =  _max。
        自分:_digit=digit。
        自分:_scale=scale。
        自分:_roof=roof。
    」実行。
    _DACOL。
」。

グラフ:メモリ線描画＝「｜要素数  ;ペン  col    軸線  i｜
    
    横軸描画＝「|  i  起点メモリ  |
        ラベル!(自分:_scale*i+起点メモリ)  作る    (グラフ:_原点x-調整)  ((グラフ:_原点y+(自分:_縦幅/自分:_段数)*i)+10)    位置      (自分：_軸ラベルサイズ)    文字サイズ    。
        ペン！1  線の太さ    (col)    線の色  ペンなし  (グラフ:_原点x)  (グラフ:_原点y+(自分:_縦幅/自分:_段数)*i)  位置  ペンあり  (自分:_横幅)  歩く。
    」。
    
    縦軸描画=「  |  i    起点メモリ  |
        幅=((floor(自分:_scale*i))+"")!長さ?。
        ラベル!(自分:_scale*i+起点メモリ)  作る    (グラフ:_原点x+(自分:_横幅/自分:_段数*i)-幅*5)  (グラフ:_原点y-10)    位置    (自分：_軸ラベルサイズ)    文字サイズ    。
        ペン!1  線の太さ    (col)  線の色    ペンなし    (グラフ:_原点x+(自分:_横幅/自分:_段数)*i)  (グラフ:_原点y)    位置  ペンあり    (自分:_縦幅)    歩く。
    」。
    
    col=色!0xBDBDBD  作る。
    調整=(自分:_digit)*10。
    i=0。
    起点メモリ=0。
    
    「自分:_方向=="縦"」!なら「
        ペン＝タートル！    作る。
        自分:_左端=グラフ:_原点x-調整-30。
        //横軸描画!(i)  (起点メモリ)    実行。
        「自分:__max  >  ０」!なら「
            起点メモリ＝「自分:_最小メモリ  >  0」!なら「自分:_最小メモリ」そうでなければ「0」実行。
            i=0。
            「  (自分:_最大メモリ)  >=  (自分:_scale*i+起点メモリ)」!の間「
                横軸描画!(i)  (起点メモリ)実行。
                i=i+1。
            」実行。
            横軸描画!(i)  (起点メモリ)実行。
            自分:_天井=グラフ:_原点y+(自分:_縦幅/自分:_段数)*i。
        」実行。
        
        「自分:_最小メモリ  <  ０」!なら「
            起点メモリ＝「自分:_最大メモリ  <  0」!なら「自分:_最大メモリ」そうでなければ「0」実行。
            i=0。
            「(自分:_最小メモリ)  <=  (自分:_scale*i)」!の間「
                横軸描画!(i)  (起点メモリ)  実行。
                i=i-1。
            」実行。
            横軸描画!(i)  (起点メモリ)実行。
            自分:_底=グラフ:_原点y+(自分:_縦幅/自分:_段数)*i-10。
        」実行。
        
    」そうでなければ「自分:_方向=="横"」なら「
        ペン＝タートル！    作る    90  左回り。
        自分:_底=グラフ:_原点y-40。
        縦軸描画!(i)  (起点メモリ)    実行。
        
        「自分:__max  >  ０」!なら「
            起点メモリ＝「自分:_最小メモリ  >  0」!なら「自分:_最小メモリ」そうでなければ「0」実行。
            i=1。
            「  (自分:_最大メモリ)  >=  (自分:_scale*i)」!の間「
                縦軸描画!(i)  (起点メモリ)  実行。
                i=i+1。
            」実行。
            縦軸描画!(i)  (起点メモリ)  実行。
            自分:_右端=グラフ:_原点x+(自分:_横幅/自分:_段数)*i+20。
        」実行。
        
        「自分:_最小メモリ  <  ０」!なら「
            起点メモリ＝「自分:_最大メモリ  <  0」!なら「自分:_最大メモリ」そうでなければ「0」実行。
            i=-1。
            「(自分:_最小メモリ)  <=  (自分:_scale*i)」!の間「
                縦軸描画!(i)  (起点メモリ)  実行。
                i=i-1。
            」実行。
            縦軸描画!(i)  (起点メモリ)  実行。
            自分:_左端=グラフ:_原点x+(自分:_横幅/自分:_段数)*i-40。
        」実行。
        
    」そうでなければ「自分:_方向=="帯"」なら「
        ペン＝タートル！    作る  1  線の太さ    (col)  線の色  90  左回り。
        ペン!ペンなし    (グラフ:_原点x)  (グラフ:_原点y)  位置。
        自分:_底=グラフ:_原点y-40。
        自分:_天井=グラフ:_原点y+自分:_縦幅。
        メモリ=0。
        自分：_帯メモリ間隔＝(自分：_横幅)/5．
        「|  i  |
            幅=(メモリ+"")!長さ？。
            ラベル!(メモリ)    作る        (自分：_軸ラベルサイズ)    文字サイズ  (グラフ:_原点x+(自分：_帯メモリ間隔)*(i-1
            )-幅*5)  (グラフ:_原点y-10)  位置。
            ペン!ペンあり    (自分:_縦幅)    歩く    。
            ペン!ペンなし    (グラフ:_原点x+(自分：_帯メモリ間隔)*i)  (グラフ:_原点y)  位置。
            メモリ＝メモリ+20。
        」!  6  繰り返す。
        自分:_右端=グラフ:_原点x+((自分：_横幅))+20。
        
    」そうでなければ「自分:_方向=="散布図"」なら「
        調整=自分:_桁y*10。
        「調整==0」!なら「調整=20」実行。
        ペン＝タートル！    作る  1  線の太さ    (col)  線の色。
        ペン!ペンなし    (グラフ:_原点x)  (グラフ:_原点y)  位置。
        自分：_左端=自分：_左端-20。
        自分：_底=自分：_底-20。
        「|  i  |
            //グリッド線なしがfalse    or  trueで1のとき  or  trueで段数+1のとき
            「どれか!(どれか！(全部!(i==1)  (自分:_グリッド線なし==true)  本当)  (全部!(i==(自分:_段数y+1))  (自分:_グリッド線なし==true)本当  )本当)  (自分:_グリッド線なし==false)    本当」！なら「
                ペン！ペンあり  (自分:_横幅)    歩く。
            」実行。
            ペン!ペンなし  (グラフ:_原点x)  (グラフ:_原点y+自分:_横幅/自分:_段数y*i)    位置。
            ラベル!(自分:_scaley*(i-1))  作る  (自分：_軸ラベルサイズ)    文字サイズ      (グラフ:_原点x-調整-10)  ((グラフ:_原点y+(自分:_縦幅/自分:_段数y)*(i-1))+10)    位置。
        」!  (自分:_段数y+1)    繰り返す。
        
        ペン!ペンなし    (グラフ:_原点x)  (グラフ:_原点y)  位置    90    左回り。
        「|  i  |
            幅=((自分:_scalex*i)+"")!長さ?。
            「自分:_桁x==0」!なら「幅=3」実行。
            「どれか!(どれか！(全部!(i==1)  (自分:_グリッド線なし==true)  本当)  (全部!(i==(自分:_段数x+1))  (自分:_グリッド線なし==true)本当  )本当)  (自分:_グリッド線なし==false)    本当」！なら「
                ペン！ペンあり  (自分:_縦幅)    歩く。
            」実行。
            ペン!ペンなし  (グラフ:_原点x+自分:_縦幅/自分:_段数x*i)  (グラフ:_原点y)    位置。
            ラベル!(自分:_scalex*(i-1))  作る  (自分：_軸ラベルサイズ)    文字サイズ  (グラフ:_原点x+(自分:_横幅/自分:_段数x*(i-1))-幅*5)  (グラフ:_原点y-10)  位置。
        」!  (自分:_段数x+1)    繰り返す。
    」実行。
    
    //自分:_起点メモリ=起点メモリ。
    ペン！図形を作る。
    ペン！消える。
    自分。
」。

グラフ:縦幅設定＝「｜data_arr    ;tmp_arr    ｜
    「自分：_方向=="縦"」！なら「
        自分！(data_arr:データ)  (自分:_縦幅)  データ補正値計算。
    」そうでなければ「自分：_方向=="横"」なら「
        自分！(data_arr:データ)  (自分:_横幅)  データ補正値計算。
    」実行。
」。

グラフ:横幅設定＝「|  要素数  |
    「自分：_方向=="縦"」！なら「
        //自分:_横幅=300。
        自分:_右端  =  グラフ:_原点x+自分:_横幅+30。
        自分:_プロット幅  =  (自分:_横幅)*2/5/(要素数)。
        自分:_間隔  =  (自分:_横幅)*3/5/(要素数+1)。
    」そうでなければ「自分:_方向=="横"」なら「
        自分:_横幅  =  250。
        自分:_右端  =  グラフ:_原点x+自分:_横幅+30。
        自分:_プロット幅  =  (自分:_縦幅)*2/5/(要素数)。
        自分:_間隔  =  (自分:_縦幅)*3/5/(要素数+1)。
    」そうでなければ「自分:_方向=="帯"」なら「
        //自分:_横幅  =  500。
        自分:_右端  =  グラフ:_原点x+自分:_横幅+30。
        自分:_プロット幅  =  (自分:_縦幅)*2/5/(要素数)。
        自分:_間隔  =  (自分:_縦幅)*3/5/(要素数+1)。
        自分:_digit=0。
    」実行。
」。

グラフ:横向き=「|    ;tmp|
    自分:_方向＝"横"。
    グラフ:_原点x=グラフ:_原点x+250。
    自分:_天井=自分:_縦幅+30。
    自分。
」。

グラフ:メモリ範囲=「|最小    最大|
    自分:_範囲指定=true。
    「最小!=undef」!なら「
        自分:_最小メモリ＝最小。
    」実行。
    「最大!=undef」！なら「
        自分:_最大メモリ＝最大。
    」実行。
    自分。
」。

グラフ:補正フィールド決定=「|  f_arr  ;tmp  _max  |
    f_arr!「|  n  i|
        tmp=_DATA！(n)    最大値    値読み出し。
        「i==1」!なら「
            _max=tmp。
            F=n。
        」そうでなければ「
            「_max  <  tmp」!なら「
                _max=tmp。
                F=ｎ。
            」実行。
        」実行。
    」それぞれ実行。
    F。
」。

グラフ:線形近似=「
    自分:_近似=true。
    自分。
」。

グラフ:マーカなし=「
    自分:_マーカフラグ=false。
    自分。
」。

//近似曲線：最小二乗法
グラフ：最小二乗法＝「
    「自分:_方向=="散布図"」！なら「
        
        標準偏差＝自分:_DATA!(自分:f1)  標準偏差  値読み出し。
        共分散＝自分:_DATA！(自分:f1)  (自分:f2)  共分散  値読み出し。
        x平均＝自分:_DATA！(自分:f1)  平均値  値読み出し。
        y平均＝自分:_DATA！(自分:f2)  平均値  値読み出し。
        傾き＝共分散/(標準偏差!  2  pow)。
        切片＝y平均-（傾き*x平均）。
        x2=自分:_横幅/自分:_DACOLX。
        y2=x2*傾き+切片。
        ペン＝タートル！作る    ぺんなし    1  線の太さ。
        始点ｘ＝グラフ:_原点x。
        始点y=グラフ:_原点y+切片*自分:_DACOLY。
        終点x=グラフ:_原点x+x2*自分:_DACOLX。
        終点y=グラフ:_原点y+y2*自分:_DACOLY。
        「始点y  <  グラフ:_原点y」！なら「始点x=(切片/(-1*傾き))*自分:_DACOLX+グラフ:_原点x。始点y=グラフ:_原点y」実行。
        「終点y  >  自分：_縦幅」！なら「終点x=((_scaley*_段数y)-切片)/傾き*自分:_DACOLX+グラフ:_原点x。終点_y=(_scaley*_段数y)*自分:_DACOLX＋グラフ:_原点y」実行。
        
        ペン！(始点x)  (始点y)  位置    ぺんあり  (終点x)  (終点y)    位置    (青)  図形を作る。
        傾き＝round(共分散/(標準偏差!  2  pow)*10000)/10000。
        切片＝round((y平均-（傾き*x平均)）*10000)/10000。
        ラベル！("y="+(傾き)+"x+"+(切片))  作る  (自分：_軸ラベルサイズ-4)  文字サイズ    (グラフ:_原点x+x2*自分:_DACOLX+10)  (グラフ:_原点y+y2*自分:_DACOLY+5)  位置。
        ペン！消える。
        式の長さ=("y="+(傾き)+"x+"+(切片))!長さ？。
        自分:_右端=グラフ:_原点x+(自分:_横幅)+40+(式の長さ*10)。
        テーブル：x=自分:_右端。
        ラベル!"    "  作る    (自分:_右端)  0    位置。
    」実行。
    自分。
」。

グラフ：グリッド線なし＝「|    |
    自分:_グリッド線なし=true。
    自分。
」。

グラフ：縦軸間隔＝「｜val｜
    グラフ：_YSCALE  =  val.
    自分。
」．

グラフ:画像にする=「
    「自分:_底 < (-1*テーブル：_画面高さ/2)」！なら「自分:_底=-1*テーブル：_画面高さ/2」実行。
    「自分:_天井 > (テーブル：_画面高さ/2)」！なら「自分:_天井=テーブル：_画面高さ/2」実行。
    「自分:_右端 > (テーブル：_画面幅/2)」！なら「自分:_右端=テーブル：_画面幅/2」実行。
    「自分:_左端 < (-1*テーブル：_画面幅/2)」！なら「自分:_左端=-1*テーブル：_画面幅/2」実行。
    //JAVA
    システム!(自分:_左端)  (自分:_天井)  (自分:_右端-自分:_左端)    (abs(自分:_天井-自分:_底))  capture。
    //!(自分:_左端)  (自分:_天井)  (自分:_右端-自分:_左端)    (abs(自分:_天井-自分:_底))  capture。
    自分。
」。

グラフ:縦表示＝「|  文字列  x  y  option  long  ;文字数    _SIZE  調整|
    文字列=文字列+""。
    文字数＝(文字列)！長さ?。
    調整=12．
    _SIZE=0。
    //jsなら18JAVA22
    「option=="title"」!なら「_SIZE＝自分：_軸タイトルサイズ。調整=18．」そうでなければ「_SIZE=自分：_軸ラベルサイズ-4」実行。
    「|i|
        tmp=配列！(文字列！(i)  1  部分)  作る。
        tmp!「|n  j|
            付箋＝ラベル！(n)  作る  (x)  (y-調整*i)  位置  (_SIZE)  文字サイズ。
            付箋：タイプ="縦軸タイトル"。
            //付箋：個体番号＝個体番号。
            //自分:縦の位置=(y-(調整-100)*i)。
        」それぞれ実行。
    」！(文字数)    繰り返す。
    「long!=undef」!なら「自分:_底=y-long」実行。
」。

グラフ:着色=「|  i  |
    「i%8  ==  1」！なら「col  =  色！  0x5858FA  作る」そうでなければ
    「i%8  ==  2」なら「col  =  色！  0xA9A9F5  作る」そうでなければ
    「i%8  ==  3」なら「col  =  色！  0xA9F5F2  作る」そうでなければ
    「i%8  ==  4」なら「col  =  色！  0xA9F5A9  作る」そうでなければ
    「i%8  ==  5」なら「col  =  色！  0xF2F5A9  作る」そうでなければ
    「i%8  ==  6」なら「col  =  色！  0xF5D0A9  作る」そうでなければ
    「i%8  ==  7」なら「col  =  色！  0xF5A9A9  作る」そうでなければ
    「i%8  ==  0」なら「col  =  色！  0xFA5858  作る」実行．
    col。
」。

グラフ：初期化＝「
    自分：_底＝グラフ:_原点y。
」。

テーブル：棒グラフ=「|  |
    _棒グラフ=グラフ！作る。
    _棒グラフ：種類="棒グラフ"。
    _棒グラフ:描画済みグラフ=配列!作る。
    _棒グラフ:_DATA=自分。
    _棒グラフ:f1  =  自分:フィールド名！1  読む。
    _棒グラフ:f2  =  自分!(_rest)  getarg。
    _棒グラフ:描画=「
        自分！初期化。
        自分！位置確定。
        型配列=自分!（_DATA）型判定。
        data_x  =  _DATA！（f1）射影。
        「f2==undef」!なら「
            f2=配列！作る。
            _DATA:フィールド名!「|  n  |
                f2!(n)  書く。
            」それぞれ実行。
            f2!1  位置で消す。
        」実行。
        
        最大長=0。
        data_x:データ!「|  n  i  |
            「((n+"")!長さ？)  >  最大長」！なら「最大長=(n+"")!長さ？」実行。
        」それぞれ実行。
        
        data_y=_DATA！（f2）射影。
        要素数=data_x:データ!要素数?。
        ラベル数=ceil(要素数/35)。
        自分!  (要素数)横幅設定。
        自分!  (data_y)  縦幅設定。
        自分!  (要素数)  メモリ線描画。
        
        「(型配列!要素数?)>  0」!なら「
            型配列!「|n  i|
                「(自分!(f2)  (n)  _含む？)==true」！なら「
                    「n!=(_DATA:フィールド名!1    読む)」!なら「
                        自分!(_DATA!(n)  射影)    x軸データ_multi。
                    」実行。
                    f2=f2!(n)  消す。
                」実行。
            」それぞれ実行。
        」実行。
        
        ペン＝タートル!作る  1  線の太さ    。
        系列数=f2!要素数?。
        もとのプロット幅  =  自分:_プロット幅。
        自分:_プロット幅  =  自分:_プロット幅/系列数。
        
        「自分：_方向=="縦"」!なら「
            
            ペン！    ぺんなし    (グラフ:_原点x+自分:_間隔)  (グラフ:_原点y)  位置        ９０    左回り    ぺんあり。
            ラベルx=グラフ:_原点x+自分:_間隔+自分:もとのプロット幅/2-(自分:_軸ラベルサイズ/2)。
            ラベルy=グラフ:_原点y。
            
            
            「|  j  |
                data_y=自分:_DATA!(f2!(j)  読む)  射影。
                ラベルサイズ=「自分:_プロット幅  >  10」  !なら「10」そうでなければ「自分:_プロット幅」実行。
                data_y:データ!「|n  i|
                    「n==""」!なら「n=0」実行。
                    「自分:_範囲指定」！なら「
                        「n  >=  自分:_最大メモリ」！なら「
                            n=自分:_最大メモリ。
                        」そうでなければ「n  <=  自分:_最小メモリ」なら「
                            n=自分:_最小メモリ。
                        」実行。
                    」実行。
                    「n  >=  自分:_最小メモリ」!なら「
                        n=(n-自分:_起点メモリ)*(自分:_DACOL)。
                        ペン！ペンあり    (n)  歩く    90  右回り    (自分:_プロット幅)  歩く    90  右回り    (n)  歩く    180  右回り  (自分!(j)    着色)    図形にする。
                    」そうでなければ「
                        ペン！  (自分:_プロット幅)  0  移動する。
                    」実行。
                    ペン!ペンなし    (自分:_間隔+(系列数-1)*自分:_プロット幅)  0  移動する。
                    「j==1」！なら「
                        「((i-1)%ラベル数)==0」！なら「
                            横軸ラベル=data_x!(i)  読む。
                            横軸ラベル長=(横軸ラベル+"")!長さ?。
                            「(最大長*5)  >  自分:_プロット幅」！なら「
                                自分!  (横軸ラベル)  (ラベルx)  (ラベルy)  ""  (最大長)  縦表示。
                            」そうでなければ「
                                ラベル!  (横軸ラベル)  作る    (自分：_軸ラベルサイズ)    文字サイズ    (ラベルx-横軸ラベル長*5/2)  (ラベルy)  位置。
                            」実行。
                            ラベルx=ラベルx+自分:_間隔＊ラベル数+もとのプロット幅*ラベル数。
                        」実行。
                    」実行。
                」それぞれ実行。
                「自分:_底  >=  ラベルy」!なら「自分:_底=ラベルy-30」実行。
                ペン！    ぺんなし    (グラフ:_原点x+自分:_間隔+自分:_プロット幅*j)  (グラフ:_原点y)  位置。
            」!  (系列数)  繰り返す。
            自分:_底=自分:_底-13*最大長。
            
            
        」そうでなければ「自分：_方向=="横"」なら「
            
            ペン！    ぺんなし    (グラフ:_原点x)  (グラフ:_原点y+自分:_間隔)  位置        ぺんあり。
            ラベルx=グラフ:_原点x-10。
            //6はラベルの幅の半分
            ラベルy=グラフ:_原点y+(自分:_間隔+もとのプロット幅)-もとのプロット幅/2+6。
            
            「|  j  |
                data_y=自分:_DATA!(f2!(j)  読む)  射影。
                
                data_y:データ!「|n  i|
                    「n==""」!なら「n=0」実行。
                    val=data_x!(i)  読む。
                    メモリ調整＝((val+"")!長さ?)*10。
                    「自分:_範囲指定」！なら「
                        「n  >=  自分:_最大メモリ」！なら「
                            n=自分:_最大メモリ。
                        」そうでなければ「n  <=  自分:_最小メモリ」なら「
                            n=自分:_最小メモリ。
                        」実行。
                    」実行。
                    「n  >=  自分:_最小メモリ」!なら「
                        n=(n-自分:_起点メモリ)*(自分:_DACOL)。
                        ペン！ペンあり    (n)  歩く    90  左回り    (自分:_プロット幅)  歩く    90  左回り    (n)  歩く    180  左回り  (自分!(j)    着色)    図形にする。
                    」そうでなければ「
                        ペン！  0  (自分:_プロット幅)  移動する。
                    」実行。
                    ペン!ペンなし    0  (自分:_間隔+(系列数-1)*自分:_プロット幅)  移動する。
                    
                    「j==1」！なら「
                        「((i-1)%ラベル数)==0」！なら「
                            ラベル!  (val)  作る    (自分：_軸ラベルサイズ-2)    文字サイズ    (ラベルx-メモリ調整)  (ラベルy)  位置。
                            ラベルy=ラベルy+(自分:_間隔+もとのプロット幅)*ラベル数。
                            「自分:_左端  >=  (ラベルx-メモリ調整-30)」!なら「
                                自分:_左端=ラベルx-メモリ調整    -30。
                            」実行。
                        」実行。
                    」実行。
                」それぞれ実行。
                ペン！    ぺんなし    (グラフ:_原点x)  (グラフ:_原点y+自分:_間隔+自分:_プロット幅*j)    位置。
            」!  (系列数)  繰り返す。
            
        」実行。
        
        「系列数  >  1」！なら「
            「自分:_方向=="横"」！なら「
                ペン!ペンなし  (グラフ:_原点x)  (自分:_底-5)  位置。
            」そうでなければ「
                ペン!ペンなし  (グラフ:_原点x)  (自分:_底-10)  位置。
            」実行。
            系列ラベルx  =    グラフ:_原点x+10。
            系列ラベルy  =  自分:_底+7。
            「|i|
                系列名=f2!(i)    読む。
                系列名長=(系列名+"")!長さ？。
                ペン！ペンあり  6  4  角形    (自分!(i)    着色)    図形を作る。
                a=ラベル!    (系列名)    作る    （系列ラベルx）  (系列ラベルy)    位置  (自分：_軸ラベルサイズ-2)  文字サイズ。
                ペン!ペンなし    (系列名長*12+16)    0  移動する。
                系列ラベルx  =  系列ラベルx+(系列名長*12+16)。
            」!(系列数)    繰り返す。
            「自分:_右端 < 系列ラベルx」！なら「自分:_右端=系列ラベルx」実行。
            自分:_底＝自分:_底-20。
        」実行。
        
        ペン！消える。
        「自分:_横軸タイトル文==undef」！なら「
            自分！(f1)  横軸タイトル。
        」実行。
        「自分:_縦軸タイトル文==undef」！なら「
            自分！("")  縦軸タイトル。
        」実行。
        自分！縦軸タイトル描画。
        自分！横軸タイトル描画。
        グラフ:_原点x=自分:_右端+60．
        //テーブル:x=自分:_右端。
        自分:_最小メモリ=undef。
        自分。
    」。
    //グラフ：個体番号＝グラフ：個体番号+1。
    「_棒グラフ:f2==undef」!なら「
        _棒グラフ。
    」そうでなければ「
        「自分!(_棒グラフ:f2)  check_fn」!なら「
            「_棒グラフ:_DATA!(_棒グラフ:f2!1  読む)    射影  check_dt」!なら「
                _棒グラフ。
            」そうでなければ「
                undef。
            」実行。
        」そうでなければ「
            undef。
        」実行。
    」実行。
」。


テーブル：ヒストグラム=「  |f2 _max _min  階級幅  ;tmp  |
    _ヒストグラム=グラフ！作る。
    _ヒストグラム：種類="ヒストグラム"。
    _ヒストグラム:f1  =  自分:フィールド名！1  読む。
    _ヒストグラム:f2  =  f2。
    _ヒストグラム:_DATA=自分。
    「(_ヒストグラム:f1)!="階級"」!なら「
        _ヒストグラム:_DATA=自分！(_ヒストグラム:f2) (_max) (_min) (階級幅)  度数分布。
        _ヒストグラム:f1="階級"。
        _ヒストグラム:f2="度数"。
    」そうでなければ「_ヒストグラム:f2==undef」なら「
        _ヒストグラム:f2="度数"。
    」実行。
    _ヒストグラム:描画=「
        自分！位置確定。
        自分！初期化。
        data_x  =  _DATA！（自分:f1）射影。
        data_y  =  _DATA！（自分:f2）射影。
        
        要素数=data_y:データ!要素数?。
        自分!  (要素数)  横幅設定。
        自分!  (data_y)  縦幅設定。
        自分!  (要素数)  メモリ線描画。
        ペン＝タートル!作る    1    線の太さ。
        
        「自分：_方向=="縦"」!なら「
            
            ペン！    ぺんなし    (グラフ:_原点x+自分:_間隔)  (グラフ:_原点y)  位置        ９０    左回り    ぺんあり。
            ラベルx=グラフ:_原点x+(自分:_間隔)。
            ラベルy=グラフ:_原点y-20。
            
            ラベルサイズ=「自分:_プロット幅  >  10」  !なら「10」そうでなければ「自分:_プロット幅」実行。
            data_y:データ!「|n  i|
                「n  >=  自分:_最大メモリ」！なら「
                    n=自分:_最大メモリ。
                」そうでなければ「n  <=  自分:_最小メモリ」なら「
                    n=自分:_最小メモリ。
                」実行。
                「n  >=  自分:_最小メモリ」!なら「
                    n=(n-自分：_起点メモリ)*(自分:_DACOL)。
                    ペン！ペンあり    (n)  歩く    90  右回り    (自分:_プロット幅+((自分:_間隔*要素数-自分:_間隔)/要素数))  歩く    90  右回り    (n)  歩く    180  右回り  (色！  0xE0E0F8  作る)    図形にする。
                    ペン!ぺんなし    (-1*(自分:_プロット幅+((自分:_間隔*要素数-自分:_間隔)/要素数)))  0  移動する。
                    ペン！(色！  0x555555  作る)    線の色    ペンあり    (n)  歩く    90  右回り    (自分:_プロット幅+((自分:_間隔*要素数-自分:_間隔)/要素数))  歩く    90  右回り    (n)  歩く    180  右回り    図形を作る。
                」そうでなければ「
                    ペン！  (自分:_プロット幅+((自分:_間隔*要素数-自分:_間隔)/要素数))  0  移動する。
                」実行。
                「i==1」！なら「
                    ラベルペン=タートル!    作る  1    線の太さ    ペンなし(ラベルx)  (ラベルy)  位置        ペンあり  (自分:_横幅-自分：_間隔*2)    歩く    90  右回り。
                」実行。
                ニョロ位置=((data_x!(i)  読む)+"")!  "~"  何文字目?。
                横軸ラベル=((data_x!(i)  読む)+"")!  1  (ニョロ位置-1)    部分。
                ラベルペン!ペンなし  (ラベルx)  (ラベルy)  位置  ペンあり  10  歩く。
                横軸ラベル長=(横軸ラベル+"")!長さ?。
                調整=0。
                「横軸ラベル長  <  3」!なら「
                    調整=(3-横軸ラベル長)*5。
                」そうでなければ「横軸ラベル長  >  3」なら「
                    調整=-1*(横軸ラベル長-3)*2。
                」実行。
                ラベル!  (横軸ラベル)  作る    (自分：_軸ラベルサイズ)    文字サイズ    (ラベルx+調整-10)  (ラベルy-10)  位置。
                ラベルx=ラベルx+自分:_プロット幅+((自分:_間隔*要素数-自分:_間隔)/要素数)。
            」それぞれ実行。
            横軸ラベル=(data_x!(要素数)  読む)!  (ニョロ位置+1)  (((data_x!(要素数)  読む)+"")!    長さ？)    部分。
            ラベルペン!ペンなし  (ラベルx)  (ラベルy)  位置  ペンあり  10  歩く。
            ラベル!  (横軸ラベル)  作る    (自分：_軸ラベルサイズ)    文字サイズ    (ラベルx+調整-10)  (ラベルy-10)  位置。
            「自分:_底  >=  ラベルy」!なら「自分:_底=ラベルy-30」実行。
            
        」そうでなければ「自分：_方向=="横"」なら「
            
            ペン！    ぺんなし    (グラフ:_原点x)  (グラフ:_原点y+自分:_間隔)  位置        ぺんあり。
            ラベルx=グラフ:_原点x-15。
            ラベルy=グラフ:_原点y+(自分:_間隔)。
            
            ラベルサイズ=「自分:_プロット幅  >  10」  !なら「8」そうでなければ「自分:_プロット幅」実行。
            data_y:データ!「|n  i|
                
                val=data_x!(i)  読む。
                メモリ調整＝((val+"")!長さ?)*12。
                「n  >=  自分:_最大メモリ」！なら「
                    n=自分:_最大メモリ。
                」そうでなければ「n  <=  自分:_最小メモリ」なら「
                    n=自分:_最小メモリ。
                」実行。
                
                「n  >=  自分:_最小メモリ」!なら「
                    n=(n-自分:_起点メモリ)*(自分:_DACOL)。
                    ペン！ペンあり    (n)  歩く    90  左回り    (自分:_プロット幅+((自分:_間隔*要素数-自分:_間隔)/要素数))  歩く    90  左回り    (n)  歩く    180  左回り  (色！  0xE0E0F8  作る)    図形にする。
                    ペン!ぺんなし    0  (-1*(自分:_プロット幅+((自分:_間隔*要素数-自分:_間隔)/要素数)))  移動する。
                    ペン！(色！  0x555555  作る)    線の色    ペンあり    (n)  歩く    90  左回り    (自分:_プロット幅+((自分:_間隔*要素数-自分:_間隔)/要素数))  歩く    90  左回り    (n)  歩く    180  左回り    図形を作る。
                」そうでなければ「
                    ペン！  0  (自分:_プロット幅+((自分:_間隔*要素数-自分:_間隔)/要素数))  移動する。
                」実行。
                
                「i==1」！なら「
                    ラベルペン=タートル!    作る  90    左回り  1    線の太さ    ペンなし(ラベルx)  (ラベルy)  位置        ペンあり  (自分:_縦幅-自分：_間隔*2)    歩く    90  左回り。
                」実行。
                ニョロ位置=((data_x!(i)  読む)+"")!  "~"  何文字目?。
                横軸ラベル=((data_x!(i)  読む)+"")!  1  (ニョロ位置-1)    部分。
                ラベルペン!ペンなし  (ラベルx)  (ラベルy)  位置  ペンあり  10  歩く。
                横軸ラベル長=(横軸ラベル+"")!長さ?。
                ラベル!  (横軸ラベル)  作る    (自分：_軸ラベルサイズ)    文字サイズ    (ラベルx-(横軸ラベル長*7)-10)  (ラベルy+10)  位置。
                ラベルy=ラベルy+自分:_プロット幅+((自分:_間隔*要素数-自分:_間隔)/要素数)。
                「自分:_左端  >=  (ラベルx-メモリ調整-30)」!なら「
                    自分:_左端=ラベルx-メモリ調整    -30。
                」実行。
            」それぞれ実行。
            横軸ラベル=(data_x!(要素数)  読む)!  (ニョロ位置+1)  (((data_x!(要素数)  読む)+"")!    長さ？)    部分。
            ラベルペン!ペンなし  (ラベルx)  (ラベルy)  位置  ペンあり  10  歩く。
            ラベル!  (横軸ラベル)  作る    (自分：_軸ラベルサイズ)    文字サイズ    (ラベルx-(横軸ラベル長*7)-10)  (ラベルy+10)  位置。
        」実行。
        
        「系列数  >  1」！なら「
            「自分:_方向=="横"」！なら「
                ペン!ペンなし  (グラフ:_原点x)  (自分:_底-5)  位置。
            」そうでなければ「
                ペン!ペンなし  (グラフ:_原点x)  (自分:_底-10)  位置。
            」実行。
            系列ラベルx  =    グラフ:_原点x+10。
            系列ラベルy  =  自分:_底。
            「|i|
                系列名=f2!(i)    読む。
                系列名長=(系列名+"")!長さ？。
                ペン！ペンあり  6  4  角形    (自分!(i)    着色)    図形を作る。
                a=ラベル!    (系列名)    作る    （系列ラベルx）  (系列ラベルy)    位置  (自分：_軸ラベルサイズ-2)  文字サイズ。
                ペン!ペンなし    (系列名長*１0+16)    0  移動する。
                系列ラベルx  =  系列ラベルx+(系列名長*１0+16)。
            」!(系列数)    繰り返す。
            自分:_底＝自分:_底-20。
        」実行。
        ペン！消える。
        ラベルペン！消える。
        
        「_横軸タイトル文==undef」！なら「
            自分！("階級")  横軸タイトル。
        」実行。
        「_縦軸タイトル文==undef」！なら「
            自分！("度数")  縦軸タイトル。
        」実行。
        自分！縦軸タイトル描画。
        自分！横軸タイトル描画。
        グラフ:_原点x=自分:_右端+60．
        //テーブル:x=自分:_右端。
        自分:_最小メモリ=undef。
        自分。
    」。
    
    「どれか!(_ヒストグラム:f2==undef)  (_ヒストグラム:_DATA==undef)  本当」！なら「
        undef。
    」そうでなければ「
        「_ヒストグラム:_DATA！(_ヒストグラム:f2)    check_fn」!なら「
            「_ヒストグラム:_DATA！(_ヒストグラム:f2)  射影  check_dt」！なら「
                //グラフ：個体番号＝グラフ：個体番号+1。
                _ヒストグラム。
            」そうでなければ「
                undef。
            」実行。
        」そうでなければ「
            undef。
        」実行。
    」実行。
」。

テーブル：積み上げ棒グラフ=「|  |
    _積み上げ棒グラフ＝グラフ！作る。
    _積み上げ棒グラフ：種類="積み上げ棒グラフ"。
    _積み上げ棒グラフ:_DATA=自分。
    _積み上げ棒グラフ:f1  =  自分:フィールド名！1  読む。
    _積み上げ棒グラフ:f2  =  自分!(_rest)  getarg。
    _積み上げ棒グラフ:描画=「|  |
        自分！位置確定。
        自分！初期化。
        「f2==undef」！なら「
            //tmp  =  自分:_DATA:フィールド名  !作る。
            tmp  =  自分:_DATA:フィールド名  !  concat。
            f2=(tmp)!  1  位置で消す。
        」実行。
        
        tmp_data  =  自分:_DATA!  (f2)  射影。
        data_x=自分:_DATA!  (f1)  射影。
        フィールド数=f2!要素数?。
        系列数=data_x:データ!要素数?。
        正合計配列=配列!作る。
        負合計配列=配列!作る。
        データ補正用配列=配列!  作る。
        データ補正用配列:データ=配列!  作る。
        「
            正合計配列! 0 書く。
            負合計配列! 0 書く。
        」！(フィールド数)  繰り返す。
        
        「|  i  |
            「|  j  |
                「(tmp_data!((i-1)*フィールド数+j)  読む)  >  0」！なら「
                    正合計配列!  (j)  ((正合計配列!(j)  読む)+(tmp_data!((i-1)*フィールド数+j)  読む))    上書き。
                」そうでなければ「
                    負合計配列!  (j)  ((負合計配列!(j)  読む)+(tmp_data!((i-1)*フィールド数+j)  読む))    上書き。
                」実行。
            」!(フィールド数)    繰り返す。
        」!(系列数)    繰り返す。
        データ補正用配列:データ=正合計配列！(負合計配列)  連結。
        描画用データ=自分:_DATA!  (f2!  1  (f1)  挿入)  射影  行列入れ替え。
        f2!1 位置で消す。
        正高さ配列=配列！作る。
        負高さ配列=配列！作る。
        自分!  (フィールド数)横幅設定。
        自分!  (データ補正用配列)  縦幅設定。
        自分!  (フィールド数)  メモリ線描画。
        ペン＝タートル!作る  1  線の太さ。
        ペン！ぺんなし    (グラフ:_原点x+自分:_間隔)  (グラフ:_原点y)  位置 ９０ 左回り。
        ラベルx=グラフ:_原点x+自分:_間隔+自分:_プロット幅/2。
        ラベルy=グラフ:_原点y-10。
        
        「|  j  |
            data_y=描画用データ!  ((data_x:データ!(j)  読む)+"")  射影。
            ラベルサイズ=「自分:_プロット幅  >  10」!なら「10」そうでなければ「自分:_プロット幅」実行。
            「| i;  n    |
                「j==1」！なら「
                    正高さ配列! 0  書く。
                    負高さ配列!0  書く。
                」実行。
                n=data_y:データ!(i)  読む。
                「n  >=  自分:_最大メモリ」！なら「
                    n=自分:_最大メモリ。
                」そうでなければ「n  <=  自分:_最小メモリ」なら「
                    n=自分:_最小メモリ。
                」実行。
                「n  >=  自分:_最小メモリ」!なら「
                    「n  >  0」!なら「
                        移動値=正高さ配列!(i)  読む。
                    」そうでなければ「
                        移動値=負高さ配列!(i)  読む。
                    」実行。
                    n=(n-自分:_起点メモリ)*(自分:_DACOL)。
                    ペン！ぺんなし 0  (移動値)  移動する。
                    ペン！ペンあり (n)  歩く 90  右回り (自分:_プロット幅)  歩く    90  右回り    (n)  歩く    180  右回り  (自分!(j)    着色)    図形にする。
                」そうでなければ「
                    ペン！  (自分:_プロット幅)  0  移動する。
                」実行。
                ペン!ペンなし (自分:_間隔)  (-1*移動値)  移動する。
                
                「  n  >  0  」!なら「
                    正高さ配列!(i)    ((正高さ配列!(i)読む)+n)  上書き。
                」そうでなければ「
                    負高さ配列!(i)    ((負高さ配列!(i)読む)+n)  上書き。
                」実行。
                
                「j==1」！なら「
                    横軸ラベル=f2!(i)  読む。
                    横軸ラベル長=(横軸ラベル+"")!長さ?。
                    調整=0。
                    「横軸ラベル長  <  3」!なら「
                        調整=(3-横軸ラベル長)*5。
                    」そうでなければ「横軸ラベル長  >  3」なら「
                        調整=-1*(横軸ラベル長-3)*3。
                    」実行。
                    ラベル!  (横軸ラベル)  作る    (自分：_軸ラベルサイズ)    文字サイズ    (ラベルx+調整-横軸ラベル長*3)  (ラベルy)  位置。
                    ラベルx=ラベルx+自分:_間隔+自分:_プロット幅。
                」実行。
                
            」!(フィールド数)    繰り返す。
            
            「自分:_底  >=  ラベルy」!なら「自分:_底=ラベルy-30」実行。
            ペン！ぺんなし (グラフ:_原点x+自分:_間隔)  (グラフ:_原点y)  位置。
            
        」!  (系列数)  繰り返す。
        「系列数  >  1」！なら「
            ペン!ペンなし  (グラフ:_原点x)  (自分:_底-10)  位置。
            系列ラベルx  =    グラフ:_原点x+10。
            系列ラベルy  =  自分:_底+10。
            「|i|
                系列名=data_x!(i)    読む。
                
                系列名長=(系列名+"")!長さ？。
                ペン！ペンあり  6  4  角形  (自分!(i)  着色)    図形を作る。
                a=ラベル!    (系列名)    作る    （系列ラベルx）  (系列ラベルy)    位置  (自分：_軸ラベルサイズ-2)  文字サイズ。
                ペン!ペンなし    (系列名長*１0+16)    0  移動する。
                系列ラベルx  =  系列ラベルx+(系列名長*１0+16)。
            」!(系列数)    繰り返す。
            自分:_底＝自分:_底-20。
        」実行。
        
        ペン！消える。
        「_横軸タイトル文==undef」！なら「
            自分！("項目")  横軸タイトル。
        」実行。
        「_縦軸タイトル文==undef」！なら「
            自分！("")  縦軸タイトル。
        」実行。
        自分！縦軸タイトル描画。
        自分！横軸タイトル描画。
        グラフ:_原点x=自分:_右端+60．
        //テーブル:x=自分:_右端。
        自分:_最小メモリ=undef。
        自分。
    」。
    //グラフ：個体番号＝グラフ：個体番号+1。
    「_積み上げ棒グラフ:f2==undef」!なら「
        _積み上げ棒グラフ。
    」そうでなければ「
        「自分!(_積み上げ棒グラフ:f2)  check_fn」!なら「
            「_積み上げ棒グラフ:_DATA!(_積み上げ棒グラフ:f2!1  読む)    射影  check_dt」!なら「
                _積み上げ棒グラフ。
            」そうでなければ「
                undef。
            」実行。
        」そうでなければ「
            undef。
        」実行。
    」実行。
」。

テーブル：折れ線グラフ=「|  ;_max  _maxf  |
    _折れ線グラフ＝グラフ！作る．
    _折れ線グラフ：種類="折れ線グラフ"。
    _折れ線グラフ:_DATA=自分．
    _折れ線グラフ:f1  =  自分:フィールド名！1  読む。
    _折れ線グラフ:f2  =  自分!(_rest)  getarg。
    _折れ線グラフ:描画=「|    |
        自分:_向き="縦"。
        自分！位置確定。
        data_x=_DATA!(f1)  射影。
        「f2==undef」！なら「
            f2=配列！作る。
            _DATA:フィールド名!「|  n  |
                f2!(n)  書く。
            」それぞれ実行。
            f2!1  位置で消す。
        」実行。
        
        data_y=_DATA！（f2）射影。
        要素数=data_x:データ!要素数?。
        系列数=f2!要素数?。
        最大長=0。
        
        data_x:データ!「|  n  i  |
            「((n+"")!長さ？)  >  最大長」！なら「最大長=(n+"")!長さ？」実行。
        」それぞれ実行。
        ラベル数=ceil(要素数/32)。
        
        自分!  (要素数) 横幅設定。
        自分!  (data_y) 縦幅設定。
        自分!  (要素数) メモリ線描画。
        
        ペン＝タートル!作る  2  線の太さ。
        ラベルx=グラフ:_原点x+(自分:_間隔)。
        ラベルy=グラフ:_原点y-10。
        
        「|  j  |
            
            data_y=自分:_DATA!(f2!(j)  読む)  射影。
            ラベルサイズ=「自分:_プロット幅  >  10」  !なら「10」そうでなければ「自分:_プロット幅」実行。
            data_y:データ!「|n  i|
                「自分:_メモリ範囲」！なら「
                    「n  >=  自分:_最大メモリ」！なら「
                        n=自分:_最大メモリ。
                    」そうでなければ「n  <=  自分:_最小メモリ」なら「
                        //n=自分:_最小メモリ。
                    」実行。
                」実行。
                「i==1」！なら「
                    plot_flag=false。
                    y1=(n-自分:_起点メモリ)*(自分:_DACOL)+グラフ:_原点y。
                    「y1  >=  自分:_最小メモリ」!なら「plot_flag=true」実行。
                    プロットx=グラフ:_原点x+自分:_間隔+自分:_プロット幅/2。
                    ペン!ペンなし  (プロットx)    (y1)    位置。
                    x1=プロットx。
                」実行。
                「n  >=  自分:_最小メモリ」!なら「
                    n=(n-自分:_起点メモリ)*(自分:_DACOL)+グラフ:_原点y。
                    x2=x1+(自分:_間隔+自分:_プロット幅)。
                    y2=n。
                    「plot_flag」！なら「
                        「自分:_マーカフラグ」！なら「
                            ペン!ペンあり  4  8  角形  (自分!(j)    着色)    図形にする  -2  5  移動する。
                        」実行。
                    」実行。
                    ペン!ぺんあり    (プロットx)  (n)      位置  (自分!(j)    着色)    図形を作る。
                    プロットx=プロットx+(自分:_間隔+自分:_プロット幅)。
                    ｘ１＝ｘ２。
                    y1=y2。
                    「i==要素数」！なら「
                        「自分:_マーカフラグ」！なら「
                            ペン!ペンあり  4  8  角形  (自分!(j)    着色)    図形にする  -2  5  移動する。
                        」実行。
                    」実行。
                    plot_flag=true。
                」そうでなければ「
                    n=(n-自分:_起点メモリ)*(自分:_DACOL)。
                    //x=(y-y1)/(y2-y1)/(x2-x1)+x1
                    x2=x1+(自分:_間隔+自分:_プロット幅)。
                    y2=n。
                    x軸交点=-1*y1/(y2-y1)/(x2-x1)+x1。
                    「plot_flag」！なら「
                        「自分:_マーカフラグ」！なら「
                            ペン!ペンあり  4  8  角形  (自分!(j)    着色)    図形にする  -2  5  移動する。
                            ペン!ぺんあり    (x軸交点)  (グラフ:_原点y)    位置  (自分!(j)    着色)    図形を作る。
                        」実行。
                    」そうでなければ「
                        ペン!ぺんなし    (x軸交点)  (グラフ:_原点y)    位置
                    」実行。
                    プロットx=プロットx+(自分:_間隔+自分:_プロット幅)。
                    ｘ１＝ｘ２。
                    y1=y2。
                    plot_flag=false。
                」実行。
                
                「j==1」！なら「
                    「((i-1)%(ラベル数))==0」！なら「
                        横軸ラベル=data_x!(i)  読む。
                        横軸ラベル長=(横軸ラベル+"")!長さ?。
                        「(最大長*5)  >  自分:_プロット幅」！なら「
                            自分!  (横軸ラベル)  (ラベルx)  (ラベルy)  ""  (最大長)  縦表示。
                        」そうでなければ「
                            ラベル!  (横軸ラベル)  作る    (自分：_軸ラベルサイズ)    文字サイズ    (ラベルx-横軸ラベル長*5/2)  (ラベルy)  位置。
                        」実行。
                        ラベルx=ラベルx+(自分:_間隔+自分:_プロット幅)*ラベル数。
                    」実行。
                」実行。
                
            」それぞれ実行。
            「自分:_底  >=  ラベルy」!なら「自分:_底=ラベルy-30」実行。
            
        」!  (系列数)  繰り返す。
        
        「系列数  >  1」！なら「
            ペン!ペンなし  (グラフ:_原点x)  (自分:_底-12)  位置。
            系列ラベルx  =  グラフ:_原点x+10。
            系列ラベルy  =  自分:_底。
            「|i|
                系列名=f2!(i)    読む。
                系列名長=(系列名+"")!長さ？。
                ペン！ペンあり  6  4  角形    (自分!(i)    着色)    図形を作る。
                a=ラベル!    (系列名)    作る    （系列ラベルx）  (系列ラベルy)    位置  (自分：_軸ラベルサイズ)  文字サイズ。
                ペン!ペンなし    (系列名長*16+16)    0  移動する。
                系列ラベルx  =  系列ラベルx+(系列名長*16+16)。
            」!(系列数)    繰り返す。
            自分:_底＝自分:_底-20。
        」実行。
        
        「_横軸タイトル文==undef」！なら「
            自分！(f1)  横軸タイトル。
        」実行。
        「_縦軸タイトル文==undef」！なら「
            自分！("")  縦軸タイトル。
        」実行。
        自分！縦軸タイトル描画。
        自分！横軸タイトル描画。
        グラフ:_原点x=自分:_右端+60．
        //テーブル:x=自分:_右端。
        ペン！  消える。
        自分:_最小メモリ=undef。
        自分。
    」。
    
    //グラフ：個体番号＝グラフ：個体番号+1。
    「_折れ線グラフ:f2==undef」!なら「
        _折れ線グラフ。
    」そうでなければ「
        「自分!(_折れ線グラフ:f2)  check_fn」!なら「
            「_折れ線グラフ:_DATA!(_折れ線グラフ:f2!1  読む)    射影   check_dt」!なら「
                _折れ線グラフ。
            」そうでなければ「
                undef。
            」実行。
        」そうでなければ「
            undef。
        」実行。
    」実行。
」。


テーブル：円グラフ=「  |f2|
    「どれか！(f2=="")  (f2==undef)  本当」!なら「f2=(自分:フィールド名)!2  読む」実行。
    _円グラフ=グラフ！作る．
    _円グラフ:_DATA=自分．
    _円グラフ:f1  =  自分:フィールド名！1  読む。
    _円グラフ:f2  =  f2。
    _円グラフ:描画=「|  i  |
        自分!位置確定。
        自分!  20  0  移動する。
        ペン＝タートル！作る。
        D_f1=_DATA!    (f2)    小さい順  (f1)  射影。
        r=グラフ:_縦幅/2.    x=90.    x_pos=  r+20.    y_pos=  -1*r.
        自分:_円原点x=グラフ:_原点x+r。
        自分:_円原点y=グラフ:_原点y+r/2。
        d_arr=_DATA！(f2)  小さい順  (f2)  射影。
        sum=d_arr!(f2)  合計値    値読み出し。
        add=0。
        自分:_左端=(自分:_円原点x)-(r)-20。
        自分:_天井=(自分:_円原点y)+(r)+30。
        自分:_底=(自分:_円原点y)+y_pos-20。
        
        要素数=d_arr:データ!要素数?。
        _max_length=1。
        角度合計  =  ０。
        割合合計  =  0。
        d_arr：データ!「|  val  j|
            prop=round((val/sum)*1000)。
            prop=prop/10.
            チーズ角度  =  round(prop*3.6)。
            col=  グラフ！(j)  着色。
            long=0。
            割合合計=割合合計+prop。
            角度合計=角度合計+    チーズ角度。
            「j  ==  要素数」！なら「
                「角度合計  >  360」  !なら    「
                    チーズ角度=チーズ角度-(角度合計-360)。
                」そうでなければ「    角度合計  <  360」  なら    「
                    チーズ角度=チーズ角度+(360-角度合計)。
                」実行。
                「割合合計  >  100」!なら「
                    prop=prop-(割合合計-100)。
                」そうでなければ「割合合計  <  100」なら「
                    prop=prop+(100-割合合計)。
                」実行。
                prop=(round(prop*10))/10。
            」実行。
            ペン！ペンなし  0  0  位置．
            「チーズ角度!=0」!なら「
                チーズ＝「
                    ペン！ペンあり  1  線の太さ  ((r)*cos(x))  ((r)*sin(x))  位置．
                    x=x+1．
                    long=long+1.
                    ペン．
                」!  (チーズ角度)  繰り返す  0  0  位置  (col)  図形を作る．
                チーズ！(自分:_円原点x)  (自分:_円原点y)  位置。
                
                「(long)  >=  20」！なら「
                    
                    ラベル！(prop+"%")  作る  (自分:_円原点x+(r/3*2)*cos(x-(long/2))-5)  (自分:_円原点y+(r/3*2)*sin(x-(long/2)))  位置  (自分：_軸ラベルサイズ-4)  文字サイズ。
                」そうでなければ「
                    
                    ラベル！(prop+"%")  作る  (自分:_円原点x+(r/4*5)*cos(x-(long/2))-5)  (自分:_円原点y+(r/4*5)*sin(x-(long/2)))  位置  (自分：_軸ラベルサイズ-5)  文字サイズ。
                    
                    ペン!ペンなし  (自分:_円原点x+(r/4*5)*cos(x-(long/2))+5)  (自分:_円原点y+(r/4*5)*sin(x-(long/2))-25)      位置  ペンあり  (自分:_円原点x+(r)*cos(x-(long/2)))  (自分:_円原点y+(r)*sin(x-(long/2)))      位置  (黒)      図形を作る。
                」実行。
                
                ペン！ペンなし  (自分:_円原点x+x_pos)  (自分:_円原点y+y_pos)  位置  ペンあり  10  4  角形  (col)  図形を作る。
                A=ラベル!  (D_f1:データ！  (j)  読む)  作る  (自分:_円原点x+x_pos+15)  (自分:_円原点y+y_pos+10)  位置  (自分：_軸ラベルサイズ)    文字サイズ。
                
                ラベル!  ("  "+(d_arr！  (j)  読む)+"件")  作る  (自分:_円原点x+x_pos+15+(A!幅？))  (自分:_円原点y+y_pos+10)  位置    (自分：_軸ラベルサイズ)  文字サイズ。
                y_pos  =  y_pos  +  20。
                sum_length=(((D_f1:データ！  (j)  読む)+"")!    長さ？)  +  (("    "+(d_arr！  (j)  読む)+"件")  !長さ?)。
                「_max_length<sum_length」!なら「_max_length=sum_length」実行。
            」実行。
        」それぞれ実行。
        
        自分:_右端=自分:_円原点x+x_pos+15*(_max_length)。
        グラフ:_原点x=自分:_右端+60．
        ペン！消える．
        自分:_最小メモリ=undef。
        自分。
    」.
    //グラフ：個体番号＝グラフ：個体番号+1。
    「どれか!(f2==undef)  (_円グラフ:_DATA==undef)  本当」！なら「
        undef。
    」そうでなければ「
        「自分！(_円グラフ:f2)    check_fn」!なら「
            「自分!(_円グラフ:f2)  射影  check_dt」！なら「
                //グラフ：個体番号＝グラフ：個体番号+1。
                _円グラフ。
            」そうでなければ「
                undef。
            」実行。
        」そうでなければ「
            undef。
        」実行。
    」実行。
」。

テーブル：帯グラフ=「|;補正  |
    _帯グラフ=グラフ！作る。
    _帯グラフ:_DATA=自分。
    _帯グラフ:f1  =  自分:フィールド名！1  読む。
    _帯グラフ:joint_pos=配列！作る。
    _帯グラフ:f2  =  自分!(_rest)  getarg。
    _帯グラフ:_帯長さ=(_帯グラフ:_横幅)/100．
    _帯グラフ:_方向="帯"。
    _帯グラフ:描画=「|;系列長    kxpos  |
        自分!位置確定。
        
        「f2==undef」！なら「
            //tmp=(_DATA：フィールド名)！作る。
            tmp=(_DATA：フィールド名)！concat。
            f2=tmp!1  位置で消す。
        」実行。
        
        型配列=自分!(_DATA)  型判定。
        「(型配列!要素数?)>0」!なら「
            型配列!「|n|
                f2=f2!(n)  消す。
            」それぞれ実行。
        」実行。
        
        data_x=_DATA！(f1)  射影。
        フィールド数=f2!要素数?。
        系列数=data_x:データ!要素数?。
        ペン=タートル!  作る    1  線の太さ    。
        横の位置配列=配列！作る。
        注釈フラグ=false。
        描画用データ=自分:_DATA!  (f2!  1  (f1)  挿入)  射影  行列入れ替え。
        f2!1    位置で消す。
        自分!  (フィールド数)  横幅設定。
        自分!  (フィールド数)  メモリ線描画。
        自分:_プロット幅  =  自分:_プロット幅。
        
        ペン！    ぺんなし    (グラフ:_原点x)  (グラフ:_原点y+自分:_間隔)  位置。
        ラベルx=グラフ:_原点x-10。
        ラベルy=グラフ:_原点y+(自分:_間隔+自分:_プロット幅/2+(自分：_軸ラベルサイズ))。
        割合ラベルy=グラフ:_原点y+(自分:_間隔+自分:_プロット幅/2+(自分：_軸ラベルサイズ))。
        
        「|  j  |
            data_y=描画用データ!((data_x!(j)  読む)+"")  射影。
            
            「|  i  ;n|
                合計=自分:_DATA!(f2!(i)  読む)  合計値  数にする。
                「j==1」！なら「
                    横の位置配列!0  書く。
                」実行。
                n=data_y:データ!(i)  読む。
                「n==""」!なら「n=0」実行。
                val=f2!(i)  読む。
                メモリ調整＝((val+"")!長さ?)*12。
                割合=round((n/合計)*1000)/10。
                ペン!ペンなし    (横の位置配列!(i)  読む)  0    移動する。
                ペン！ペンあり    ((自分:_帯長さ)*割合)  歩く    90  左回り    (自分:_プロット幅)  歩く    90  左回り    ((自分:_帯長さ)*割合)  歩く    180  左回り  (自分!(j)    着色)    図形にする。
                ペン!ペンなし    0  (自分:_間隔)  移動する。
                ペン!ペンなし    (-1*(横の位置配列!(i)  読む))  0    移動する。
                「割合!=0」！なら「
                    ラベル!(割合+"%")  作る  (グラフ:_原点x+(横の位置配列!(i)読む)+((自分:_帯長さ)*割合)/2-10)  (割合ラベルy)    位置    (自分：_軸ラベルサイズ)  文字サイズ。
                」実行。
                横の位置配列!(i)    ((横の位置配列!(i)読む)+(自分:_帯長さ)*割合)    上書き。
                割合ラベルy=割合ラベルy+(自分:_間隔+自分:_プロット幅)。
                「j==1」！なら「
                    ラベル!  (val)  作る    (自分：_軸ラベルサイズ)    文字サイズ    (ラベルx-メモリ調整)  (ラベルy)  位置。
                    ラベルy=ラベルy+(自分:_間隔+自分:_プロット幅)。
                    「自分:_左端  >=  (ラベルx-メモリ調整-30)」!なら「
                        自分:_左端=ラベルx-メモリ調整  -30。
                    」実行。
                」実行。
            」!(フィールド数)  繰り返す。
            割合ラベルy=グラフ:_原点y+(自分:_間隔+自分:_プロット幅/2+(自分：_軸ラベルサイズ))。
            ペン！    ぺんなし    (グラフ:_原点x)  (グラフ:_原点y+自分:_間隔)  位置。
            
            横の位置配列!「|  n  i  |
                「i==１」！なら「
                    ペン2=タートル!作る  (色!0xBDBDBD  作る)  線の色．
                    ペン2!  (赤)  線の色  ペンなし  (グラフ:_原点x+n)  (グラフ:_原点y+自分:_間隔+自分:_プロット幅)    位置。
                」そうでなければ「
                    ペン2!(色!0xBDBDBD  作る)  線の色  ペンあり  (グラフ:_原点x+n)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*i-自分:_プロット幅)    位置  図形を作る。
                    ペン2!  ペンなし  0  (自分:_プロット幅)    移動する  消える。
                」実行。
                ペン2!消える．
            」それぞれ実行。
            ペン！    ぺんなし    (グラフ:_原点x)  (グラフ:_原点y+自分:_間隔)  位置。
            
        」!  (系列数)  繰り返す。
        
        
        「系列数  >  1」！なら「
            //JAVA _底-7
            ペン!ペンなし  (グラフ:_原点x)  (自分:_底+1)  位置。
            系列ラベルx  =    グラフ:_原点x+10。
            系列ラベルy  =  自分:_底+7。
            「|i|
                系列名=data_x!(i)    読む。
                系列名長=(系列名+"")!長さ？。
                ペン！ペンあり  6  4  角形    (自分!(i)    着色)    図形を作る。
                ラベル!    (系列名)    作る    （系列ラベルx）  (系列ラベルy)    位置  (自分：_軸ラベルサイズ-2)  文字サイズ。
                ペン!ペンなし    (系列名長*12+16)    0  移動する。
                系列ラベルx  =  系列ラベルx+(系列名長*12+16)。
            」!(系列数)    繰り返す。
            自分:_底＝自分:_底-20。
        」実行。
        
        ペン！消える。
        「自分:_横軸タイトル文==undef」！なら「
            自分！(自分:f1)  横軸タイトル。
        」実行。
        「自分:_縦軸タイトル文==undef」！なら「
            自分！("")  縦軸タイトル。
        」実行。
        自分！縦軸タイトル描画。
        自分！横軸タイトル描画。
        グラフ:_原点x=自分:_右端+60．
        //テーブル:x=自分:_右端。
        自分:_最小メモリ=undef。
        自分。
    」。
    //グラフ：個体番号＝グラフ：個体番号+1。
    「_帯グラフ:f2==undef」!なら「
        _帯グラフ。
    」そうでなければ「
        「全部!  (自分!(_帯グラフ:f2)  check_fn)  (_帯グラフ:_DATA!=undef)    本当」!なら「
            「_帯グラフ:_DATA!(_帯グラフ:f2!1  読む)    射影  check_dt」!なら「
                _帯グラフ。
            」そうでなければ「
                undef。
            」実行。
        」そうでなければ「
            undef。
        」実行。
    」実行。
」。

テーブル:散布図＝「|f1  f2  flag|
    _散布図＝グラフ！作る。
    _散布図:_DATA=自分。
    _散布図:f1  =  f1。
    _散布図:f2  =  f2。
    _散布図:_方向="散布図"。
    _散布図:_グリッド線なし=false。
    _散布図:_横幅=グラフ:_縦幅。
    _散布図:_縦幅=グラフ:_縦幅。
    _散布図:_天井=_散布図:_原点y+_散布図:_横幅。
    //_散布図:_右端=_散布図:_原点x+_散布図:_横幅。
    _散布図:_原点y=_散布図:_原点y-10。
    _散布図：描画=「||
        自分!位置確定。
        //「(グラフ:_原点x)==(グラフ:_原点x)」!なら「自分!位置確定。」実行。
        ペン=タートル!作る。
        data_x=_DATA!(f1)  射影。
        data_y=_DATA!(f2)  射影。
        
        自分:    _DACOLX=自分!(data_x:データ)  (自分:_横幅)  データ補正値計算。
        自分:_scalex=自分:_scale。
        自分:_段数x=自分:_段数。
        自分:_桁x=自分:_digit。
        自分:_最大メモリ=undef。
        自分:_最小メモリ=undef。
        自分:_DACOLY=自分!(data_y:データ)  (自分:_縦幅)  データ補正値計算。
        自分:_scaley=自分:_scale。
        自分:_段数y=自分:_段数。
        自分:_桁y=自分:_digit。
        自分!メモリ線描画。
        
        data_x:データ!「|val  cnt|
            ペン！ペンなし  (グラフ:_原点x+val*自分:_DACOLX)  ((data_y:データ!(cnt)  読む)*自分:_DACOLY+グラフ:_原点y+3)  位置  ペンあり  4  6  角形  (赤)    図形を作る。
        」それぞれ実行。
        
        「_横軸タイトル文==undef」！なら「
            自分！(f1)  横軸タイトル。
        」実行。
        「_縦軸タイトル文==undef」！なら「
            自分！(f2)  縦軸タイトル。
        」実行。
        自分！縦軸タイトル描画。
        自分！横軸タイトル描画。
        ペン!消える。
        
        「自分:_近似」！なら「
            自分!最小二乗法。
            自分:_近似=false。
        」実行。
        
        グラフ:_原点x=自分:_右端+60．
        自分:_最小メモリ=undef。
        自分。
    」。
    //グラフ：個体番号＝グラフ：個体番号+1。
    「どれか！(_散布図:f1==undef)  (_散布図:f2==undef)  本当」!なら「
        undef。
    」そうでなければ「
        「全部!  (自分!(_散布図:f1)  check_fn)  (自分!(_散布図:f2)  check_fn)  本当」!なら「
            「全部!(_散布図:_DATA!(_散布図:f1)    射影  check_dt)  (_散布図:_DATA!(_散布図:f2)    射影  check_dt)  本当」!なら「
                _散布図。
            」そうでなければ「
                undef。
            」実行。
        」そうでなければ「
            undef。
        」実行。
    」実行。
」。



テーブル：箱ひげ図=「  |f1  f2|
    _箱ひげ図＝グラフ！作る。
    _箱ひげ図:_DATA=自分．
    _箱ひげ図:f1  =  f1。
    _箱ひげ図:f2  =  f2。
    
    _箱ひげ図：描画=「||
        自分!位置確定。
        //一つ目の引数(x軸の要素)を取得し値の重複を除く。
        data_x=_DATA！(f1)  内部_重複なし。
        f1_num＝0．
        f2_num＝0．
        data_y  =  _DATA！(f2）射影．
        
        要素数=data_x:データ!要素数?。
        プロット数=data_y:データ!要素数?。
        自分!  (要素数)横幅設定。
        自分!  (data_y)  縦幅設定。
        自分!  (要素数)  メモリ線描画。
        
        //引数に取られたフィールドがそれぞれ何番目の要素であるかを調べる
        「｜番号｜
            「（_DATA:フィールド名！（番号）読む）＝＝  (f1)」！なら
            「f1_num＝番号。」そうでなければ
            「（_DATA:フィールド名！（番号）読む）＝＝  (f2)」なら
            「f2_num＝番号。」実行。
        」！（_DATA:フィールド名！要素数？）繰り返す。
        ペン＝タートル！作る  1  線の太さ。
        data_x:データ!「|f  cnt|
            tmp=_DATA!(f)  (f1_num)  レコード取り出し。//選択に相当
            tmp2=tmp!(f2)  射影。
            tmp3=tmp!(f2)  射影。
            qua3=tmp!(f2)  第3四分位数  値読み出し。
            qua2=tmp!(f2)  中央値  値読み出し。
            qua1=tmp!(f2)  第1四分位数  値読み出し。
            ave=tmp!(f2)  平均値  値読み出し。
            
            「qua1!=undef」!なら「
                IRQ=qua3-qua1。
                「自分:_方向=="縦"」！なら「
                    
                    tmp2:データ!「|n  i|
                        「どれか!(n  >  (qua3+IRQ*1.5))  (n  <  (qua1-IRQ*1.5))  本当」！なら「
                            ペン！ペンなし  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2))  (グラフ:_原点y+n*_DACOL)  位置  ぺんあり  3  円。
                            tmp3:データ!(n)  消す。
                        」実行。
                    」それぞれ実行。
                    _max=tmp3!(f2)  最大値    値読み出し。
                    _min=tmp3!(f2)  最小値    値読み出し。
                    //平均のバッテン
                    ペン！ぺんなし    (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2)-((20/sqrt(2))/2))  (グラフ:_原点y+ave*(_DACOL)+((20/sqrt(2))/2))  位置  45  右回り  ぺんあり  20  歩く    ペンなし  位置  45  左回り    ．
                    ペン！ぺんなし    (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2)-((20/sqrt(2))/2))  (グラフ:_原点y+ave*(_DACOL)-((20/sqrt(2))/2))  位置  45  左回り  ぺんあり  20  歩く  ペンなし    位置  45  右回り．
                    //縦棒
                    ペン！ペンなし  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2))  (グラフ:_原点y+_max*_DACOL)
                    位置  ペンあり  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2))  (グラフ:_原点y+qua3*_DACOL)  位置．
                    ペン！ペンなし  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2))  (グラフ:_原点y+qua1*_DACOL)
                    位置  ペンあり  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2))  (グラフ:_原点y+_min*_DACOL)  位置．
                    ペン！ペンなし  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  (グラフ:_原点y+qua3*_DACOL)
                    位置  ペンあり  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  (グラフ:_原点y+qua1*_DACOL)  位置．
                    ペン！ペンなし  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt)  (グラフ:_原点y+qua3*_DACOL)
                    位置  ペンあり  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt)  (グラフ:_原点y+qua1*_DACOL)  位置。
                    //横棒
                    ペン！ペンなし  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  (グラフ:_原点y+qua3*_DACOL)  位置    ペンあり  (自分:_プロット幅)  歩く。
                    ペン！ペンなし  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  (グラフ:_原点y+qua2*_DACOL)  位置    ペンあり  (自分:_プロット幅)  歩く。
                    ペン！ペンなし  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  (グラフ:_原点y+qua1*_DACOL)  位置    ペンあり  (自分:_プロット幅)  歩く。
                    ペン！ペンなし  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  (グラフ:_原点y+_max*_DACOL)  位置    ペンあり  (自分:_プロット幅)  歩く。
                    ペン！ペンなし  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  (グラフ:_原点y+_min*_DACOL)  位置    ペンあり  (自分:_プロット幅)  歩く    ペンなし。
                    プロット＝ペン！図形にする。
                    
                    「cnt  ==  1」！なら「
                        data_x:データ!「|  n  i  |
                            長=(n+"")!長さ?。
                            調整=0。
                            「長  <  3」!なら「
                                調整=(3-長)*5。
                            」そうでなければ「長  >  3」なら「
                                調整=-1*(長-3)*2。
                            」実行。
                            ラベル!  (n)  作る    (自分：_軸ラベルサイズ)    文字サイズ    (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*i-自分:_プロット幅/2-長*5)  (グラフ:_原点y-10)  位置。
                        」それぞれ実行。
                        自分:_底=自分:_底-30。
                        
                    」実行。
                    
                」そうでなければ「自分:_方向=="横"」なら「
                    「cnt==1」！なら「
                        ペン!90  左回り。
                    」実行。
                    tmp2:データ!「|n  i|
                        「どれか!(n  >  (qua3+IRQ*1.5))  (n  <  (qua1-IRQ*1.5))  本当」！なら「
                            ペン！ペンなし  (グラフ:_原点x+n*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2))    位置  ぺんあり  3  円。
                            tmp3:データ!(n)  消す。
                        」実行。
                    」それぞれ実行。
                    
                    _max=tmp3!(f2)  最大値    値読み出し。
                    _min=tmp3!(f2)  最小値    値読み出し。
                    //平均のバッテン
                    ペン！ぺんなし  (グラフ:_原点x+ave*(_DACOL)-((20/sqrt(2))/2))  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2)-((20/sqrt(2))/2))位置  45  右回り  ぺんあり  20  歩く    ペンなし  位置  45  左回り    ．
                    ペン！ぺんなし  (グラフ:_原点x+ave*(_DACOL)+((20/sqrt(2))/2))  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2)-((20/sqrt(2))/2))  位置  45  左回り  ぺんあり  20  歩く  ペンなし    位置  45  右回り。
                    //縦棒
                    ペン！ペンなし  (グラフ:_原点x+_max*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2))
                    位置  ペンあり  (グラフ:_原点x+qua3*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2))  位置．
                    
                    ペン！ペンなし  (グラフ:_原点x+qua1*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2))
                    位置  ペンあり    (グラフ:_原点x+_min*_DACOL)      (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2))位置．
                    
                    ペン！ペンなし  (グラフ:_原点x+qua3*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  位置  ペンあり    (グラフ:_原点x+qua1*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  位置．
                    ペン！ペンなし  (グラフ:_原点x+qua3*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt)  位置  ペンあり  (グラフ:_原点x+qua1*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt)  位置。
                    //横棒
                    ペン！ペンなし  (グラフ:_原点x+qua3*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  位置    ペンあり  (自分:_プロット幅)  歩く。
                    ペン！ペンなし  (グラフ:_原点x+qua2*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  位置    ペンあり  (自分:_プロット幅)  歩く。
                    ペン！ペンなし  (グラフ:_原点x+qua1*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)位置    ペンあり  (自分:_プロット幅)  歩く。
                    ペン！ペンなし  (グラフ:_原点x+_max*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  位置    ペンあり  (自分:_プロット幅)  歩く。
                    ペン！ペンなし  (グラフ:_原点x+_min*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  位置    ペンあり  (自分:_プロット幅)  歩く    ペンなし。
                    プロット＝ペン！図形にする。
                    
                    「cnt  ==  1」！なら「
                        最長=0。
                        data_x:データ!「|  n  i  |
                            長=(n+"")!長さ?。
                            「長  >  最長」!なら「最長=長」実行。
                            調整=0。
                            「長  <  3」!なら「
                                調整=(3-長)*5。
                            」そうでなければ「長  >  3」なら「
                                調整=-1*(長-3)*2。
                            」実行。
                            ラベル!  (n)  作る    (自分：_軸ラベルサイズ)    文字サイズ    (グラフ:_原点x-20+長-長*10)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*i-自分:_プロット幅/2+10)  位置。
                        」それぞれ実行。
                        自分:_左端=自分:_左端-最長*15。
                        
                    」実行。
                」実行。
            」実行。
            
        」それぞれ実行。
        
        「_横軸タイトル文==undef」！なら「
            自分！("項目")  横軸タイトル。
        」実行。
        「_縦軸タイトル文==undef」！なら「
            自分！("")  縦軸タイトル。
        」実行。
        自分！縦軸タイトル描画。
        自分！横軸タイトル描画。
        グラフ:_原点x=自分:_右端+60．
        ペン！図形にする。
        ペン！消える。
        自分:_最小メモリ=undef。
        自分。
    」．
    //グラフ：個体番号＝グラフ：個体番号+1。
    「どれか！(_箱ひげ図:f1==undef)  (_箱ひげ図:f2==undef)  本当」!なら「
        undef。
    」そうでなければ「
        「全部!  (自分!(_箱ひげ図:f1)  check_fn)  (自分!(_箱ひげ図:f2)  check_fn)  本当」!なら「
            「  _箱ひげ図:_DATA!(_箱ひげ図:f2)    射影  check_dt」!なら「
                _箱ひげ図。
            」そうでなければ「
                undef。
            」実行。
        」そうでなければ「
            undef。
        」実行。
    」実行。
」．
