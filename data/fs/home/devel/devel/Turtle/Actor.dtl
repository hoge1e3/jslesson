//NOGENERATOR
$=!create.
$:create=[|tag| (window:$) ! (root) (tag) call. ].
Actor=!create.
Actor:pos=Vec2:O.
Actor:dir=0.
Actor:num=[|x| [x]!then[x]else[0]execute ].
//Actor:actorList=Array! create.
Actor:createSVGElem=[|tag|
    $! (document !
    "http://www.w3.org/2000/svg" (tag)
    createElementNS
    ) create.
].
Actor:copySVGElem=[|dst src;t n a s|
    src=$!(src)create.
    dst=$!(dst)create.
    t=this.
    src ! children [
        s=this.
        n=t ! (s:tagName) createSVGElem  0 get.
        a=(t:Array:prototype:slice)! (s:attributes) call.
        a ! [|an|
            an=an:name.
            n ! (an) (s!(an) getAttribute) setAttribute.
        ] each.
        dst ! (n) append.
        t ! (n) (s) copySVGElem.
    ] each.
].
Actor:show=[
    group ! (this) add.
    !setTrans.
    isShowing=true.
    this.
].
Actor:hide=[|;i|
    group ! (this) remove.
    isShowing=false.
    this.
].
Actor!"show" "appear" addAlias "hide" "die" addAlias.
Actor:group=Actor !create.
Actor:group:members=Array!create.
Actor:group:remove=[|m;i|
    i=members ! (m) indexOf.
    [i>=0] ! then [
        members ! (i) (1) splice.
    ] execute.
    [m:element] ! then [m:element ! remove] execute.
].
Actor:group:add=[|m;i|
    [m:getCrashShape] ! then [] else [ system ! ("NO"+m) throw ]execute.
    i=members ! (m) indexOf.
    [i<0] ! then [
        members ! (m) push.
        element ! (m:element) append.
    ] execute.
].

Actor:initSVG=[|;t wndj svgw svgh|
    svg=$ ! "svg" create.
    console ! "SVG" (svg) log.
    wndj=$ ! (window) create.
    svgw=(wndj ! width)-10.
    svgh=(wndj ! height)-10.
    [svgh<=0] ! then [svgh=svgw/16*9] execute.
    [svg:length==0] ! then [
        //window ! (svgw+","+svgh) alert.
        svg= !"svg" createSVGElem 
        "id" "turtle_svg" attr
        "width" (svgw) attr
        "height" (svgh) attr
        "position" "absolute" css
        "body" appendTo.
    ] execute.
    svg_g = svg ! "g" find.
    [svg_g:length==0] ! then [
        svg_g= ! "g" createSVGElem 
        "transform" ("translate("+(svgw/2)+","+(svgh/2)+") scale(1,-1)") attr 
        (svg) appendTo.
    ] execute.
    t=self.
    wndj ! [
        svgw=(wndj ! width)-10.
        svgh=(wndj ! height)-10.
        [svgh<=0] ! then [svgh=svgw/16*9] execute.
        (t:svg) ! "width" (svgw) attr "height" (svgh) attr.
        (t:svg_g) !"transform" ("translate("+(svgw/2)+","+(svgh/2)+") scale(1,-1)") attr. 
    ] resize.
    group:element=svg_g.
].
Actor! initSVG.

// element pos dir
Actor:forward=[|by|
    by=!(by) num.
    _lastPos=pos.
    _lastStep=by.
    pos=pos ! ((Vec2:X) ! (dir) rotate (by) mul) add.
    !setTrans.
    this.
].
Actor:backward=[|by|
    by=!(by) num.
    ! (-by) forward.
].
Actor:turnLeft=[|by|
    by=!(by) num.
    dir=dir+by.
    !setTrans.
    this.
].
Actor:turnRight=[|by|
    by=!(by) num.
    ! (-by) turnLeft.
].
Actor:leftTurn=Actor:turnLeft.
Actor:rightTurn=Actor:turnRight.

Actor:getCrashShape=[
    Polygon ! create
    (-width/2) (-height/2) addVertex
    (width/2) (-height/2) addVertex
    (width/2) (height/2) addVertex
    (-width/2) (height/2) addVertex
    (dir) (pos) transform.
].
//Actor:getCrashPolygon=[
    //    ! getWorldPolygon toPolyKArray.
//].
Actor:crashTo=[|o|
    [o:getCrashShape] ! then [] else [ system ! ("NO"+o) throw ]execute.
    
    (!getCrashShape) ! (o ! getCrashShape) intersects.
    //    (window:PolyK) ! (! getCrashPolygon) (o ! getCrashPolygon) Intersects.
].
Actor:_scale=1.
Actor:setTrans=[|str|
    str="translate("+(pos:x)+" "+(pos:y)+") ".
    str=str+"rotate("+dir+") ".
    str=str+"scale("+_scale+" "+_scale+") ".
    element ! "transform" (str) attr
    "data-trans" ((pos:x)+","+(pos:y)+","+dir) attr.
    [isShowing] !then [! checkCrash] execute.
    this.
].
Actor:scale=[|s| _scale=_scale*s.!setTrans].
Actor:moveTo=[|dx dy|
    dx=!(dx) num.dy=!(dy) num.
    pos=Vec2 !(dx)(dy) create.
    ! setTrans
].
Actor:moveToCenter=[
    !0 0 moveTo.
].
Actor!"moveToCenter" "moveCenter" addAlias.

Actor:moveBy=[|dx dy|
    dx=!(dx) num.dy=!(dy) num.
    ! (pos:x+dx) (pos:y+dy) moveTo
].
Actor:setDir=[|d|
    dir=!(d) num.
    !setTrans
].
Actor ! "setDir" "direction" addAlias.
Actor:getDir=[dir].
Actor ! "getDir" "direction?" addAlias.
//Actor ! "collision" addEventType.// ★
:collision=[].
:collision:isEventHandler=true.

Actor:checkCrash=[|;t|
    [Actor:_doingCheckCrash] ! then [] else [
        Actor:_doingCheckCrash=1.//TODO:true
        !allCrash [|a|
            ! (a) collision.
            a ! (this) collision.
        ] each. //TODO: localize
        Actor:_doingCheckCrash=0.
    ] execute.
].
Actor:allCrash=[|;t res|
    res=Array ! create.
    (group:members) ! [|a|
        [this!=a] ! then [
            [! (a) crashTo] ! then [
                res!(a) push.
            ] execute.
        ] execute.
    ] each.
    res.
].
Actor:bounce＝[| _hitTarget; lp ld stp a |
    lp=_lastPos.ld=dir.
    stp=lp ! (pos) sub len.
    pos=lp.
    a=2*( dir - ( _hitTarget ! getDir ) ).
    ! (a) turnRight.
    ! ( stp ) forward.
    [(! allCrash):length] ! then [
        pos=lp. dir=ld.
        ! ( 180- a ) turnLeft.
        ! ( stp ) forward.
        [(! allCrash):length] ! then [
            pos=lp. dir=ld.
            ! 180 turnLeft.
        ] execute.
    ] execute.
    self
].
Actor:xpos?=[pos:x].
Actor:ypos?=[pos:y].
