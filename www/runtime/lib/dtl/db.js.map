{"version":3,"sources":["/home/devel/devel/Turtle/db.dtl"],"names":[],"mappings":"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","sourcesContent":["//NOGENERATOR\r\n//テーブルオブジェクトの定義\r\nテーブル=!作る。\r\n//テーブル=\"テーブルオブジェクト\"。\r\nテーブル:データ＝配列！作る。\r\nテーブル：_画面幅=画面！幅？．\r\nテーブル：_画面高さ=画面！高さ？．\r\nテーブル：x=20+(テーブル：_画面幅)/-2。\r\nテーブル：y=(テーブル：_画面高さ)/2。\r\nテーブル：リスト高さ=(テーブル:_画面高さ)*3/10.\r\n\r\n//テキストファイルの処理\r\nテーブル：テキストファイル＝！作る。\r\nテーブル：テキストファイル：initialize=[|filename|\r\n    text=自分！(filename)fromWebStorage.\r\n    [text]!else[\r\n        text=自分！（filename）fromServer.\r\n    ]execute.\r\n    arr=text!(window!\"[\\r\\n]\"RegExp)split.\r\n    arr.\r\n].\r\nテーブル：テキストファイル：fromServer=[|filename|\r\n    opt=system![]new.\r\n    opt:url=\"https://bitarrow.eplang.jp/beta1808/\".\r\n    [(window:BitArrow:runtimePath)!\"localhost\" 含む?] ! then [\r\n        opt:url=\"http://localhost/\".\r\n    ] execute.\r\n    //↑サーバ内のtsvやcsvファイルがある場所\r\n    「filename!\"^data/\"含む？」！そうでなければ「\r\n        opt:url=opt:url+\"data/\"．\r\n    」実行．\r\n    opt:url=opt:url+filename.\r\n    opt:async=:false.\r\n    file=window:$!(opt)ajax.\r\n    「file:responseText!\"404 Not Found\" 含む？」！なら「\r\n        \"ファイルが存在しません。ファイル名を見直してください\"。\r\n    」そうでなければ「\r\n        //(window:console) ! (file:responseText) log.\r\n        file:responseText。\r\n    」実行。\r\n].\r\nテーブル：テキストファイル：fromWebStorage=[|filename|\r\n    「filename!\"^data/\"含む？」！なら「\r\n        filename=filename!\"^data/\" \"\"置き換える。\r\n    」実行．\r\n    :window:localStorage!(\"dtl/uploadFile/\"+filename)getItem\r\n].\r\n\r\nテーブル：テキストファイル：読む＝「arr」。\r\n\r\nテーブル：getarg＝「|n|\r\n    「全部！（自分!(n)  配列？）（自分!（n！1  読む）配列？）本当」！なら「n！1  読む」そうでなければ「n」実行\r\n」。\r\nテーブル：作る＝「||\r\n    ret＝テーブル！create。\r\n    ret:データ＝配列！作る。\r\n    args=自分!(_rest)  getarg。\r\n    「args!=undef」！なら「\r\n        ret：フィールド名＝args。\r\n    」そうでなければ「\r\n        ret:フィールド名=配列!作る。\r\n    」実行。\r\n    ret。\r\n」。\r\nテーブル：配列？＝「|n|\r\n    「どれか！(（\"\"+n）！\"]\"  含む？)    （n==undef）    本当」!なら「true」そうでなければ「false」実行。\r\n」。\r\nテーブル：書く＝「|v|\r\n    「自分!(v)配列?」!なら「\r\n        v!「|n|\r\n            自分：データ＝自分：データ！（n）書く。\r\n        」それぞれ実行。\r\n    」そうでなければ「\r\n        自分：データ＝自分：データ！（v）書く。\r\n    」実行。\r\n    自分。\r\n」。\r\nテーブル：読む＝「｜i｜自分：データ！（i）読む」。\r\nテーブル：連結＝「｜v;ret｜\r\n    自分：データ＝自分：データ！（v）連結。\r\n    自分。\r\n」。\r\n\r\nテーブル：区切り文字=「|deli|\r\n    自分：deli=deli。\r\n    自分。\r\n」。\r\n\r\nテーブル：文字コード=「|encode|\r\n    自分：encode=encode。\r\n    自分。\r\n」。\r\n\r\nテーブル：ファイルから作る＝「｜fn;  fld_tmp  fld _tmp deli｜\r\n    tf＝自分：テキストファイル！（fn）作る。\r\n    「encode==(undef)」!なら「encode=\"Shift-JIS\"」実行。\r\n    dt＝tf！(encode)  読む。\r\n    //dt＝tf！  読む  \"\"  消す。\r\n    「dt!=undef」!なら「\r\n        「deli==undef」!なら「\r\n            「(dt!1  読む)!  \"\\t\"  含む?」!なら「\r\n                deli=\"\\t\"。\r\n            」そうでなければ「\r\n                deli=\",\"。\r\n            」実行。\r\n        」実行。\r\n        「自分:フィールド名==undef」！なら「\r\n            fld_tmp＝（dt！1  読む）！(deli)  分割。\r\n            fld=配列!作る。\r\n            fld_tmp!「|n|\r\n                n=\"\"+n。\r\n                「n!\"[(]\"  含む？」!なら「_tmp=n!\"[(]\"  分割。n=_tmp! 1 読む。」実行。\r\n                「n!\"[(]\"  含む？」!なら「_tmp=n!\"[(]\"  分割。 n=_tmp! 1 読む。」実行。\r\n                「n!\"[^0-9０-９\\-\\.]\"    含む?」!なら「\r\n                    fld!(n)  書く\r\n                」そうでなければ「\r\n                    fld!(\"F\"+n)  書く\r\n                」実行。\r\n            」それぞれ実行。\r\n            ret＝テーブル！（fld）作る。\r\n        」そうでなければ「\r\n            （（dt！1  読む）！(deli)  分割）！「\r\n                dt!1  \"\"  挿入。\r\n            」それぞれ実行。\r\n        」実行。\r\n        dt!「|n  i|\r\n            「i>1」!なら「\r\n                n=n+\" \"。\r\n                tmp=n!(deli)  分割。\r\n                tmp!「|m|\r\n                    m=m!\" $\"  \"\"  置き換える。\r\n                    m=m!\"^ \"  \"\"  置き換える。\r\n                    m=m!\"^\\-$\" \"\"  置き換える。\r\n                    m=m!\"^\\-$\" \"\"  置き換える。\r\n                    m=m!\"^\\ー$\" \"\"  置き換える。\r\n                    「ｍ!\"[^0-9０-９\\.\\-]\" 含む?」!なら「\r\n                        ret!(m)  書く。\r\n                    」そうでなければ「\r\n                        ret!(:window!(m)  parseFloat)    書く。\r\n                        //ret!(m)  書く。\r\n                    」実行。\r\n                」それぞれ実行。\r\n            」実行。\r\n        」それぞれ実行。\r\n        ret。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n」。\r\n\r\nテーブル：ファイルから追加=「|  fn  |\r\n    tf＝テキストファイル！（fn）作る。\r\n    「encode==(undef)」!なら「encode=\"Shift-JIS\"」実行。\r\n    dt＝tf！(encode)  読む。\r\n    「deli==(undef)」！なら「deli=\"\\t\"」実行。\r\n    fld＝（dt！1  読む）！(deli)  分割。\r\n    ret=自分。\r\n    dt!「|n  i|\r\n        tmp=n!(deli)  分割。\r\n        tmp!「|m|\r\n            ret!(m)  書く。\r\n        」それぞれ実行。\r\n    」それぞれ実行。\r\n    ret。\r\n」。\r\n\r\nテーブル：値読み出し＝「\r\n    val=(自分:データ!1  読む)。\r\n    val。\r\n」。\r\n\r\nテーブル：フィールド番号取得＝「|  f  |\r\n    fs=undef。\r\n    要素数=フィールド名!要素数?。\r\n    「｜n｜\r\n        「(フィールド名！（n）読む）＝＝f」！なら「fs=n。」実行。\r\n    」！（フィールド名！要素数？）繰り返す。\r\n    fs。\r\n」。\r\n\r\nテーブル：文字数カウント=「|  Str  |\r\n    Str=Str+\"\"。\r\n    length=Str！長さ？。\r\n    sum=0。\r\n    「|  n  |\r\n        「全部！(((Str！(  n  )  1  部分)！文字コード  10  進数)  >31)  (((Str！(  n  )  1  部分)！文字コード  10  進数)  <127)  本当」！なら\r\n        「sum=sum+1」そうでなければ\r\n        「sum=sum+2」実行。\r\n    」！  (length)    繰り返す。\r\n    sum。\r\n」。\r\n\r\n\r\nテーブル：表示＝「|  ;要素数  文字列  レコード  カラム名  tmp  space  s  幅  文字数  lst  件数  |\r\n    要素数=自分：フィールド名！要素数？。\r\n    文字数＝配列！作る。\r\n    レコード=\"\"。\r\n    カラム名＝\"\"。\r\n    フィールド名！「|n  i|\r\n        文字数！(自分！(n)  文字数カウント)    書く。\r\n    」それぞれ実行。\r\n    \r\n    自分:データ！「|n  i|\r\n        「n==\"\"」!なら「n=\"NA\"」実行。\r\n        「全部!(((n+\"\")!\"[^0-9０-９\\-\\.]\"  含む?)==false)  (((n+\"\")!長さ?)  >5)  本当」!なら「\r\n            n=round(n*10000)。\r\n            n=n/10000。\r\n        」実行。\r\n        tmp=自分！(n+\"\")  文字数カウント。\r\n        「(文字数！((i-1)%要素数+1)  読む)  <  tmp」!なら「\r\n            文字数！((i-1)%要素数+1)    (tmp)  上書き。\r\n        」実行。\r\n    」それぞれ実行。\r\n    \r\n    space=\"\"。\r\n    フィールド名！「|n  i|\r\n        n=n+\"\"。\r\n        「space=space+\" \"。」！((文字数！((i-1)%要素数+1)  読む)-(自分！(n+\"\")  文字数カウント))  繰り返す。\r\n        「i==要素数」!なら「\r\n            カラム名=カラム名！(space+n)    連結。\r\n        」そうでなければ「\r\n            カラム名=カラム名!(space+n+\"|\")  連結。\r\n        」実行。\r\n        space=\"\"。\r\n    」それぞれ実行。\r\n    \r\n    幅=0。\r\n    文字数！「|n|  幅＝幅+n。」それぞれ実行。\r\n    s=\"\"。\r\n    「s=s+\"-\"」！(幅+要素数-1)  繰り返す。\r\n    件数=(自分:データ！要素数？)/(フィールド名!要素数?)。\r\n    リスト幅=テーブル:_画面幅/2.5。\r\n    「要素数==1」!なら「\r\n        横幅=s!長さ?。\r\n        「横幅<=1」!なら「補正値=15*横幅」そうでなければ\r\n        「横幅<=2」なら「補正値=4*横幅」そうでなければ\r\n        「横幅<=3」なら「補正値=3*横幅」そうでなければ\r\n        「横幅<7」なら「補正値=2*横幅」そうでなければ\r\n        「補正値=横幅」実行。\r\n        「(23+(幅+要素数)*7+補正値) <= (リスト幅)」!なら「リスト幅=(23+(幅+要素数)*7+補正値)」実行。\r\n        lst=テキストエリア！(カラム名)    作る  (リスト幅)  (リスト高さ)  大きさ  (テーブル：x)  (テーブル：y)  位置。\r\n        テーブル：x=(テーブル：x)+(40+リスト幅)。\r\n    」そうでなければ「\r\n        「(23+(幅+要素数)*7) <= (リスト幅)」!なら「リスト幅=(23+(幅+要素数)*7)」実行。\r\n        lst=テキストエリア！(カラム名)    作る  (リスト幅)  (リスト高さ)  大きさ  (テーブル：x)  (テーブル：y)  位置。\r\n        テーブル：x=(テーブル：x)+(40+リスト幅)。\r\n    」実行。\r\n    lst!(s)  書く    改行。\r\n    \r\n    自分:データ！「|n  i|\r\n        「n==\"\"」!なら「n=\"NA\"」実行。\r\n        「全部!(((n+\"\")!\"[^0-9０-９\\-\\.]\"  含む?)==false)  (((n+\"\")!長さ?)  >5)  本当」!なら「\r\n            n=round(n*10000)。\r\n            n=n/10000。\r\n        」実行。\r\n        「space=space+\" \"。」！((文字数！((i-1)%要素数+1)  読む)-(自分！(n+\"\")  文字数カウント))  繰り返す。\r\n        「i%要素数==0」!なら「\r\n            レコード＝レコード！(space+n)    連結。\r\n        」そうでなければ「\r\n            レコード＝レコード！(space+n+\"|\")    連結。\r\n        」実行。\r\n        space=\"\"。\r\n        「((i-1)%要素数==要素数-1)」!なら「\r\n            lst!(レコード)  書く    改行。\r\n            レコード=\"\"。\r\n        」実行。\r\n    」それぞれ実行。\r\n    テーブル：フラグ=1。\r\n    自分。\r\n」。\r\n\r\n// テーブル：ファイル出力＝「｜fn  deli  encode｜\r\n    //     tf＝テキストファイル！（fn）  作る。\r\n    //     「encode==(undef)」!なら「encode=\"Shift-JIS\"」実行。\r\n    //     tmp=\"\"。\r\n    //     「deli==(undef)」！なら「deli=\"\\t\"」実行。\r\n    //     tf！（配列！作る）(encode)  全部書く。\r\n    //     フィールド名!「|n  i|\r\n        //         tmp=(tmp)!(n+deli)    連結。\r\n    //     」それぞれ実行。\r\n    //     tf!(tmp)  (encode)    書く。\r\n    //     tmp=\"\"。\r\n    //     自分:データ！「|n  i|\r\n        //         tmp=(tmp)!(n+deli)    連結。\r\n        //         「i%(フィールド名!要素数?)==0」!なら「  tf!(tmp)  (encode)  書く。tmp=\"\"。」実行。\r\n    //     」それぞれ実行。\r\n    //     ラベル！\"書き出し完了\"  作る。\r\n    //     自分。\r\n// 」。\r\n\r\nテーブル：TSV表示＝「|  ;要素数  文字列  レコード  カラム名  tmp  space  s  幅  文字数  lst  件数  |\r\n    要素数=自分：フィールド名！要素数？。\r\n    文字数＝配列！作る。\r\n    レコード=\"\"。\r\n    カラム名＝\"\"。\r\n    フィールド名！「|n  i|\r\n        文字数！(自分！(n)  文字数カウント)    書く。\r\n    」それぞれ実行。\r\n    \r\n    フィールド名！「|n  i|\r\n        「i==要素数」!なら「\r\n            カラム名=カラム名！(n)    連結。\r\n        」そうでなければ「\r\n            カラム名=カラム名!(n+\"\\t\")  連結。\r\n        」実行。\r\n    」それぞれ実行。\r\n    \r\n    \r\n    自分:データ！「|n  i|\r\n        tmp=自分！(n+\"\")  文字数カウント。\r\n        「(文字数！((i-1)%要素数+1)  読む)  <  tmp」!なら「\r\n            文字数！((i-1)%要素数+1)    (tmp)  上書き。\r\n        」実行。\r\n    」それぞれ実行。\r\n    \r\n    幅=0。\r\n    文字数！「|n|  幅＝幅+n。」それぞれ実行。\r\n    件数=(自分:データ！要素数？)/(フィールド名!要素数?)。\r\n    リスト幅=テーブル:_画面幅/2.5。\r\n    「(23+(幅+要素数)*7) <= (リスト幅)」!なら「リスト幅=(23+(幅+要素数)*7)」実行。\r\n    lst=テキストエリア！(カラム名)    作る  (リスト幅)  (リスト高さ)  大きさ  (テーブル：x)  (テーブル：y)  位置。\r\n    テーブル：x=(テーブル：x)+(40+リスト幅)。\r\n    自分:データ！「|n  i|\r\n        「i%要素数==0」!なら「\r\n            レコード＝レコード！(n)    連結。\r\n        」そうでなければ「\r\n            レコード＝レコード！(n+\"\\t\")    連結。\r\n        」実行。\r\n        「((i-1)%要素数==要素数-1)」!なら「\r\n            lst!(レコード)  書く    改行。\r\n            レコード=\"\"。\r\n        」実行。\r\n    」それぞれ実行。\r\n    自分。\r\n」。\r\n\r\nテーブル：CSV表示＝「|  ;要素数  文字列  レコード  カラム名  tmp  space  s  幅  文字数  lst  件数  |\r\n    要素数=自分：フィールド名！要素数？。\r\n    文字数＝配列！作る。\r\n    レコード=\"\"。\r\n    カラム名＝\"\"。\r\n    フィールド名！「|n  i|\r\n        文字数！(自分！(n)  文字数カウント)    書く。\r\n    」それぞれ実行。\r\n    \r\n    フィールド名！「|n  i|\r\n        「i==要素数」!なら「\r\n            カラム名=カラム名！(n)    連結。\r\n        」そうでなければ「\r\n            カラム名=カラム名!(n+\",\")  連結。\r\n        」実行。\r\n    」それぞれ実行。\r\n    \r\n    \r\n    自分:データ！「|n  i|\r\n        tmp=自分！(n+\"\")  文字数カウント。\r\n        「(文字数！((i-1)%要素数+1)  読む)  <  tmp」!なら「\r\n            文字数！((i-1)%要素数+1)    (tmp)  上書き。\r\n        」実行。\r\n    」それぞれ実行。\r\n    \r\n    幅=0。\r\n    文字数！「|n|  幅＝幅+n。」それぞれ実行。\r\n    件数=(自分:データ！要素数？)/(フィールド名!要素数?)。\r\n    リスト幅=テーブル:_画面幅/2.5。\r\n    「(23+(幅+要素数)*7) <= (リスト幅)」!なら「リスト幅=(23+(幅+要素数)*7)」実行。\r\n    lst=テキストエリア！(カラム名)    作る  (リスト幅)  (リスト高さ)  大きさ  (テーブル：x)  (テーブル：y)  位置。\r\n    テーブル：x=(テーブル：x)+(40+リスト幅)。\r\n    自分:データ！「|n  i|\r\n        「i%要素数==0」!なら「\r\n            レコード＝レコード！(n)    連結。\r\n        」そうでなければ「\r\n            レコード＝レコード！(n+\",\")    連結。\r\n        」実行。\r\n        「((i-1)%要素数==要素数-1)」!なら「\r\n            lst!(レコード)  書く    改行。\r\n            レコード=\"\"。\r\n        」実行。\r\n    」それぞれ実行。\r\n    自分。\r\n」。\r\n\r\nテーブル：配列から作る＝「|  |\r\n    arg=_rest！作る。\r\n    field_arr=配列！作る。\r\n    arg!「|i|\r\n        field_arr!  (i!1  読む)    書く。\r\n    」それぞれ実行。\r\n    要素数=(arg!1  読む)!要素数?。\r\n    \r\n    ret=テーブル！(field_arr)  作る。\r\n    「|j|\r\n        「j>1」!なら「\r\n            arg!「|n  i|\r\n                ret!(n!(j)  読む)  書く。\r\n            」それぞれ実行。\r\n        」実行。\r\n    」！(要素数)    繰り返す。\r\n    ret。\r\n」。\r\n\r\nテーブル：フィールド名変更＝「|before  after|\r\n    「全部!(after!=undef)  (before!=undef)  本当」!なら「\r\n        フィールド名！「|n  i|\r\n            「n==before」!なら「num=i」実行。\r\n        」それぞれ実行。\r\n        フィールド名！(num)  (after)  上書き。\r\n        自分：フィールド名＝フィールド名。\r\n    」実行。\r\n    自分。\r\n」。\r\n\r\nテーブル：件数＝「|;ret|\r\n    ret=テーブル!\"件数\"  作る。\r\n    ret!((自分：データ！要素数？)/(フィールド名!要素数?))  書く。\r\n    ret。\r\n」。\r\n\r\nテーブル：数にする＝「\r\n    //num=(自分:データ！1  読む)＋0。\r\n    num=:window!(自分:データ！1  読む)  parseFloat.\r\n    num。\r\n」。\r\n\r\nテーブル：配列にする＝「\r\n    arr=配列!作る。\r\n    自分:データ!「|  n  |\r\n        arr!(n)  書く。\r\n    」それぞれ実行。\r\n    arr。\r\n」。\r\n\r\nテーブル：欠損値の置換＝「  |option|\r\n    「option==\"0置換\"」！なら「\r\n        自分:データ!「|n  i|\r\n            「n==\"\"」!なら「自分:データ！(i)  0  上書き。」実行。\r\n        」それぞれ実行。\r\n    」そうでなければ「option==\"平均値置換\"」なら「\r\n        自分:データ！「|n  i|\r\n            「n==\"\"」!なら「\r\n                tmp=自分！作る。\r\n                フィールド=フィールド名！(i%(フィールド名！要素数?))  読む。\r\n                自分:データ！(i)  (自分！(フィールド)    平均値    値読み出し)  上書き。\r\n            」実行。\r\n        」それぞれ実行。\r\n    」そうでなければ「\r\n        自分:データ！「|n  i|\r\n            「n==\"\"」!なら「\r\n                tmp=自分！作る。\r\n                フィールド=フィールド名！(i%(フィールド名！要素数?))  読む。\r\n                自分:データ！(i)  (自分！(フィールド)    中央値    値読み出し)  上書き。\r\n            」実行。\r\n        」それぞれ実行。\r\n    」実行。\r\n    自分。\r\n」。\r\n\r\nテーブル:check_fn＝「|;args  flag  res|\r\n    args=自分!(_rest)  getarg。\r\n    flag=0。\r\n    res=false。\r\n    args!「|n|\r\n        フィールド名!「|m|\r\n            「n==m」!なら「flag=flag+1」実行。\r\n        」それぞれ実行。\r\n    」それぞれ実行。\r\n    「flag==(args!要素数?)」!なら「res=true」実行。\r\n    res。\r\n」。\r\n\r\nテーブル:check_dt＝「|;res  |\r\n    res=true。\r\n    自分:データ!「|n  i|\r\n        「(n+\"\")!\"[^0-9０-９\\-\\.]\"    含む?」!なら「\r\n            res=false。\r\n        」実行。\r\n    」それぞれ実行。\r\n    res。\r\n」。\r\n\r\nテーブル:check_arg=「|  args  option  ;_max  flag|\r\n    「args!=undef」!なら「\r\n        arg_num=args!要素数?。\r\n        flag=true。\r\n        「option==\"freq\"」!なら「\r\n            「  (arg_num)<1」!なら「flag=false」実行。\r\n            「(arg_num)>=2」!なら「_max=args!2    読む」実行。\r\n            「(arg_num)>=3」!なら「_min=args!3    読む」実行。\r\n            「(arg_num)>=4」!なら「階級幅=args!4    読む」実行。\r\n            「階級幅!=undef」!なら「\r\n                「(階級幅+\"\")!\"[^0-9０-９\\.-]\"    含む?」!なら「flag=false」実行。\r\n            」実行。\r\n            「_min!=undef」!なら「\r\n                「(_min+\"\")!\"[^0-9０-９\\.-]\"    含む?」!なら「flag=false」実行。\r\n            」実行。\r\n            「_max!=undef」!なら「\r\n                「(_max+\"\")!\"[^0-9０-９\\.-]\"    含む?」!なら「flag=false」実行。\r\n            」実行。\r\n            「(自分!(args!1  読む)  check_fn)==false」!なら「flag=false」実行。\r\n            「flag==true」!なら「\r\n                「(自分!(args!1  読む)    射影  (args!1  読む)  check_dt)==false」!なら「flag=false」実行。\r\n            」実行。\r\n            \r\n        」そうでなければ「option==\"common\"」なら「\r\n            \r\n            「arg_num<1」!なら「flag=false」実行。\r\n            「(自分!(args)  check_fn)==false」!なら「flag=false」実行。\r\n            \r\n            「flag==true」!なら「\r\n                tmp=自分!(args)  射影。\r\n                str_arr=tmp:データ!「|  n  |    (n+\"\")!\"[^0-9０-９\\.-]\"  含む?」  選ぶ。\r\n                「(str_arr!要素数?)  >0  」！なら「flag==false」実行。\r\n            」実行。\r\n            \r\n        」そうでなければ「option==\"common1\"」なら「\r\n            \r\n            「arg_num<1」!なら「flag=false」実行。\r\n            \r\n            「(自分!(args!1    読む)  check_fn)==false」!なら「flag=false」実行。\r\n            \r\n        」そうでなければ「option==\"common2\"」なら「\r\n            \r\n            「arg_num<2」!なら「flag=false」実行。\r\n            「(自分!(args!1  読む)  check_fn)==false」!なら「flag=false」実行。\r\n            「(自分!(args!2  読む)  check_fn)==false」!なら「flag=false」実行。\r\n            \r\n        」そうでなければ「option==\"qn1\"」なら「\r\n            \r\n            「arg_num<1」!なら「flag=false」実行。\r\n            「(自分!(args!1  読む)  check_fn)==false」!なら「flag=false」実行。\r\n            「flag==true」!なら「\r\n                「(自分!(args!1  読む)    射影  (args!1  読む)  check_dt)==false」!なら「flag=false」実行。\r\n            」実行。\r\n        」そうでなければ「option==\"qn2\"」なら「\r\n            \r\n            「arg_num<2」!なら「flag=false」実行。\r\n            「(自分!(args!1  読む)  check_fn)==false」!なら「flag=false」実行。\r\n            「(自分!(args!2  読む)  check_fn)==false」!なら「flag=false」実行。\r\n            「flag==true」!なら「\r\n                「(自分!(args!1  読む)    射影  (args!1  読む)  check_dt)==false」!なら「flag=false」実行。\r\n                「(自分!(args!2  読む)    射影  (args!2  読む)  check_dt)==false」!なら「flag=false」実行。\r\n            」実行。\r\n            \r\n        」そうでなければ「option==\"qn3\"」なら「\r\n            \r\n            「arg_num<2」!なら「flag=false」実行。\r\n            「(自分!(args!1  読む)  check_fn)==false」!なら「flag=false」実行。\r\n            「(自分!(args!2  読む)  check_fn)==false」!なら「flag=false」実行。\r\n            「(自分!(args!3  読む)  check_fn)==false」!なら「flag=false」実行。\r\n            「flag==true」!なら「\r\n                「(自分!(args!1  読む)    射影  (args!1  読む)  check_dt)==false」!なら「flag=false」実行。\r\n                「(自分!(args!2  読む)    射影  (args!2  読む)  check_dt)==false」!なら「flag=false」実行。\r\n                「(自分!(args!3  読む)    射影  (args!2  読む)  check_dt)==false」!なら「flag=false」実行。\r\n            」実行。\r\n        」そうでなければ「option==\"qn\"」なら「\r\n            \r\n            「arg_num<1」!なら「flag=false」実行。\r\n            「(自分!(args)  check_fn)==false」!なら「flag=false」実行。\r\n            「flag==true」!なら「\r\n                「(自分!(args!1  読む)    射影  (args!1  読む)  check_dt)==false」!なら「flag=false」実行。\r\n                「(自分!(args!2  読む)    射影  (args!2  読む)  check_dt)==false」!なら「flag=false」実行。\r\n            」実行。\r\n            \r\n        」実行。\r\n    」そうでなければ「\r\n        flag=false。\r\n    」実行。\r\n    flag。\r\n」。\r\n\r\n//RDB演算の定義\r\nテーブル：射影＝「｜;fs  fn  ret    全数｜\r\n    fs=配列！作る。\r\n    fn=配列！作る。\r\n    要素数=フィールド名!要素数?。\r\n    引数=自分!(_rest)  getarg。\r\n    「自分!(引数)    check_fn」!なら「\r\n        引数！「｜f  i｜\r\n            「｜n｜\r\n                「(自分：フィールド名！（n）読む）＝＝f」！なら「fs！（n）書く。fn!  (f)  書く」実行。\r\n            」！（自分：フィールド名！要素数？）繰り返す。\r\n        」それぞれ実行。\r\n        ret＝テーブル！（fn）作る。\r\n        tmp=配列!作る。\r\n        fs!「|m  j|\r\n            自分:データ！「|n  i|\r\n                「((i-1)%要素数)==(m-1)」!なら「tmp!(n)  書く。」実行。\r\n            」それぞれ実行。\r\n        」それぞれ実行。\r\n        全数=自分!件数    数にする。\r\n        「|i|\r\n            「|j|\r\n                ret!(tmp!(i+((j-1)*全数))    読む)    書く。\r\n            」!(fs!要素数?)  繰り返す\r\n        」!(全数)    繰り返す。\r\n        ret。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n」。\r\n\r\nテーブル：選択＝「｜条件  ;ret｜\r\n    ret＝テーブル！（フィールド名）作る。\r\n    自分:データ！「｜r  i｜\r\n        番号=(i-1)%(フィールド名！要素数？)。\r\n        f＝フィールド名！（番号+1）読む。\r\n        「(r+\"\")!\"[^0-9０-９\\-\\.]\"    含む?」!なら「\r\n            s＝\"\"+f+\"＝\"+コード文字(0x22)+r+コード文字(0x22)+\"。\"。\r\n        」そうでなければ「\r\n            s＝\"\"+f+\"＝\"+r+\"。\"。\r\n        」実行。\r\n        \r\n        「(s!\"<\"  含む?)==false」！なら「\r\n            （s）！実行。\r\n        」実行。\r\n        //条件が正しければ戻り値にrを設定\r\n        「全部!（条件！実行）(i%(自分:フィールド名!要素数?)==0)  本当」！なら「\r\n            「|  n  |\r\n                ret!(自分:データ！(i-番号+(n-1))  読む)    書く。\r\n            」!(自分:フィールド名!要素数?)  繰り返す。\r\n        」実行。\r\n    」それぞれ実行。\r\n    ret。\r\n」。\r\n\r\nテーブル：結合=「|t  ;ret|\r\n    keyf=配列!作る。\r\n    keyn=配列!作る。\r\n    keye=配列!作る。\r\n    要素数m=自分：フィールド名！要素数？。\r\n    要素数t=t：フィールド名！要素数？。\r\n    「｜n｜f=自分：フィールド名！（n）読む。//  結合キーkの判別\r\n        「｜i｜f2＝t:フィールド名！（i）読む。\r\n            「f==f2」！なら「kf=f。kn=n。ki=i。keyf!(f)  書く。keyn!(n)  書く。keye!(i)    書く」実行。\r\n        」！（要素数t）繰り返す。\r\n    」！（要素数m）繰り返す。\r\n    途中データm=自分!(keyf)  射影。\r\n    途中データt=t!(keyf)  射影。\r\n    行数m=途中データm!件数    数にする。\r\n    行数t=途中データt!件数    数にする。\r\n    列数=keyf!要素数?。\r\n    \r\n    連結m=途中データm!(行数m)  (列数)  _レコード連結。\r\n    連結t=途中データt!(行数t)  (列数)  _レコード連結。\r\n    \r\n    一致レコード行番号配列=配列!  作る。\r\n    追加予定レコード行番号配列=配列!作る。\r\n    連結m!「|n  i|\r\n        連結t!「|m  j|\r\n            「(\"@@\"+n)==(\"@@\"+m)」!なら「\r\n                一致レコード行番号配列!(i)    書く。\r\n                追加予定レコード行番号配列!(j)  書く。\r\n            」実行。\r\n        」それぞれ実行。\r\n    」それぞれ実行。\r\n    \r\n    tmp_arr=配列！作る。\r\n    //tmp=t:フィールド名！作る。\r\n    //tmp=t:フィールド名！concat。\r\n    tmp=配列!作る。\r\n    t:フィールド名!「|n|\r\n        ｔｍｐ！（ｎ）    書く。\r\n    」それぞれ実行。\r\n    t:フィールド名!「|n|\r\n        keyf!「|m|\r\n            「n==m」!なら「tmp!(n)    消す」実行。\r\n        」それぞれ実行。\r\n    」それぞれ実行。\r\n    追加データ＝t!(tmp)    射影。\r\n    fn=(自分:フィールド名)!(tmp)  連結。\r\n    ret=テーブル!(fn)  作る。\r\n    一致レコード行番号配列!「|  n  i|\r\n        \r\n        「|j|\r\n            ret!(自分:データ!((n*要素数m)+(j-1)-(要素数-1))    読む)    書く。\r\n        」!(要素数m)  繰り返す。\r\n        \r\n        「|j|\r\n            番号=追加予定レコード行番号配列!(i)  読む。\r\n            ret!(追加データ!(((番号-1)*(追加データ:フィールド名!要素数?))+(j))  読む)  書く。\r\n        」!(追加データ:フィールド名!要素数?)  繰り返す。\r\n        \r\n    」それぞれ実行。\r\n    \r\n    \r\n    「全部！((ret:データ!要素数?)==0)  ((一致レコード行番号配列!要素数)!=0)    本当」！なら「\r\n        mn=(自分！要素数？)/要素数m。\r\n        tn=(t！要素数？)/要素数t。\r\n        time=0。\r\n        time2=0。\r\n        「|  cnt  |\r\n            「|i|  ret!(自分:データ!(i+time)  読む)  書く。」！(要素数m)  繰り返す。\r\n            「|i|  ret!(t!(i+time2)  読む)  書く。」！(要素数t)  繰り返す。\r\n            time2=time2+要素数t。\r\n            「time2==(t!要素数?)」!なら「time2=0」実行。\r\n            「(cnt%tn)==0」！なら「\r\n                time=time+要素数m。\r\n            」実行。\r\n        」!(mn*tn)    繰り返す。\r\n    」実行。\r\n    \r\n    ret。\r\n」。\r\n\r\nテーブル:_レコード連結=「|  行数    列数  |\r\n    ret=配列!作る。\r\n    「|i|\r\n        tmp=\"\"。\r\n        「|j|\r\n            「j!=(列数)」！なら    「\r\n                tmp=(tmp+\"\")!  ((自分:データ!(((i-1)*(列数))+j)  読む)+\"＠＠\")  連結。\r\n            」そうでなければ「\r\n                tmp=(tmp+\"\")!  ((自分:データ!(((i-1)*(列数))+j)  読む)+\"\")  連結。\r\n            」実行。\r\n        」!(列数)    繰り返す。\r\n        ret!(tmp)  書く。\r\n    」!(行数)  繰り返す。\r\n    ret\r\n」。\r\n\r\nテーブル:行列入れ替え＝「|;tmp  f|\r\n    tmp=配列！作る。\r\n    f=自分:フィールド名。\r\n    フィールド数=f！要素数？。\r\n    「|i|  tmp！(配列！  (f!(i)  読む)  作る)  書く」!(フィールド数)    繰り返す。\r\n    (自分:データ)!「|  n  i  |\r\n        index＝「(i%フィールド数)==0」!なら「フィールド数」そうでなければ「(i%フィールド数)」実行。\r\n        (tmp!(index)  読む)!  (n)  書く。\r\n    」それぞれ実行。\r\n    tmp!「|n  i|\r\n        「i==1」!なら「\r\n            n!「|m|  m+\"\"」    加工。\r\n            ret  =  テーブル!(n)  作る。\r\n        」そうでなければ「\r\n            ret:データ=(ret:データ)!(n)  連結。\r\n        」実行。\r\n    」それぞれ実行。\r\n    ret。\r\n」。\r\n\r\n\r\nテーブル：小さい順＝「|並び替えたいフィールド名;  ret  res|\r\n    「並び替えたいフィールド名==undef」!なら「\r\n        自分。\r\n    」そうでなければ「\r\n        並び替えたいフィールド名の番号＝０．\r\n        「｜番号｜\r\n            「（フィールド名！（番号）読む）＝＝並び替えたいフィールド名」！なら「\r\n                並び替えたいフィールド名の番号＝番号。\r\n            」実行。\r\n        」！（フィールド名！要素数？）繰り返す。\r\n        quick=「｜arr  num  num_f;  ret  n  p  left  right  v  p番号  v番号｜\r\n            ret=arr。\r\n            n＝arr！要素数？。\r\n            「(n/num_f)＞1」！なら「\r\n                p番号＝n-num_f。\r\n                left=配列！作る。\r\n                right=配列！作る。\r\n                「｜i;v番号｜\r\n                    v番号＝(i-1)*num_f。\r\n                    「(arr!(v番号+num)読む)<(arr!(p番号+num)読む)」！なら「\r\n                        「｜i｜\r\n                            left！（arr!(v番号+i)読む）書く\r\n                        」！（num_f）繰り返す。\r\n                    」そうでなければ「\r\n                        「｜i｜\r\n                            right！（arr!(v番号+i)読む）書く。\r\n                        」！（num_f）繰り返す。\r\n                    」実行。\r\n                」！（n/num_f-1）繰り返す。\r\n                p＝配列！作る。\r\n                「|i|p!(arr!(p番号+i)読む)書く」！（num_f）繰り返す。\r\n                ret＝配列！作る（！（left）(num)(num_f)quick）（p）（！（right）(num)(num_f)quick）連結。\r\n            」実行。\r\n            ret。\r\n        」。\r\n        res=!(自分:データ)  (並び替えたいフィールド名の番号)(自分：フィールド名！要素数？)quick。\r\n        \r\n        ret=テーブル！(フィールド名)作る。\r\n        「|n|ret!(res!(n)読む)書く」！（res!要素数？）繰り返す。\r\n        ret。\r\n    」実行。\r\n」。\r\n\r\nテーブル：大きい順＝「|並び替えたいフィールド名;  ret  res|\r\n    「並び替えたいフィールド名==undef」!なら「\r\n        自分。\r\n    」そうでなければ「\r\n        並び替えたいフィールド名の番号＝０．\r\n        「｜番号｜\r\n            「（フィールド名！（番号）読む）＝＝並び替えたいフィールド名」！なら「\r\n                並び替えたいフィールド名の番号＝番号。\r\n            」実行。\r\n        」！（フィールド名！要素数？）繰り返す。\r\n        quick=「｜arr  num  num_f;  ret  n  p  left  right  v  p番号  v番号｜\r\n            ret=arr。\r\n            n＝arr！要素数？。\r\n            「(n/num_f)＞1」！なら「\r\n                p番号＝n-num_f。\r\n                left=配列！作る。\r\n                right=配列！作る。\r\n                「｜i;v番号｜\r\n                    v番号＝(i-1)*num_f。\r\n                    「(arr!(v番号+num)読む)>(arr!(p番号+num)読む)」！なら「\r\n                        「｜i｜\r\n                            left！（arr!(v番号+i)読む）書く\r\n                        」！（num_f）繰り返す。\r\n                    」そうでなければ「\r\n                        「｜i｜\r\n                            right！（arr!(v番号+i)読む）書く\r\n                        」！（num_f）繰り返す。\r\n                    」実行。\r\n                」！（n/num_f-1）繰り返す。\r\n                p＝配列！作る。\r\n                「|i|p!(arr!(p番号+i)読む)書く」！（num_f）繰り返す。\r\n                ret＝配列！作る（！（left）(num)(num_f)quick）（p）（！（right）(num)(num_f)quick）連結。\r\n            」実行。\r\n            ret。\r\n        」。\r\n        res=!(自分:データ)  (並び替えたいフィールド名の番号)(自分：フィールド名！要素数？)quick.\r\n        ret=テーブル！(フィールド名)作る。\r\n        「|n|ret!(res!(n)読む)書く」！（res!要素数？）繰り返す。\r\n        ret。\r\n    」実行。\r\n」。\r\n\r\nテーブル：内部_重複なし＝「|;ret  flag|\r\n    f=_rest!1  読む。\r\n    arr=((自分！(f)    射影):データ)!  \"\"  消す。\r\n    ret＝テーブル！(f)    作る。\r\n    flag=0。\r\n    arr!「|n  i|\r\n        ret:データ!「|m  j|\r\n            「n==m」!なら「flag=1」実行。\r\n        」それぞれ実行。\r\n        「flag==0」!なら「ret!(n)  書く。」実行。\r\n        flag=0。\r\n    」それぞれ実行。\r\n    ret。\r\n」。\r\n\r\nテーブル：重複なし＝「|;ret  flag|\r\n    列数=自分:フィールド名！要素数？。\r\n    行数=(自分:データ!要素数?)/列数。\r\n    res=テーブル!(自分:フィールド名)    作る。\r\n    連結データ配列=配列!作る。\r\n    重複削除配列=配列!作る。\r\n    「|i|\r\n        tmp=\"\"。\r\n        「|j|\r\n            「j!=(列数)」！なら    「\r\n                tmp=(tmp+\"\")!  ((自分!(((i-1)*(列数))+j)  読む)+\"＠＠\")  連結。\r\n            」そうでなければ「\r\n                tmp=(tmp+\"\")!  ((自分!(((i-1)*(列数))+j)  読む)+\"\")  連結。\r\n            」実行。\r\n        」!(列数)    繰り返す。\r\n        連結データ配列!(tmp)  書く。\r\n    」!(行数)  繰り返す。\r\n    連結データ配列!「|n|\r\n        「i==1」!なら「\r\n            重複削除配列!(n)  書く。\r\n        」そうでなければ「\r\n            flag=0。\r\n            重複削除配列!「|m|\r\n                「m==n」!なら「flag=1」実行。\r\n            」それぞれ実行。\r\n            「flag==0」!なら「重複削除配列!(n)  書く」実行。\r\n            flag=0。\r\n        」実行。\r\n    」それぞれ実行。\r\n    res=テーブル!(自分:フィールド名)  作る。\r\n    重複削除配列!「|n|\r\n        tmp=n!\"＠＠\"    分割。\r\n        tmp!「|m|\r\n            //res!(m)  書く。\r\n            「(m+\"\")!\"[^0-9０-９\\-\\.]\"    含む?」!なら「\r\n                res!(m)  書く。\r\n            」そうでなければ「\r\n                //res!(m)  書く。\r\n                res!(:window！(m)parseFloat)  書く。\r\n            」実行。\r\n        」それぞれ実行。\r\n    」それぞれ実行。\r\n    res。\r\n」。\r\n\r\nテーブル：追加＝「|  |\r\n    フィールド数=自分:フィールド名!要素数?。\r\n    追加数=_rest!要素数?。\r\n    _rest！「|n  i|\r\n        「自分!(n)配列?」！なら「\r\n            追加数=n!要素数？。\r\n            n!「|m|\r\n                自分！(m)  書く。\r\n            」それぞれ実行。\r\n        」そうでなければ「\r\n            「i<=フィールド数」!なら「\r\n                自分！(n)  書く。\r\n            」実行。\r\n        」実行。\r\n    」それぞれ実行。\r\n    「全部!((フィールド数-追加数)>0)  (追加数!=0)  本当」！なら「\r\n        「\r\n            自分!\"\"    書く。\r\n        」!(フィールド数-追加数)    繰り返す。\r\n    」実行。\r\n    自分。\r\n」。\r\n\r\nテーブル：レコード取り出し＝「｜key  num  ;ret｜\r\n    ret＝テーブル！（フィールド名）作る。\r\n    要素数＝フィールド名!要素数？。\r\n    自分：データ！「｜r  i｜\r\n        「全部!(key==ｒ)  ((i-num)%要素数==0)  本当」!なら「\r\n            「|j|\r\n                ret!(自分！(i-num+(j))  読む)    書く。\r\n            」！(要素数)    繰り返す。\r\n        」実行。\r\n    」それぞれ実行。\r\n    ret。\r\n」。\r\n\r\nテーブル：集計＝「|  f    con  ;cnt|\r\n    ret=テーブル！(f+\"_集計\")  作る。\r\n    cnt=0。\r\n    arr=自分！(f)  射影。\r\n    arr：データ!「|n  i|\r\n        「n==con」!なら「cnt=cnt+1」実行。\r\n    」それぞれ実行。\r\n    ret!(cnt)    書く。\r\n    ret。\r\n」。\r\n\r\nテーブル：集計2＝「|  f1  con1  f2  con2  ;cnt|\r\n    ret=テーブル！(f1+\"_集計\")  作る。\r\n    cnt=0。\r\n    f1_arr=自分！(f1)  射影。\r\n    f2_arr=自分！(f2)  射影。\r\n    要素数=(f1_arr:フィールド名)!要素数?。\r\n    「|i;  v1  v2|\r\n        v1=f1_arr：データ!(i)    読む。\r\n        v2=f2_arr：データ!(i)  読む。\r\n        「  全部!((v1+\"\")==(con1+\"\"))  ((v2+\"\")==(con2+\"\"))    本当」！なら「\r\n            cnt=cnt+1。\r\n        」実行。\r\n    」!(f1_arr!件数    数にする)    繰り返す。\r\n    ret!(cnt)    書く。\r\n    ret。\r\n」。\r\n\r\nテーブル:_引数設定＝「\r\n    args=配列!作る。\r\n    自分:フィールド名!「|  n  |\r\n        args!(n)  書く。\r\n    」それぞれ実行。\r\n    型配列=グラフ!(自分)  型判定。\r\n    型配列!「|  n  |\r\n        args!(n)  消す。\r\n    」それぞれ実行。\r\n    args。\r\n」。\r\n\r\n//データ分析機能の定義\r\nテーブル：最大値＝「|;ret  f1_arr  args  arg_num max|\r\n    args=自分!(_rest)  getarg。\r\n    「args==undef」!なら「\r\n        args=自分!_引数設定。\r\n    」実行。\r\n    \r\n    「自分!(args)  \"common\"  check_arg」!なら「\r\n        ret=テーブル!作る。\r\n        args!「|  n  i |\r\n            ret:フィールド名!(n+\"_最大値\")  書く。\r\n            f1_arr=自分!(n)  射影。\r\n            f1_arr：データ!\"\"  消す。\r\n            f1_arr：データ!「| m j |\r\n                「j==1」!なら「max=m」実行。\r\n                「max < m」!なら「 max=m」実行。\r\n            」それぞれ実行。\r\n            ret!(max)  書く。\r\n        」それぞれ実行。\r\n        ret。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n」。\r\n\r\nテーブル：最小値＝「|;ret  f1_arr  args  arg_num min|\r\n    args=自分!(_rest)  getarg。\r\n    「args==undef」!なら「\r\n        args=自分!_引数設定。\r\n    」実行。\r\n    \r\n    「自分!(args)  \"common\"  check_arg」!なら「\r\n        ret=テーブル!作る。\r\n        args!「|  n  i |\r\n            ret:フィールド名!(n+\"_最大値\")  書く。\r\n            f1_arr=自分!(n)  射影。\r\n            f1_arr：データ!\"\"  消す。\r\n            f1_arr：データ!「| m j |\r\n                「j==1」!なら「min=m」実行。\r\n                「min > m」!なら「 min=m」実行。\r\n            」それぞれ実行。\r\n            ret!(min)  書く。\r\n        」それぞれ実行。\r\n        ret。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n」。\r\n\r\nテーブル：最頻値＝「|  ;freq_arr  _max_rec  args  arg_num _max|\r\n    args=自分!(_rest)  getarg。\r\n    「自分!(args)  \"common1\"  check_arg」!なら「\r\n        f1=args!1  読む。\r\n        freq_arr=自分！(f1)  度数。\r\n        _max=freq_arr!\"度数\"  最大値  数にする。\r\n        _max_rec=freq_arr！(_max)  2  レコード取り出し。\r\n        ret=テーブル！((f1)+\"_最頻値\")  \"度数\"  作る。\r\n        _max_rec：データ！「|  val  cnt  |\r\n            ret!(val)  書く。\r\n        」それぞれ実行。\r\n        ret。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n」。\r\n\r\nテーブル：合計値＝「|;args  f1  ret  sum    |\r\n    args=自分!(_rest)  getarg。\r\n    「args==undef」!なら「\r\n        args=自分!_引数設定。\r\n    」実行。\r\n    \r\n    「自分!(args)  \"common\"  check_arg」!なら「\r\n        ret=テーブル!作る。\r\n        args!「|  n  i  |\r\n            フィールド番号=自分！(ｎ)  フィールド番号取得。\r\n            ret:フィールド名！(n+\"_合計値\")  書く。\r\n            sum=0。\r\n            「フィールド番号！=undef」！なら「\r\n                「|i|\r\n                    「(自分：データ！(フィールド番号+(i-1)*(フィールド名!要素数?))  読む)!=\"NA\"」!なら「\r\n                        sum=sum+(自分：データ！(フィールド番号+(i-1)*(フィールド名!要素数?))  読む)  。\r\n                    」実行。\r\n                」！((自分：データ！要素数?)/要素数)  繰り返す。\r\n                ret!(sum)  書く。\r\n            」実行。\r\n        」それぞれ実行。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n    ret。\r\n」。\r\n\r\nテーブル：平均値＝「|  ;  args  f1  ret  sum  レコード数  フィールド番号|\r\n    args=自分!(_rest)  getarg。\r\n    「args==undef」!なら「\r\n        args=自分!_引数設定。\r\n    」実行。\r\n    \r\n    「自分!(args)  \"common\"  check_arg」!なら「\r\n        ret=テーブル!作る。\r\n        args!「|  n  i  |\r\n            フィールド番号=自分！(n)  フィールド番号取得。\r\n            ret:フィールド名！(n+\"_平均値\")  書く。\r\n            レコード数=(自分：データ！要素数?)/(フィールド名!要素数?)。\r\n            sum=0。\r\n            「フィールド番号！=undef」！なら「\r\n                「|i|\r\n                    「(自分:データ！(フィールド番号+(i-1)*(フィールド名!要素数?))  読む)==\"\"」！なら「\r\n                        レコード数=レコード数-1。\r\n                    」そうでなければ「\r\n                        //sum=sum+(自分:データ！(フィールド番号+(i-1)*(フィールド名!要素数?))  読む)  。\r\n                        sum=sum+(:window!(自分:データ！(フィールド番号+(i-1)*(フィールド名!要素数?))  読む)  parseFloat)。\r\n                    」実行。\r\n                」！((自分：データ！要素数?)/要素数)  繰り返す。\r\n                ret!(sum/(レコード数))  書く。\r\n            」実行。\r\n        」それぞれ実行。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n    ret。\r\n」。\r\n\r\nテーブル：偏差＝「|  ;args  f1    f1_arr  dev_arr  ret  ave|\r\n    args=自分!(_rest)  getarg。\r\n    「自分!(args)  \"qn1\"  check_arg」!なら「\r\n        f1=args!1    読む。\r\n        f1_arr=自分！(f1)  射影。\r\n        f1_arr:データ=f1_arr:データ!\"\"    消す。\r\n        ave=f1_arr！(f1)  平均値  値読み出し。\r\n        dev_arr=配列！作る。\r\n        f1_arr:データ！「｜n｜\r\n            「n!=\"NA\"」!なら「\r\n                dev_arr!(n-ave)  書く。\r\n            」実行。\r\n        」それぞれ実行。\r\n        ret=テーブル！((f1)+\"_偏差\")  作る。\r\n        dev_arr！「|  val  |\r\n            ret!(val)  書く。\r\n        」それぞれ実行。\r\n        ret。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n」。\r\n\r\nテーブル：分散＝「|;ret  sum  data_array  ave  dev  disp  args  f1  |\r\n    args=自分!(_rest)  getarg。\r\n    「自分!(args)  \"qn1\"  check_arg」!なら「\r\n        f1=args!1    読む。\r\n        data_array＝自分！(f1)  射影。\r\n        data_array:データ=data_array:データ!\"\"  消す。\r\n        sum=data_array！(f1)  合計値    値読み出し。\r\n        ave=sum/(data_array:データ!要素数?)。\r\n        dev=0.\r\n        data_array:データ！「｜n｜\r\n            dev  =  dev  +  (((n)-(ave))*((n)-(ave)))。\r\n        」それぞれ実行。\r\n        disp=0.\r\n        disp  =  dev/(data_array：データ！要素数?)。\r\n        ret=テーブル！((f1)+\"_分散\")  作る。\r\n        ret!(disp)  書く。\r\n        ret。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n」。\r\n\r\nテーブル：不偏分散＝「|;data_array  sum  要素数  ave  dev  disp  args  f1|\r\n    args=自分!(_rest)  getarg。\r\n    「自分!(args)  \"qn1\"  check_arg」!なら「\r\n        f1=args!1    読む。\r\n        data_array＝自分！(f1)  射影。\r\n        data_array:データ=data_array:データ!\"\"  消す。\r\n        sum=data_array！(f1)  合計値    値読み出し。\r\n        要素数＝data_array：データ！要素数?。\r\n        ave=sum/要素数。\r\n        dev=0.\r\n        data_array:データ！「｜n｜\r\n            dev  =  dev  +  (((n)-(ave))*((n)-(ave)))。\r\n        」それぞれ実行。\r\n        disp=0.\r\n        disp  =  (要素数/(要素数-1))*dev/要素数。\r\n        ret=テーブル！((f1)+\"_不偏分散\")  作る。\r\n        ret!(disp)  書く。\r\n        ret。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n」。\r\n\r\nテーブル：共分散＝「|;args  f1  f2  f1_dev_arr  f2_dev_arr  total  ret  cav  args  |\r\n    args=自分!(_rest)  getarg。\r\n    「自分!(args)  \"qn2\"  check_arg」!なら「\r\n        f1=args!1    読む。\r\n        f2=args!2    読む。\r\n        f1_dev_arr=自分！(f1)  偏差。\r\n        f2_dev_arr=自分！(f2)  偏差。\r\n        total＝0。\r\n        f1_dev_arr:データ！「|  val  cnt  |\r\n            total=total+(val*(f2_dev_arr：データ!  (cnt)  読む))。\r\n        」それぞれ実行。\r\n        \r\n        cav=total/(f1_dev_arr:データ!要素数?)。\r\n        ret=テーブル！((f1)+\"&\"+(f2)+\"_共分散\")  作る。\r\n        ret!(cav)    書く。\r\n        ret。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n」。\r\n\r\nテーブル：不偏共分散＝「|;args  f1  f2  f1_dev_arr  f2_dev_arr  要素数  total  cav  ret|\r\n    args=自分!(_rest)  getarg。\r\n    「自分!(args)  \"qn2\"  check_arg」!なら「\r\n        f1=args!1    読む。\r\n        f2=args!2    読む。\r\n        f1_dev_arr=自分！(f1)  偏差。\r\n        f2_dev_arr=自分！(f2)  偏差。\r\n        要素数＝f1_dev_arr：データ!要素数?。\r\n        total＝0。\r\n        f1_dev_arr:データ！「|  val  cnt  |\r\n            total=total+(val*(f2_dev_arr：データ!  (cnt)  読む))。\r\n        」それぞれ実行。\r\n        \r\n        cav=(要素数/(要素数-1))*(total/要素数)。\r\n        ret=テーブル！((f1)+\"&\"+(f2)+\"_不偏共分散\")  作る。\r\n        ret!(cav)    書く。\r\n        ret。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n」。\r\n\r\nテーブル：相関係数＝「|;  f1  f2  tmp1  tmp2  cav  st_dev1  st_dev2  cor  ret  |\r\n    args=自分!(_rest)  getarg。\r\n    args2=args!concat。\r\n    //args2=args!作る。\r\n    「自分!(args)  \"qn\"  check_arg」!なら「\r\n        f1=args!1    読む。\r\n        f2=args!2    読む。\r\n        tmp1  =  配列！作る。\r\n        args!「|  f1  |\r\n            tmp2  =  配列！作る。\r\n            args！「|  f2  |\r\n                cav=自分！(f1)  (f2)  共分散  値読み出し。\r\n                st_dev1=自分！(f1)  標準偏差  値読み出し。\r\n                st_dev2=自分！(f2)  標準偏差  値読み出し。\r\n                cor=cav/(st_dev1*st_dev2)。\r\n                tmp2!(cor)    書く。\r\n            」それぞれ実行。\r\n            tmp1!(tmp2)    書く。\r\n        」それぞれ実行。\r\n        \r\n        ret=テーブル！(args!1  \"\"  挿入)  作る。\r\n        tmp1！「|  f  i  |\r\n            ret!(f!1  (args!(i+1)    読む)  挿入)  追加。\r\n        」それぞれ実行。\r\n        ret。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n」。\r\n\r\nテーブル：不偏共分散＝「|;args  f1  f2  f1_dev_arr  f2_dev_arr  要素数  total  cav  ret|\r\n    args=自分!(_rest)  getarg。\r\n    「自分!(args)  \"qn2\"  check_arg」!なら「\r\n        f1=args!1    読む。\r\n        f2=args!2    読む。\r\n        f1_dev_arr=自分！(f1)  偏差。\r\n        f2_dev_arr=自分！(f2)  偏差。\r\n        要素数＝f1_dev_arr：データ!要素数?。\r\n        total＝0。\r\n        f1_dev_arr:データ！「|  val  cnt  |\r\n            total=total+(val*(f2_dev_arr：データ!  (cnt)  読む))。\r\n        」それぞれ実行。\r\n        \r\n        cav=(要素数/(要素数-1))*(total/要素数)。\r\n        ret=テーブル！((f1)+\"&\"+(f2)+\"_不偏共分散\")  作る。\r\n        ret!(cav)    書く。\r\n        ret。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n」。\r\n\r\nテーブル：_相関係数＝「|f1  f2;  tmp1  tmp2  cav  st_dev1  st_dev2  cor  ret  |\r\n    cav=自分！(f1)  (f2)  共分散  値読み出し。\r\n    st_dev1=自分！(f1)  標準偏差  値読み出し。\r\n    st_dev2=自分！(f2)  標準偏差  値読み出し。\r\n    cor=cav/(st_dev1*st_dev2)。\r\n    cor。\r\n」。\r\n\r\nテーブル：偏相関係数＝「|;  f1  f2  tmp1  tmp2  cav  st_dev1  st_dev2  cor  ret  |\r\n    args=自分!(_rest)  getarg。\r\n    args2=args!concat。\r\n    //args2=args!作る。\r\n    「自分!(args)  \"qn3\"  check_arg」!なら「\r\n        f1=args!1    読む。\r\n        f2=args!2    読む。\r\n        f3=args!3    読む。\r\n        cor1=自分!(f2)  (f3)    _相関係数。\r\n        cor2=自分!(f1)  (f2)    _相関係数。\r\n        cor3=自分!(f1)  (f3)    _相関係数。\r\n        \r\n        cor2=0.706。\r\n        cor3=0.870。\r\n        cor1=0.302。\r\n        \r\n        r=(cor2-(cor1*cor3))/(sqrt(1-((cor1)!  2  pow))*sqrt(1-((cor3)!  2  pow)))。\r\n        ret=テーブル！(ｆ１＋”&”+f2+\"&\"+f3+\"_偏相関係数\")  作る。\r\n        ret!(r)  書く。\r\n        ret。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n」。\r\n\r\nテーブル：標準偏差＝「|;f1  disp  sdev  ret  args|\r\n    args=自分!(_rest)  getarg。\r\n    「自分!(args)  \"qn1\"  check_arg」!なら「\r\n        f1=args!1    読む。\r\n        disp=自分！(f1)  分散    値読み出し。\r\n        sdev=sqrt(disp)。\r\n        ret=テーブル！((f1)+\"_標準偏差\")  作る。\r\n        ret!(sdev)  書く。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n」。\r\n\r\nテーブル：不偏標準偏差＝「|;f1  disp  sdev  ret  args|\r\n    args=自分!(_rest)  getarg。\r\n    「自分!(args)  \"qn1\"  check_arg」!なら「\r\n        f1=args!1    読む。\r\n        disp=自分！(f1)  不偏分散    値読み出し。\r\n        sdev=sqrt(disp)。\r\n        ret=テーブル！((f1)+\"_不偏標準偏差\")  作る。\r\n        ret!(sdev)  書く。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n」。\r\n\r\nテーブル：中央値＝「|;f1  data_arr  要素数  中心  median  disp  sdev  ret  args|\r\n    args=自分!(_rest)  getarg。\r\n    「args==undef」!なら「\r\n        args=自分!_引数設定。\r\n    」実行。\r\n    \r\n    「自分!(args)  \"common\"  check_arg」!なら「\r\n        ret=テーブル!作る。\r\n        args!「|  n  i  |\r\n            data_arr＝自分！(n)    小さい順  (n)  射影。\r\n            data_arr:データ=data_arr:データ!\"\"  消す。\r\n            要素数=data_arr:データ!要素数?。\r\n            ret:フィールド名！(n+\"_中央値\")  書く。\r\n            「要素数!=0」!なら「\r\n                中心=ceil(要素数/2)。\r\n                「(要素数%2)==0」!なら「\r\n                    median=((data_arr:データ！(中心)    読む)+(data_arr！(中心+1)  読む))/2。\r\n                」そうでなければ「\r\n                    median=data_arr:データ！(中心)  読む。\r\n                」実行。\r\n                ret!(median)  書く。\r\n            」そうでなければ「\r\n                ret!(undef)  書く。\r\n            」実行。\r\n        」それぞれ実行。\r\n        ret。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n」。\r\n\r\nテーブル:第１四分位数＝「|;args  f1  data_arr  要素数    中心  data  qua1  ret  |\r\n    args=自分!(_rest)  getarg。\r\n    「args==undef」!なら「\r\n        args=自分!_引数設定。\r\n    」実行。\r\n    \r\n    「自分!(args)  \"common\"  check_arg」!なら「\r\n        ret=テーブル!作る。\r\n        args!「|  n  i  |\r\n            data_arr＝自分！(n)    小さい順  (n)  射影。\r\n            data_arr:データ=data_arr:データ!\"\"  消す。\r\n            要素数=data_arr：データ!要素数?。\r\n            中心=floor(要素数/2)。\r\n            data=テーブル!(n)  作る。\r\n            「|i|    data!(data_arr:データ!(i)  読む)  書く」!(中心)    繰り返す。\r\n            qua1  =  data!  (n)  中央値    値読み出し。\r\n            ret:フィールド名！((n)+\"_第1四分位数\")  書く。\r\n            ret!(qua1)    書く。\r\n        」それぞれ実行。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n」。\r\n\r\nテーブル:第3四分位数＝「|;args  f1  data_arr  要素数    中心  data  qua3  ret  |\r\n    args=自分!(_rest)  getarg。\r\n    「args==undef」!なら「\r\n        args=自分!_引数設定。\r\n    」実行。\r\n    \r\n    「自分!(args)  \"common\"  check_arg」!なら「\r\n        ret=テーブル!作る。\r\n        args!「|  n  i  |\r\n            data_arr＝自分！(n)    大きい順  (n)  射影。\r\n            data_arr:データ=data_arr:データ!\"\"  消す。\r\n            要素数=data_arr:データ!要素数?。\r\n            中心=floor(要素数/2)。\r\n            data=テーブル!(n)  作る。\r\n            「|i|    data!(data_arr:データ!(i)  読む)  書く」!(中心)    繰り返す。\r\n            qua3  =  data!  (n)  中央値    値読み出し。\r\n            ret:フィールド名！(n+\"_第3四分位数\")  書く。\r\n            ret!(qua3)    書く。\r\n        」それぞれ実行。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n」。\r\n\r\nテーブル：度数＝「|;  args  arg_num      キー達    値達    ret  f1_arr  件数    |\r\n    args=自分!(_rest)  getarg。\r\n    「自分!(args)  \"common1\"  check_arg」!なら「\r\n        arg_num=args!要素数?。\r\n        f1=args!1  読む。\r\n        キー達＝配列！作る。\r\n        値達=配列！作る。\r\n        f1の番号＝0。\r\n        f1_arr=自分!(f1)  射影。\r\n        f1_arr：データ=f1_arr：データ!\"\"  消す。\r\n        件数=f1_arr：データ!要素数?。\r\n        階級=配列！作る。\r\n        カウント=配列！作る。\r\n        フィールド名要素数＝自分：フィールド名！要素数？。\r\n        \r\n        文字コード配列にする＝「｜str;ret｜\r\n            ret=配列！作る。\r\n            (str+\"\")!\"\"分割「｜要素｜\r\n                ret!(要素！文字コード)書く。\r\n            」それぞれ実行。\r\n            ret。\r\n        」。\r\n        文字列にする＝「｜文字コード配列;ret｜\r\n            ret=\"\"。\r\n            文字コード配列！「｜要素｜\r\n                ret＝（ret！（（要素）！コード文字）連結）。\r\n            」それぞれ実行。\r\n            ret。\r\n        」。\r\n        \r\n        キー達：探す＝「｜キー；結果    ｜\r\n            結果＝０。\r\n            文字コード配列の比較＝「｜左    右｜\r\n                (\"\"+左)==(\"\"+右)\r\n            」。\r\n            「｜番号｜\r\n                「！（自分！（番号）読む）（キー）文字コード配列の比較」！なら「結果＝番号」実行。\r\n            」！（自分！要素数？）繰り返す。\r\n            結果。\r\n        」。\r\n        \r\n        「｜番号｜\r\n            「（フィールド名！（番号）読む）＝＝f1」！なら「\r\n                f1の番号＝番号。\r\n            」実行。\r\n        」！（フィールド名要素数）繰り返す。\r\n        \r\n        「｜番号；値    キー番号｜\r\n            「(自分：データ！（フィールド名要素数*(番号-1)+f1の番号）読む)!=\"\"」！なら「\r\n                値＝!(自分：データ！（フィールド名要素数*(番号-1)+f1の番号）読む)文字コード配列にする。\r\n                「（キー達！（値）探す）＝＝０」！なら「キー達！（値）書く。値達！０    書く。」実行。\r\n                キー番号＝キー達！（値）探す。\r\n                値達！（キー番号）（（値達！（キー番号）読む）＋１）上書き。\r\n            」実行。\r\n        」！（（自分：データ！要素数？）/（フィールド名要素数））繰り返す。\r\n        \r\n        ret=テーブル！(f1)  \"度数\"    作る。\r\n        「｜番号｜\r\n            ret!(！(キー達！（番号）読む)文字列にする）書く。\r\n            ret!（値達！（番号）読む）書く。\r\n        」！（キー達！要素数？）繰り返す。\r\n        ret。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n」。\r\n\r\nテーブル：度数分布＝「｜；ret  args  arg_num  件数  f1_arr  _min  _max  階級幅  f1  flag｜\r\n    args=自分!(_rest)  getarg。\r\n    「自分!(args)  \"freq\"  check_arg」!なら「\r\n        arg_num=args!要素数?。\r\n        f1=args!1  読む。\r\n        「(arg_num)>=2」!なら「_max=args!2    読む」実行。\r\n        「(arg_num)>=3」!なら「_min=args!3    読む」実行。\r\n        「(arg_num)>=4」!なら「階級幅=args!4    読む」実行。\r\n        f1の番号=0。\r\n        f1_arr=自分!(f1)  射影。\r\n        f1_arr:データ=f1_arr:データ!\"\"  消す。\r\n        件数=f1_arr:データ!要素数?。\r\n        階級=配列！作る。\r\n        カウント=配列！作る。\r\n        「_min==undef」！なら「_min=f1_arr!(f1) 最小値 数にする。」実行。\r\n        「_max==undef」！なら「_max=f1_arr!(f1) 最大値 数にする。」実行。\r\n        //「_min==undef」！なら「_min=:window!(f1_arr：データ!最小)  parseFloat。」実行。\r\n        //「_max==undef」！なら「_max=:window!(f1_arr：データ!最大)  parseFloat。」実行。\r\n        「_max > _min」!なら「\r\n            min桁数=floor(log(_min)+1)。\r\n            「min桁数 > 0」!なら「\r\n                _min= floor(_min/(10!(min桁数-1) pow))*(10!(min桁数-1) pow)。\r\n            」そうでなければ「\r\n                _min=0。\r\n            」実行。\r\n            max桁数=floor(log(_max)+1)。\r\n            _min= floor(_min/(10!(min桁数-1) pow))*(10!(min桁数-1) pow)。\r\n            _max= ceil(_max/(10!(max桁数-1) pow))*(10!(max桁数-1) pow)。\r\n            sum=_max-_min.\r\n            「階級幅  ==  undef」!なら「\r\n                「sum > 1 」！なら「\r\n                    階級数=sum/(10!(floor(log(sum))) pow)。\r\n                」そうでなければ「\r\n                    階級数=10。\r\n                」実行。\r\n                桁数=floor(log(sum/階級数)+1)．\r\n                「桁数  <=  0」!なら「桁数=桁数-1」実行。\r\n                「_max >= 10 」!なら「\r\n                    階級幅=ceil((sum/階級数)*桁数)/(桁数)．\r\n                」そうでなければ「\r\n                    階級幅=ceil((sum/階級数)*10*桁数)/(10*桁数)．\r\n                」実行。\r\n            」そうでなければ「\r\n                階級数＝round(sum/階級幅)。\r\n            」実行。\r\n            ret=テーブル！\"階級\"  \"度数\"作る。\r\n            「|  n  |\r\n                「n!=階級数」!なら「\r\n                    階級!(配列!  ((round((_min+階級幅*(n-1))*100)/100+\"\")!(\"~\"+(round((_min+階級幅*n)*10)/10))  連結)  作る)  書く。\r\n                」そうでなければ「\r\n                    階級!(配列!  ((round((_min+階級幅*(n-1))*100)/100+\"\")!(\"~\"+(_max))  連結)  作る)  書く。\r\n                」実行。\r\n                (階級!(n)  読む)!  0  書く。\r\n                「n==1」！なら「\r\n                    カウント!(_min+階級幅*(n-1))  書く。\r\n                」そうでなければ「\r\n                    「(_min+階級幅*(n-1)) < _max」!なら「\r\n                        カウント!(_min+階級幅*(n-1))  書く。\r\n                    」そうでなければ「\r\n                        カウント!(_max) 書く。\r\n                    」実行。\r\n                」実行。\r\n            」！(階級数)  繰り返す。\r\n            \r\n            f1_arr：データ!「|  n  i  |\r\n                カウント！「|  m  j  |\r\n                    「j==階級数」！なら「\r\n                        「全部！((m  <=  n))  ((m+階級幅)  >=  n)  本当」!なら「\r\n                            (階級！(j)  読む)!  2    (((階級！(j)  読む)!  2  読む)+1)  上書き。\r\n                        」実行。\r\n                    」そうでなければ「\r\n                        「全部！((m  <=  n))  ((m+階級幅)  >  n)  本当」!なら「\r\n                            (階級！(j)  読む)!  2    (((階級！(j)  読む)!  2  読む)+1)  上書き。\r\n                        」実行。\r\n                    」実行。\r\n                」それぞれ実行。\r\n            」それぞれ実行。\r\n            階級!「|  n  |\r\n                n!「|val|  ret!(val)  書く。」それぞれ実行。\r\n            」それぞれ実行。\r\n            ret。\r\n        」そうでなければ「\r\n            undef。\r\n        」実行。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n」。\r\n\r\nテーブル：度数分布表＝「|  ;  args  arg_num  f1  freq  frec_sum  frecdist_sum  ret  ｜\r\n    args=自分!(_rest)  getarg。\r\n    「自分!(args)  \"freq\"  check_arg」!なら「\r\n        arg_num=args!要素数?。\r\n        f1=args!1  読む。\r\n        「(arg_num)>=2」!なら「_max=args!2    読む」実行。\r\n        「(arg_num)>=3」!なら「_min=args!3    読む」実行。\r\n        「(arg_num)>=4」!なら「階級幅=args!4    読む」実行。\r\n        freq=自分!(f1) (_max) (_min) (階級幅) 度数分布。\r\n        frec_sum=freq!\"度数\"  合計値    数にする。\r\n        frecdist_sum=0。\r\n        ret  =    テーブル!\"階級\"  \"度数\"  \"相対度数\"  作る。\r\n        freq:データ!「|  n  i  |\r\n            ret!  (n)  書く。\r\n            「i%2==0」!なら「\r\n                ret!(n/frec_sum)  書く。\r\n                frecdist_sum=frecdist_sum+(n/frec_sum)。\r\n            」実行。\r\n        」それぞれ実行。\r\n        ret!\"計\"    書く。\r\n        ret!(frec_sum)  書く。\r\n        ret!(frecdist_sum)    書く。\r\n        ret。\r\n    」そうでなければ「\r\n        f1=  args!1  読む。\r\n        ret=テーブル！(f1)  \"度数\"  \"相対度数\"  作る。\r\n        f_arr=自分!(f1)  度数  (f1)    射影。\r\n        freq=自分!(f1)  度数  \"度数\"    射影。\r\n        sum=0。\r\n        freq：データ!「|n|\r\n            sum=sum+n。\r\n        」それぞれ実行。\r\n        \r\n        freq:データ！「|n  i|\r\n            ret!(f_arr：データ!(i)  読む)  書く。\r\n            ret!(n)    書く。\r\n            ret!(n/sum)  書く。\r\n        」それぞれ実行。\r\n        ret。\r\n    」実行。\r\n」。\r\n\r\nテーブル：クロス集計=「|;ret  val  cp  tmp  sum  sum_array  args  arg_num  |\r\n    args=自分!(_rest)  getarg。\r\n    「自分!(args)  \"common2\"  check_arg」!なら「\r\n        arg_num=args!要素数?。\r\n        tmp  =  配列！作る。\r\n        args!「|n  i|\r\n            「i<=2」！なら「\r\n                tmp!(自分！(n)  射影    重複なし)  書く。\r\n            」実行。\r\n        」それぞれ実行。\r\n        カウント＝配列！作る。\r\n        ((tmp!1  読む):データ)!「|n  j|\r\n            sum=0。\r\n            カウント！(n)  書く。\r\n            ((tmp!2  読む):データ)！「|m|\r\n                「全部!(n!=\"\")  (m!=\"\")  本当」!なら「\r\n                    val=自分！(args!1  読む)  (n)  (args!2    読む)  (m)  集計2  数にする。\r\n                    カウント！(val)  書く。\r\n                    sum=sum+val。\r\n                」実行。\r\n            」それぞれ実行。\r\n        」それぞれ実行。\r\n        ret=テーブル！\"\"  作る。\r\n        ((tmp!2  読む):データ)!「|n  i|\r\n            「n!=\"\"」!なら「\r\n                ret:フィールド名!(n)  書く。\r\n            」実行。\r\n        」それぞれ実行。\r\n        \r\n        カウント！「|n  i|\r\n            ret!(n)  書く。\r\n        」それぞれ実行。\r\n        ret。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n」。\r\n\r\n\r\nテーブル：クロス集計表=「|;ret    val  cp  tmp  sum  sum_array  args  arg_num|\r\n    args=自分!(_rest)  getarg。\r\n    「自分!(args)  \"common2\"  check_arg」!なら「\r\n        arg_num=args!要素数?。\r\n        tmp  =  配列！作る。\r\n        args!「|n  i|\r\n            「i<=2」！なら「\r\n                tmp!(自分！(n)  射影    重複なし)  書く。\r\n            」実行。\r\n        」それぞれ実行。\r\n        カウント＝配列！作る。\r\n        \r\n        (tmp!1  読む)!「|n  j|\r\n            sum=0。\r\n            カウント！(n)  書く。\r\n            (tmp!2  読む)！「|m|\r\n                「全部!(n!=\"\")  (m!=\"\")  本当」!なら「\r\n                    val=自分！(args!1  読む)  (n)  (args!2    読む)  (m)  集計2  数にする。\r\n                    カウント！(val)  書く。\r\n                    sum=sum+val。\r\n                」実行。\r\n            」それぞれ実行。\r\n            カウント！(sum)  書く。\r\n        」それぞれ実行。\r\n        \r\n        ret=テーブル！\"\"  作る。\r\n        (tmp!2  読む)!「|n  i|\r\n            「n!=\"\"」!なら「\r\n                ret:フィールド名!(n)  書く。\r\n            」実行。\r\n        」それぞれ実行。\r\n        ret:フィールド名!\"合計\"  書く。\r\n        \r\n        カウント！「|n  i|\r\n            ret!(n)  書く。\r\n        」それぞれ実行。\r\n        \r\n        sum_array=配列！\"合計\"  作る。\r\n        sum=0。\r\n        (tmp!2  読む)!「|n  i|\r\n            「n!=\"\"」!なら「\r\n                val  =  自分！(args!2  読む)  (n)  集計    数にする。\r\n                sum_array!(val)    書く。\r\n                sum=sum+val。\r\n            」実行。\r\n        」それぞれ実行。\r\n        sum_array!(sum)  書く。\r\n        ret!(sum_array)  追加。\r\n        ret。\r\n    」そうでなければ「\r\n        undef。\r\n    」実行。\r\n」。\r\n\r\nテーブル：数える＝「|;ret  f１    f1_arr  _max  args  arg_num|\r\n    args=自分!(_rest)  getarg。\r\n    ret=テーブル！\"\"  作る。\r\n    \r\n    自分:フィールド名!「|n  i|\r\n        ret:データ!(n)  書く。\r\n        args!「|m  j|\r\n            「i==1」！なら「ret:フィールド名!(m)  書く。  」実行。\r\n            num=自分!(n)  (m)  集計  数にする。\r\n            「num!=0」!なら「ret:データ!(num)  書く。」そうでなければ「ret:データ!(0)  書く。」実行。\r\n        」それぞれ実行。\r\n        \r\n    」それぞれ実行。\r\n    \r\n    ret。\r\n」。\r\n\r\nテーブル:フィールド名取得＝「|  |\r\n    res=自分：フィールド名!作る．\r\n    res．\r\n」．\r\n\r\nテーブル：抜き出す＝「｜start end ;要素数 res｜\r\n    要素数＝(自分:フィールド名)!要素数？。\r\n    自分：データ!「｜n i｜\r\n        行番号＝floor（(i-1)/要素数）。\r\n        「i==1」！なら「res＝テーブル!（自分：フィールド名）  作る。」実行。\r\n        「end==undef」！なら「\r\n            「（行番号）==start」！なら「res!（n）  書く」実行。\r\n        」そうでなければ「\r\n            「全部!（（行番号）>= start）（（行番号）<= end）  本当」！なら「res!（n）  書く」実行。\r\n        」実行。\r\n    」それぞれ実行。\r\n    res。\r\n」。\r\n\r\n//グラフオブジェクト\r\nグラフ＝タートル！作る  消える  図形を作る。\r\n\r\nグラフ:_間隔  =  30.\r\nグラフ:_プロット幅  =  20.\r\nグラフ:_原点x=(テーブル：_画面幅)/-2.2.\r\n//JAVA2.5JS2.8\r\nグラフ:_原点y=  -1*(テーブル：_画面高さ)*2.8/10.\r\nグラフ:_縦幅=(テーブル：_画面高さ)*4.5/10.\r\nグラフ:_横幅=(グラフ:_縦幅)*1.5.\r\nグラフ:_方向=\"縦\"。\r\nグラフ:_天井=グラフ:_原点y+30.\r\nグラフ:_底=グラフ:_原点y-10.\r\nグラフ:_左端=グラフ:_原点x-20。\r\nグラフ:_右端=グラフ:_原点x+グラフ:_横幅+10。\r\nグラフ:_マーカフラグ=true。\r\nグラフ:_最小メモリ=undef。\r\nグラフ:_最大メモリ=undef。\r\nグラフ：_横軸タイトル文=undef。\r\nグラフ：_縦軸タイトル文=undef。\r\nグラフ:_起点メモリ=0。\r\n//JAVA_14  JS_8\r\nグラフ:_軸ラベルサイズ=8。\r\n//JAVA_20  JS_10\r\nグラフ:_軸タイトルサイズ=10。\r\n\r\n\r\nグラフ:_含む？＝「|arr  key;  res|\r\n    res=false。\r\n    arr!「|  n  |\r\n        「n==key」!なら「res=true」実行。\r\n    」それぞれ実行。\r\n    res。\r\n」。\r\n\r\nグラフ：位置確定=「\r\n    グラフ:_原点x=60+(グラフ:_原点x)。\r\n    自分：_左端=(グラフ:_原点x-30)。\r\n    自分：_右端=(グラフ:_原点x+自分:_横幅+10)。\r\n」。\r\n\r\nグラフ：型判定＝「  |  data  |\r\n    arr=配列!作る。\r\n    「|  i  |\r\n        「((data：データ!(i)    読む)+\"\")!  \"[^0-9.-]\"    含む?」!なら「arr!(data:フィールド名!(i)  読む)  書く」実行。\r\n    」!(data:フィールド名!要素数?)    繰り返す。\r\n    arr。\r\n」。\r\n\r\nグラフ：横軸タイトル描画＝「|option  ;画面パーツ  付箋    文字数|\r\n    文字数＝自分:_横軸タイトル文！長さ?。\r\n    ラベル！(自分:_横軸タイトル文)  作る  (自分:_軸タイトルサイズ)  文字サイズ  (自分:_左端+(自分:_右端-自分:_左端)/2-文字数*5)  (自分:_底-10)  位置。\r\n    自分:_底=(自分:_底)-(3*自分:_軸タイトルサイズ)。\r\n    自分。\r\n」。\r\n\r\nグラフ：横軸タイトル＝「|title|\r\n    「title!=undef」!なら「\r\n        自分：_横軸タイトル文=title。\r\n    」実行。\r\n    自分。\r\n」。\r\n\r\nグラフ：縦軸タイトル描画＝「  |;画面パーツ  付箋    文字数|\r\n    文字数＝自分:_縦軸タイトル文！長さ?。\r\n    自分！(自分:_縦軸タイトル文)  (自分:_左端-10)  (自分:_底+(自分:_天井-自分:_底)/2+文字数*5)  \"title\"  縦表示。\r\n    自分:_左端=自分:_左端-25。\r\n    自分。\r\n」。\r\n\r\nグラフ：縦軸タイトル＝「|title|\r\n    「title!=undef」!なら「\r\n        自分：_縦軸タイトル文=title。\r\n    」実行。\r\n    自分。\r\n」。\r\n\r\nグラフ：移動する＝「|  x    y|\r\n    グラフ:_原点x=グラフ:_原点x+x。\r\n    グラフ:_原点y=グラフ:_原点y+y。\r\n    自分：_左端=自分：_左端+x。\r\n    自分：_右端=自分：_右端+x。\r\n    自分：_天井=自分：_天井+y。\r\n    自分：_底=自分：_底+y。\r\n    自分。\r\n」。\r\n\r\nグラフ：位置＝「|  x    y;移動距離x  移動距離y|\r\n    移動距離x=x-グラフ:_原点x。\r\n    移動距離y=y-グラフ:_原点y。\r\n    グラフ:_原点x=x。\r\n    グラフ:_原点y=y。\r\n    自分：_左端=自分：_左端+移動距離x。\r\n    自分：_右端=自分：_右端+移動距離x。\r\n    自分：_天井=自分：_天井+移動距離y。\r\n    自分：_底=自分：_底+移動距離y。\r\n    自分。\r\n」。\r\n\r\nグラフ：ｘ軸データ_multi＝「｜data_arr  option    ;num  cnt  _max  付箋｜\r\n    data_arr:データ!「|data  cnt|\r\n        num=(data+\"\")!長さ?。\r\n        「cnt==1」!なら「_max=num」実行。\r\n        「_max  <  num」!なら「_max=num」実行。\r\n    」それぞれ実行。\r\n    「option!=\"ラベルなし\"」！なら「\r\n        data_arr:データ!「  |data  cnt|\r\n            data=data+\"\"。\r\n            「(_max)<4」！なら「\r\n                付箋=ラベル！(data)  作る  (自分：_軸ラベルサイズ)  文字サイズ  ((_XORIGIN)+(_XINTERVAL)*(cnt))  ((_YLOWERLIM)-20)    位置。\r\n                付箋：タイプ＝\"横軸ラベル\"。\r\n                //付箋：個体番号＝個体番号。\r\n                //描画済みグラフ!(付箋)  書く。\r\n            」そうでなければ「\r\n                「(自分：種類)!=\"ヒストグラム\"」!なら「\r\n                    自分！(data)  ((_XORIGIN)+(_XINTERVAL)*(cnt)+_XINTERVAL*0.6)  ((_YLOWERLIM)-20)  etc表示。\r\n                」そうでなければ「\r\n                    自分！(data)  ((_XORIGIN)+(_XINTERVAL)*(cnt)+_XINTERVAL*0.6)  ((_YLOWERLIM)-20)  \"横軸ラベル\"  縦表示。\r\n                」実行。\r\n            」実行。\r\n        」それぞれ実行。\r\n    」実行。\r\n    自分:_YLOWERLIM=_YLOWERLIM-20。\r\n    自分。\r\n」．\r\n\r\nグラフ:データ補正値計算＝「|  data_arr  range;    scale  段数  up_lim|\r\n    data_arr!「  |data  cnt|\r\n        「自分:_範囲指定」！なら「\r\n            「自分:_最大メモリ!=undef」！なら「\r\n                「data    >  自分:_最大メモリ」！なら「\r\n                    data=自分:_最大メモリ。\r\n                」実行。\r\n            」実行。\r\n            「自分:_最小メモリ!=undef」！なら「\r\n                「data    <  自分:_最小メモリ」!なら「\r\n                    data=自分:_最小メモリ。\r\n                」実行。\r\n            」実行。\r\n        」実行。\r\n        ab=abs(data)。\r\n        「cnt  ==  1」！なら「ab__max  =  ab.  _min=data.  _max=data  」実行．\r\n        「ab__max  <  ab  」！なら「ab__max  =  ab  」実行。\r\n        「_min  >  data  」！なら「  _min  =  data  」実行。\r\n        「_max  <  data  」！なら「  _max  =  data  」実行。\r\n    」それぞれ実行。\r\n    「全部!    (自分:_最小メモリ==undef)    (_min  >=  0)  本当」！なら「\r\n        自分:_最小メモリ=0。\r\n    」そうでなければ「\r\n        自分:_最小メモリ=_min。\r\n    」実行。\r\n    「自分:_最大メモリ==undef」!なら「自分:_最大メモリ=_max」実行。\r\n    「ab__max  >  0  」！なら「\r\n        digit=ceil(log(abs(ab__max)))。\r\n        base=ab__max*1.05。\r\n        place=10!(floor(log(base)))  pow。\r\n        up1_digit=floor(base/place)。\r\n        \r\n        scale=「up1_digit  <  2」!なら「place*0.2」\r\n        そうでなければ「\r\n            「up1_digit  <  5」!なら「  place  *  0.5」\r\n            そうでなければ「place」実行。\r\n        」実行。\r\n        段数=floor(base/scale+1)。\r\n        roof=段数*scale.\r\n    」実行。\r\n    「自分:_最小メモリ < 0」!なら「\r\n        自分:_縦幅=自分:_縦幅/1.5。\r\n        自分:_DACOL=range/roof。\r\n        自分:_段数＝段数*2。\r\n        自分:__min  =  _min。\r\n        自分:__max  =  _max。\r\n        自分:_digit=digit。\r\n        自分:_scale=scale/2。\r\n        自分:_roof=roof/2。\r\n        グラフ:_原点y=グラフ:_原点y/3。\r\n        _DACOL=_DACOL/1.5。\r\n    」そうでなければ「\r\n        自分:_DACOL=range/roof。\r\n        自分:_段数＝段数。\r\n        自分:__min  =  _min。\r\n        自分:__max  =  _max。\r\n        自分:_digit=digit。\r\n        自分:_scale=scale。\r\n        自分:_roof=roof。\r\n    」実行。\r\n    _DACOL。\r\n」。\r\n\r\nグラフ:メモリ線描画＝「｜要素数  ;ペン  col    軸線  i｜\r\n    \r\n    横軸描画＝「|  i  起点メモリ  |\r\n        ラベル!(自分:_scale*i+起点メモリ)  作る    (グラフ:_原点x-調整)  ((グラフ:_原点y+(自分:_縦幅/自分:_段数)*i)+10)    位置      (自分：_軸ラベルサイズ)    文字サイズ    。\r\n        ペン！1  線の太さ    (col)    線の色  ペンなし  (グラフ:_原点x)  (グラフ:_原点y+(自分:_縦幅/自分:_段数)*i)  位置  ペンあり  (自分:_横幅)  歩く。\r\n    」。\r\n    \r\n    縦軸描画=「  |  i    起点メモリ  |\r\n        幅=((floor(自分:_scale*i))+\"\")!長さ?。\r\n        ラベル!(自分:_scale*i+起点メモリ)  作る    (グラフ:_原点x+(自分:_横幅/自分:_段数*i)-幅*5)  (グラフ:_原点y-10)    位置    (自分：_軸ラベルサイズ)    文字サイズ    。\r\n        ペン!1  線の太さ    (col)  線の色    ペンなし    (グラフ:_原点x+(自分:_横幅/自分:_段数)*i)  (グラフ:_原点y)    位置  ペンあり    (自分:_縦幅)    歩く。\r\n    」。\r\n    \r\n    col=色!0xBDBDBD  作る。\r\n    調整=(自分:_digit)*10。\r\n    i=0。\r\n    起点メモリ=0。\r\n    \r\n    「自分:_方向==\"縦\"」!なら「\r\n        ペン＝タートル！    作る。\r\n        自分:_左端=グラフ:_原点x-調整-30。\r\n        //横軸描画!(i)  (起点メモリ)    実行。\r\n        「自分:__max  >  ０」!なら「\r\n            起点メモリ＝「自分:_最小メモリ  >  0」!なら「自分:_最小メモリ」そうでなければ「0」実行。\r\n            i=0。\r\n            「  (自分:_最大メモリ)  >=  (自分:_scale*i+起点メモリ)」!の間「\r\n                横軸描画!(i)  (起点メモリ)実行。\r\n                i=i+1。\r\n            」実行。\r\n            横軸描画!(i)  (起点メモリ)実行。\r\n            自分:_天井=グラフ:_原点y+(自分:_縦幅/自分:_段数)*i。\r\n        」実行。\r\n        \r\n        「自分:_最小メモリ  <  ０」!なら「\r\n            起点メモリ＝「自分:_最大メモリ  <  0」!なら「自分:_最大メモリ」そうでなければ「0」実行。\r\n            i=0。\r\n            「(自分:_最小メモリ)  <=  (自分:_scale*i)」!の間「\r\n                横軸描画!(i)  (起点メモリ)  実行。\r\n                i=i-1。\r\n            」実行。\r\n            横軸描画!(i)  (起点メモリ)実行。\r\n            自分:_底=グラフ:_原点y+(自分:_縦幅/自分:_段数)*i-10。\r\n        」実行。\r\n        \r\n    」そうでなければ「自分:_方向==\"横\"」なら「\r\n        ペン＝タートル！    作る    90  左回り。\r\n        自分:_底=グラフ:_原点y-40。\r\n        縦軸描画!(i)  (起点メモリ)    実行。\r\n        \r\n        「自分:__max  >  ０」!なら「\r\n            起点メモリ＝「自分:_最小メモリ  >  0」!なら「自分:_最小メモリ」そうでなければ「0」実行。\r\n            i=1。\r\n            「  (自分:_最大メモリ)  >=  (自分:_scale*i)」!の間「\r\n                縦軸描画!(i)  (起点メモリ)  実行。\r\n                i=i+1。\r\n            」実行。\r\n            縦軸描画!(i)  (起点メモリ)  実行。\r\n            自分:_右端=グラフ:_原点x+(自分:_横幅/自分:_段数)*i+20。\r\n        」実行。\r\n        \r\n        「自分:_最小メモリ  <  ０」!なら「\r\n            起点メモリ＝「自分:_最大メモリ  <  0」!なら「自分:_最大メモリ」そうでなければ「0」実行。\r\n            i=-1。\r\n            「(自分:_最小メモリ)  <=  (自分:_scale*i)」!の間「\r\n                縦軸描画!(i)  (起点メモリ)  実行。\r\n                i=i-1。\r\n            」実行。\r\n            縦軸描画!(i)  (起点メモリ)  実行。\r\n            自分:_左端=グラフ:_原点x+(自分:_横幅/自分:_段数)*i-40。\r\n        」実行。\r\n        \r\n    」そうでなければ「自分:_方向==\"帯\"」なら「\r\n        ペン＝タートル！    作る  1  線の太さ    (col)  線の色  90  左回り。\r\n        ペン!ペンなし    (グラフ:_原点x)  (グラフ:_原点y)  位置。\r\n        自分:_底=グラフ:_原点y-40。\r\n        自分:_天井=グラフ:_原点y+自分:_縦幅。\r\n        メモリ=0。\r\n        自分：_帯メモリ間隔＝(自分：_横幅)/5．\r\n        「|  i  |\r\n            幅=(メモリ+\"\")!長さ？。\r\n            ラベル!(メモリ)    作る        (自分：_軸ラベルサイズ)    文字サイズ  (グラフ:_原点x+(自分：_帯メモリ間隔)*(i-1\r\n            )-幅*5)  (グラフ:_原点y-10)  位置。\r\n            ペン!ペンあり    (自分:_縦幅)    歩く    。\r\n            ペン!ペンなし    (グラフ:_原点x+(自分：_帯メモリ間隔)*i)  (グラフ:_原点y)  位置。\r\n            メモリ＝メモリ+20。\r\n        」!  6  繰り返す。\r\n        自分:_右端=グラフ:_原点x+((自分：_横幅))+20。\r\n        \r\n    」そうでなければ「自分:_方向==\"散布図\"」なら「\r\n        調整=自分:_桁y*10。\r\n        「調整==0」!なら「調整=20」実行。\r\n        ペン＝タートル！    作る  1  線の太さ    (col)  線の色。\r\n        ペン!ペンなし    (グラフ:_原点x)  (グラフ:_原点y)  位置。\r\n        自分：_左端=自分：_左端-20。\r\n        自分：_底=自分：_底-20。\r\n        「|  i  |\r\n            //グリッド線なしがfalse    or  trueで1のとき  or  trueで段数+1のとき\r\n            「どれか!(どれか！(全部!(i==1)  (自分:_グリッド線なし==true)  本当)  (全部!(i==(自分:_段数y+1))  (自分:_グリッド線なし==true)本当  )本当)  (自分:_グリッド線なし==false)    本当」！なら「\r\n                ペン！ペンあり  (自分:_横幅)    歩く。\r\n            」実行。\r\n            ペン!ペンなし  (グラフ:_原点x)  (グラフ:_原点y+自分:_横幅/自分:_段数y*i)    位置。\r\n            ラベル!(自分:_scaley*(i-1))  作る  (自分：_軸ラベルサイズ)    文字サイズ      (グラフ:_原点x-調整-10)  ((グラフ:_原点y+(自分:_縦幅/自分:_段数y)*(i-1))+10)    位置。\r\n        」!  (自分:_段数y+1)    繰り返す。\r\n        \r\n        ペン!ペンなし    (グラフ:_原点x)  (グラフ:_原点y)  位置    90    左回り。\r\n        「|  i  |\r\n            幅=((自分:_scalex*i)+\"\")!長さ?。\r\n            「自分:_桁x==0」!なら「幅=3」実行。\r\n            「どれか!(どれか！(全部!(i==1)  (自分:_グリッド線なし==true)  本当)  (全部!(i==(自分:_段数x+1))  (自分:_グリッド線なし==true)本当  )本当)  (自分:_グリッド線なし==false)    本当」！なら「\r\n                ペン！ペンあり  (自分:_縦幅)    歩く。\r\n            」実行。\r\n            ペン!ペンなし  (グラフ:_原点x+自分:_縦幅/自分:_段数x*i)  (グラフ:_原点y)    位置。\r\n            ラベル!(自分:_scalex*(i-1))  作る  (自分：_軸ラベルサイズ)    文字サイズ  (グラフ:_原点x+(自分:_横幅/自分:_段数x*(i-1))-幅*5)  (グラフ:_原点y-10)  位置。\r\n        」!  (自分:_段数x+1)    繰り返す。\r\n    」実行。\r\n    \r\n    //自分:_起点メモリ=起点メモリ。\r\n    ペン！図形を作る。\r\n    ペン！消える。\r\n    自分。\r\n」。\r\n\r\nグラフ:縦幅設定＝「｜data_arr    ;tmp_arr    ｜\r\n    「自分：_方向==\"縦\"」！なら「\r\n        自分！(data_arr:データ)  (自分:_縦幅)  データ補正値計算。\r\n    」そうでなければ「自分：_方向==\"横\"」なら「\r\n        自分！(data_arr:データ)  (自分:_横幅)  データ補正値計算。\r\n    」実行。\r\n」。\r\n\r\nグラフ:横幅設定＝「|  要素数  |\r\n    「自分：_方向==\"縦\"」！なら「\r\n        //自分:_横幅=300。\r\n        自分:_右端  =  グラフ:_原点x+自分:_横幅+30。\r\n        自分:_プロット幅  =  (自分:_横幅)*2/5/(要素数)。\r\n        自分:_間隔  =  (自分:_横幅)*3/5/(要素数+1)。\r\n    」そうでなければ「自分:_方向==\"横\"」なら「\r\n        自分:_横幅  =  250。\r\n        自分:_右端  =  グラフ:_原点x+自分:_横幅+30。\r\n        自分:_プロット幅  =  (自分:_縦幅)*2/5/(要素数)。\r\n        自分:_間隔  =  (自分:_縦幅)*3/5/(要素数+1)。\r\n    」そうでなければ「自分:_方向==\"帯\"」なら「\r\n        //自分:_横幅  =  500。\r\n        自分:_右端  =  グラフ:_原点x+自分:_横幅+30。\r\n        自分:_プロット幅  =  (自分:_縦幅)*2/5/(要素数)。\r\n        自分:_間隔  =  (自分:_縦幅)*3/5/(要素数+1)。\r\n        自分:_digit=0。\r\n    」実行。\r\n」。\r\n\r\nグラフ:横向き=「|    ;tmp|\r\n    自分:_方向＝\"横\"。\r\n    グラフ:_原点x=グラフ:_原点x+250。\r\n    自分:_天井=自分:_縦幅+30。\r\n    自分。\r\n」。\r\n\r\nグラフ:メモリ範囲=「|最小    最大|\r\n    自分:_範囲指定=true。\r\n    「最小!=undef」!なら「\r\n        自分:_最小メモリ＝最小。\r\n    」実行。\r\n    「最大!=undef」！なら「\r\n        自分:_最大メモリ＝最大。\r\n    」実行。\r\n    自分。\r\n」。\r\n\r\nグラフ:補正フィールド決定=「|  f_arr  ;tmp  _max  |\r\n    f_arr!「|  n  i|\r\n        tmp=_DATA！(n)    最大値    値読み出し。\r\n        「i==1」!なら「\r\n            _max=tmp。\r\n            F=n。\r\n        」そうでなければ「\r\n            「_max  <  tmp」!なら「\r\n                _max=tmp。\r\n                F=ｎ。\r\n            」実行。\r\n        」実行。\r\n    」それぞれ実行。\r\n    F。\r\n」。\r\n\r\nグラフ:線形近似=「\r\n    自分:_近似=true。\r\n    自分。\r\n」。\r\n\r\nグラフ:マーカなし=「\r\n    自分:_マーカフラグ=false。\r\n    自分。\r\n」。\r\n\r\n//近似曲線：最小二乗法\r\nグラフ：最小二乗法＝「\r\n    「自分:_方向==\"散布図\"」！なら「\r\n        \r\n        標準偏差＝自分:_DATA!(自分:f1)  標準偏差  値読み出し。\r\n        共分散＝自分:_DATA！(自分:f1)  (自分:f2)  共分散  値読み出し。\r\n        x平均＝自分:_DATA！(自分:f1)  平均値  値読み出し。\r\n        y平均＝自分:_DATA！(自分:f2)  平均値  値読み出し。\r\n        傾き＝共分散/(標準偏差!  2  pow)。\r\n        切片＝y平均-（傾き*x平均）。\r\n        x2=自分:_横幅/自分:_DACOLX。\r\n        y2=x2*傾き+切片。\r\n        ペン＝タートル！作る    ぺんなし    1  線の太さ。\r\n        始点ｘ＝グラフ:_原点x。\r\n        始点y=グラフ:_原点y+切片*自分:_DACOLY。\r\n        終点x=グラフ:_原点x+x2*自分:_DACOLX。\r\n        終点y=グラフ:_原点y+y2*自分:_DACOLY。\r\n        「始点y  <  グラフ:_原点y」！なら「始点x=(切片/(-1*傾き))*自分:_DACOLX+グラフ:_原点x。始点y=グラフ:_原点y」実行。\r\n        「終点y  >  自分：_縦幅」！なら「終点x=((_scaley*_段数y)-切片)/傾き*自分:_DACOLX+グラフ:_原点x。終点_y=(_scaley*_段数y)*自分:_DACOLX＋グラフ:_原点y」実行。\r\n        \r\n        ペン！(始点x)  (始点y)  位置    ぺんあり  (終点x)  (終点y)    位置    (青)  図形を作る。\r\n        傾き＝round(共分散/(標準偏差!  2  pow)*10000)/10000。\r\n        切片＝round((y平均-（傾き*x平均)）*10000)/10000。\r\n        ラベル！(\"y=\"+(傾き)+\"x+\"+(切片))  作る  (自分：_軸ラベルサイズ-4)  文字サイズ    (グラフ:_原点x+x2*自分:_DACOLX+10)  (グラフ:_原点y+y2*自分:_DACOLY+5)  位置。\r\n        ペン！消える。\r\n        式の長さ=(\"y=\"+(傾き)+\"x+\"+(切片))!長さ？。\r\n        自分:_右端=グラフ:_原点x+(自分:_横幅)+40+(式の長さ*10)。\r\n        テーブル：x=自分:_右端。\r\n        ラベル!\"    \"  作る    (自分:_右端)  0    位置。\r\n    」実行。\r\n    自分。\r\n」。\r\n\r\nグラフ：グリッド線なし＝「|    |\r\n    自分:_グリッド線なし=true。\r\n    自分。\r\n」。\r\n\r\nグラフ：縦軸間隔＝「｜val｜\r\n    グラフ：_YSCALE  =  val.\r\n    自分。\r\n」．\r\n\r\nグラフ:画像にする=「\r\n    「自分:_底 < (-1*テーブル：_画面高さ/2)」！なら「自分:_底=-1*テーブル：_画面高さ/2」実行。\r\n    「自分:_天井 > (テーブル：_画面高さ/2)」！なら「自分:_天井=テーブル：_画面高さ/2」実行。\r\n    「自分:_右端 > (テーブル：_画面幅/2)」！なら「自分:_右端=テーブル：_画面幅/2」実行。\r\n    「自分:_左端 < (-1*テーブル：_画面幅/2)」！なら「自分:_左端=-1*テーブル：_画面幅/2」実行。\r\n    //JAVA\r\n    システム!(自分:_左端)  (自分:_天井)  (自分:_右端-自分:_左端)    (abs(自分:_天井-自分:_底))  capture。\r\n    //!(自分:_左端)  (自分:_天井)  (自分:_右端-自分:_左端)    (abs(自分:_天井-自分:_底))  capture。\r\n    自分。\r\n」。\r\n\r\nグラフ:縦表示＝「|  文字列  x  y  option  long  ;文字数    _SIZE  調整|\r\n    文字列=文字列+\"\"。\r\n    文字数＝(文字列)！長さ?。\r\n    調整=12．\r\n    _SIZE=0。\r\n    //jsなら18JAVA22\r\n    「option==\"title\"」!なら「_SIZE＝自分：_軸タイトルサイズ。調整=18．」そうでなければ「_SIZE=自分：_軸ラベルサイズ-4」実行。\r\n    「|i|\r\n        tmp=配列！(文字列！(i)  1  部分)  作る。\r\n        tmp!「|n  j|\r\n            付箋＝ラベル！(n)  作る  (x)  (y-調整*i)  位置  (_SIZE)  文字サイズ。\r\n            付箋：タイプ=\"縦軸タイトル\"。\r\n            //付箋：個体番号＝個体番号。\r\n            //自分:縦の位置=(y-(調整-100)*i)。\r\n        」それぞれ実行。\r\n    」！(文字数)    繰り返す。\r\n    「long!=undef」!なら「自分:_底=y-long」実行。\r\n」。\r\n\r\nグラフ:着色=「|  i  |\r\n    「i%8  ==  1」！なら「col  =  色！  0x5858FA  作る」そうでなければ\r\n    「i%8  ==  2」なら「col  =  色！  0xA9A9F5  作る」そうでなければ\r\n    「i%8  ==  3」なら「col  =  色！  0xA9F5F2  作る」そうでなければ\r\n    「i%8  ==  4」なら「col  =  色！  0xA9F5A9  作る」そうでなければ\r\n    「i%8  ==  5」なら「col  =  色！  0xF2F5A9  作る」そうでなければ\r\n    「i%8  ==  6」なら「col  =  色！  0xF5D0A9  作る」そうでなければ\r\n    「i%8  ==  7」なら「col  =  色！  0xF5A9A9  作る」そうでなければ\r\n    「i%8  ==  0」なら「col  =  色！  0xFA5858  作る」実行．\r\n    col。\r\n」。\r\n\r\nグラフ：初期化＝「\r\n    自分：_底＝グラフ:_原点y。\r\n」。\r\n\r\nテーブル：棒グラフ=「|  |\r\n    _棒グラフ=グラフ！作る。\r\n    _棒グラフ：種類=\"棒グラフ\"。\r\n    _棒グラフ:描画済みグラフ=配列!作る。\r\n    _棒グラフ:_DATA=自分。\r\n    _棒グラフ:f1  =  自分:フィールド名！1  読む。\r\n    _棒グラフ:f2  =  自分!(_rest)  getarg。\r\n    _棒グラフ:描画=「\r\n        自分！初期化。\r\n        自分！位置確定。\r\n        型配列=自分!（_DATA）型判定。\r\n        data_x  =  _DATA！（f1）射影。\r\n        「f2==undef」!なら「\r\n            f2=配列！作る。\r\n            _DATA:フィールド名!「|  n  |\r\n                f2!(n)  書く。\r\n            」それぞれ実行。\r\n            f2!1  位置で消す。\r\n        」実行。\r\n        \r\n        最大長=0。\r\n        data_x:データ!「|  n  i  |\r\n            「((n+\"\")!長さ？)  >  最大長」！なら「最大長=(n+\"\")!長さ？」実行。\r\n        」それぞれ実行。\r\n        \r\n        data_y=_DATA！（f2）射影。\r\n        要素数=data_x:データ!要素数?。\r\n        ラベル数=ceil(要素数/35)。\r\n        自分!  (要素数)横幅設定。\r\n        自分!  (data_y)  縦幅設定。\r\n        自分!  (要素数)  メモリ線描画。\r\n        \r\n        「(型配列!要素数?)>  0」!なら「\r\n            型配列!「|n  i|\r\n                「(自分!(f2)  (n)  _含む？)==true」！なら「\r\n                    「n!=(_DATA:フィールド名!1    読む)」!なら「\r\n                        自分!(_DATA!(n)  射影)    x軸データ_multi。\r\n                    」実行。\r\n                    f2=f2!(n)  消す。\r\n                」実行。\r\n            」それぞれ実行。\r\n        」実行。\r\n        \r\n        ペン＝タートル!作る  1  線の太さ    。\r\n        系列数=f2!要素数?。\r\n        もとのプロット幅  =  自分:_プロット幅。\r\n        自分:_プロット幅  =  自分:_プロット幅/系列数。\r\n        \r\n        「自分：_方向==\"縦\"」!なら「\r\n            \r\n            ペン！    ぺんなし    (グラフ:_原点x+自分:_間隔)  (グラフ:_原点y)  位置        ９０    左回り    ぺんあり。\r\n            ラベルx=グラフ:_原点x+自分:_間隔+自分:もとのプロット幅/2-(自分:_軸ラベルサイズ/2)。\r\n            ラベルy=グラフ:_原点y。\r\n            \r\n            \r\n            「|  j  |\r\n                data_y=自分:_DATA!(f2!(j)  読む)  射影。\r\n                ラベルサイズ=「自分:_プロット幅  >  10」  !なら「10」そうでなければ「自分:_プロット幅」実行。\r\n                data_y:データ!「|n  i|\r\n                    「n==\"\"」!なら「n=0」実行。\r\n                    「自分:_範囲指定」！なら「\r\n                        「n  >=  自分:_最大メモリ」！なら「\r\n                            n=自分:_最大メモリ。\r\n                        」そうでなければ「n  <=  自分:_最小メモリ」なら「\r\n                            n=自分:_最小メモリ。\r\n                        」実行。\r\n                    」実行。\r\n                    「n  >=  自分:_最小メモリ」!なら「\r\n                        n=(n-自分:_起点メモリ)*(自分:_DACOL)。\r\n                        ペン！ペンあり    (n)  歩く    90  右回り    (自分:_プロット幅)  歩く    90  右回り    (n)  歩く    180  右回り  (自分!(j)    着色)    図形にする。\r\n                    」そうでなければ「\r\n                        ペン！  (自分:_プロット幅)  0  移動する。\r\n                    」実行。\r\n                    ペン!ペンなし    (自分:_間隔+(系列数-1)*自分:_プロット幅)  0  移動する。\r\n                    「j==1」！なら「\r\n                        「((i-1)%ラベル数)==0」！なら「\r\n                            横軸ラベル=data_x!(i)  読む。\r\n                            横軸ラベル長=(横軸ラベル+\"\")!長さ?。\r\n                            「(最大長*5)  >  自分:_プロット幅」！なら「\r\n                                自分!  (横軸ラベル)  (ラベルx)  (ラベルy)  \"\"  (最大長)  縦表示。\r\n                            」そうでなければ「\r\n                                ラベル!  (横軸ラベル)  作る    (自分：_軸ラベルサイズ)    文字サイズ    (ラベルx-横軸ラベル長*5/2)  (ラベルy)  位置。\r\n                            」実行。\r\n                            ラベルx=ラベルx+自分:_間隔＊ラベル数+もとのプロット幅*ラベル数。\r\n                        」実行。\r\n                    」実行。\r\n                」それぞれ実行。\r\n                「自分:_底  >=  ラベルy」!なら「自分:_底=ラベルy-30」実行。\r\n                ペン！    ぺんなし    (グラフ:_原点x+自分:_間隔+自分:_プロット幅*j)  (グラフ:_原点y)  位置。\r\n            」!  (系列数)  繰り返す。\r\n            自分:_底=自分:_底-13*最大長。\r\n            \r\n            \r\n        」そうでなければ「自分：_方向==\"横\"」なら「\r\n            \r\n            ペン！    ぺんなし    (グラフ:_原点x)  (グラフ:_原点y+自分:_間隔)  位置        ぺんあり。\r\n            ラベルx=グラフ:_原点x-10。\r\n            //6はラベルの幅の半分\r\n            ラベルy=グラフ:_原点y+(自分:_間隔+もとのプロット幅)-もとのプロット幅/2+6。\r\n            \r\n            「|  j  |\r\n                data_y=自分:_DATA!(f2!(j)  読む)  射影。\r\n                \r\n                data_y:データ!「|n  i|\r\n                    「n==\"\"」!なら「n=0」実行。\r\n                    val=data_x!(i)  読む。\r\n                    メモリ調整＝((val+\"\")!長さ?)*10。\r\n                    「自分:_範囲指定」！なら「\r\n                        「n  >=  自分:_最大メモリ」！なら「\r\n                            n=自分:_最大メモリ。\r\n                        」そうでなければ「n  <=  自分:_最小メモリ」なら「\r\n                            n=自分:_最小メモリ。\r\n                        」実行。\r\n                    」実行。\r\n                    「n  >=  自分:_最小メモリ」!なら「\r\n                        n=(n-自分:_起点メモリ)*(自分:_DACOL)。\r\n                        ペン！ペンあり    (n)  歩く    90  左回り    (自分:_プロット幅)  歩く    90  左回り    (n)  歩く    180  左回り  (自分!(j)    着色)    図形にする。\r\n                    」そうでなければ「\r\n                        ペン！  0  (自分:_プロット幅)  移動する。\r\n                    」実行。\r\n                    ペン!ペンなし    0  (自分:_間隔+(系列数-1)*自分:_プロット幅)  移動する。\r\n                    \r\n                    「j==1」！なら「\r\n                        「((i-1)%ラベル数)==0」！なら「\r\n                            ラベル!  (val)  作る    (自分：_軸ラベルサイズ-2)    文字サイズ    (ラベルx-メモリ調整)  (ラベルy)  位置。\r\n                            ラベルy=ラベルy+(自分:_間隔+もとのプロット幅)*ラベル数。\r\n                            「自分:_左端  >=  (ラベルx-メモリ調整-30)」!なら「\r\n                                自分:_左端=ラベルx-メモリ調整    -30。\r\n                            」実行。\r\n                        」実行。\r\n                    」実行。\r\n                」それぞれ実行。\r\n                ペン！    ぺんなし    (グラフ:_原点x)  (グラフ:_原点y+自分:_間隔+自分:_プロット幅*j)    位置。\r\n            」!  (系列数)  繰り返す。\r\n            \r\n        」実行。\r\n        \r\n        「系列数  >  1」！なら「\r\n            「自分:_方向==\"横\"」！なら「\r\n                ペン!ペンなし  (グラフ:_原点x)  (自分:_底-5)  位置。\r\n            」そうでなければ「\r\n                ペン!ペンなし  (グラフ:_原点x)  (自分:_底-10)  位置。\r\n            」実行。\r\n            系列ラベルx  =    グラフ:_原点x+10。\r\n            系列ラベルy  =  自分:_底+7。\r\n            「|i|\r\n                系列名=f2!(i)    読む。\r\n                系列名長=(系列名+\"\")!長さ？。\r\n                ペン！ペンあり  6  4  角形    (自分!(i)    着色)    図形を作る。\r\n                a=ラベル!    (系列名)    作る    （系列ラベルx）  (系列ラベルy)    位置  (自分：_軸ラベルサイズ-2)  文字サイズ。\r\n                ペン!ペンなし    (系列名長*12+16)    0  移動する。\r\n                系列ラベルx  =  系列ラベルx+(系列名長*12+16)。\r\n            」!(系列数)    繰り返す。\r\n            「自分:_右端 < 系列ラベルx」！なら「自分:_右端=系列ラベルx」実行。\r\n            自分:_底＝自分:_底-20。\r\n        」実行。\r\n        \r\n        ペン！消える。\r\n        「自分:_横軸タイトル文==undef」！なら「\r\n            自分！(f1)  横軸タイトル。\r\n        」実行。\r\n        「自分:_縦軸タイトル文==undef」！なら「\r\n            自分！(\"\")  縦軸タイトル。\r\n        」実行。\r\n        自分！縦軸タイトル描画。\r\n        自分！横軸タイトル描画。\r\n        グラフ:_原点x=自分:_右端+60．\r\n        //テーブル:x=自分:_右端。\r\n        自分:_最小メモリ=undef。\r\n        自分。\r\n    」。\r\n    //グラフ：個体番号＝グラフ：個体番号+1。\r\n    「_棒グラフ:f2==undef」!なら「\r\n        _棒グラフ。\r\n    」そうでなければ「\r\n        「自分!(_棒グラフ:f2)  check_fn」!なら「\r\n            「_棒グラフ:_DATA!(_棒グラフ:f2!1  読む)    射影  check_dt」!なら「\r\n                _棒グラフ。\r\n            」そうでなければ「\r\n                undef。\r\n            」実行。\r\n        」そうでなければ「\r\n            undef。\r\n        」実行。\r\n    」実行。\r\n」。\r\n\r\n\r\nテーブル：ヒストグラム=「  |f2 _max _min  階級幅  ;tmp  |\r\n    _ヒストグラム=グラフ！作る。\r\n    _ヒストグラム：種類=\"ヒストグラム\"。\r\n    _ヒストグラム:f1  =  自分:フィールド名！1  読む。\r\n    _ヒストグラム:f2  =  f2。\r\n    _ヒストグラム:_DATA=自分。\r\n    「(_ヒストグラム:f1)!=\"階級\"」!なら「\r\n        _ヒストグラム:_DATA=自分！(_ヒストグラム:f2) (_max) (_min) (階級幅)  度数分布。\r\n        _ヒストグラム:f1=\"階級\"。\r\n        _ヒストグラム:f2=\"度数\"。\r\n    」そうでなければ「_ヒストグラム:f2==undef」なら「\r\n        _ヒストグラム:f2=\"度数\"。\r\n    」実行。\r\n    _ヒストグラム:描画=「\r\n        自分！位置確定。\r\n        自分！初期化。\r\n        data_x  =  _DATA！（自分:f1）射影。\r\n        data_y  =  _DATA！（自分:f2）射影。\r\n        \r\n        要素数=data_y:データ!要素数?。\r\n        自分!  (要素数)  横幅設定。\r\n        自分!  (data_y)  縦幅設定。\r\n        自分!  (要素数)  メモリ線描画。\r\n        ペン＝タートル!作る    1    線の太さ。\r\n        \r\n        「自分：_方向==\"縦\"」!なら「\r\n            \r\n            ペン！    ぺんなし    (グラフ:_原点x+自分:_間隔)  (グラフ:_原点y)  位置        ９０    左回り    ぺんあり。\r\n            ラベルx=グラフ:_原点x+(自分:_間隔)。\r\n            ラベルy=グラフ:_原点y-20。\r\n            \r\n            ラベルサイズ=「自分:_プロット幅  >  10」  !なら「10」そうでなければ「自分:_プロット幅」実行。\r\n            data_y:データ!「|n  i|\r\n                「n  >=  自分:_最大メモリ」！なら「\r\n                    n=自分:_最大メモリ。\r\n                」そうでなければ「n  <=  自分:_最小メモリ」なら「\r\n                    n=自分:_最小メモリ。\r\n                」実行。\r\n                「n  >=  自分:_最小メモリ」!なら「\r\n                    n=(n-自分：_起点メモリ)*(自分:_DACOL)。\r\n                    ペン！ペンあり    (n)  歩く    90  右回り    (自分:_プロット幅+((自分:_間隔*要素数-自分:_間隔)/要素数))  歩く    90  右回り    (n)  歩く    180  右回り  (色！  0xE0E0F8  作る)    図形にする。\r\n                    ペン!ぺんなし    (-1*(自分:_プロット幅+((自分:_間隔*要素数-自分:_間隔)/要素数)))  0  移動する。\r\n                    ペン！(色！  0x555555  作る)    線の色    ペンあり    (n)  歩く    90  右回り    (自分:_プロット幅+((自分:_間隔*要素数-自分:_間隔)/要素数))  歩く    90  右回り    (n)  歩く    180  右回り    図形を作る。\r\n                」そうでなければ「\r\n                    ペン！  (自分:_プロット幅+((自分:_間隔*要素数-自分:_間隔)/要素数))  0  移動する。\r\n                」実行。\r\n                「i==1」！なら「\r\n                    ラベルペン=タートル!    作る  1    線の太さ    ペンなし(ラベルx)  (ラベルy)  位置        ペンあり  (自分:_横幅-自分：_間隔*2)    歩く    90  右回り。\r\n                」実行。\r\n                ニョロ位置=((data_x!(i)  読む)+\"\")!  \"~\"  何文字目?。\r\n                横軸ラベル=((data_x!(i)  読む)+\"\")!  1  (ニョロ位置-1)    部分。\r\n                ラベルペン!ペンなし  (ラベルx)  (ラベルy)  位置  ペンあり  10  歩く。\r\n                横軸ラベル長=(横軸ラベル+\"\")!長さ?。\r\n                調整=0。\r\n                「横軸ラベル長  <  3」!なら「\r\n                    調整=(3-横軸ラベル長)*5。\r\n                」そうでなければ「横軸ラベル長  >  3」なら「\r\n                    調整=-1*(横軸ラベル長-3)*2。\r\n                」実行。\r\n                ラベル!  (横軸ラベル)  作る    (自分：_軸ラベルサイズ)    文字サイズ    (ラベルx+調整-10)  (ラベルy-10)  位置。\r\n                ラベルx=ラベルx+自分:_プロット幅+((自分:_間隔*要素数-自分:_間隔)/要素数)。\r\n            」それぞれ実行。\r\n            横軸ラベル=(data_x!(要素数)  読む)!  (ニョロ位置+1)  (((data_x!(要素数)  読む)+\"\")!    長さ？)    部分。\r\n            ラベルペン!ペンなし  (ラベルx)  (ラベルy)  位置  ペンあり  10  歩く。\r\n            ラベル!  (横軸ラベル)  作る    (自分：_軸ラベルサイズ)    文字サイズ    (ラベルx+調整-10)  (ラベルy-10)  位置。\r\n            「自分:_底  >=  ラベルy」!なら「自分:_底=ラベルy-30」実行。\r\n            \r\n        」そうでなければ「自分：_方向==\"横\"」なら「\r\n            \r\n            ペン！    ぺんなし    (グラフ:_原点x)  (グラフ:_原点y+自分:_間隔)  位置        ぺんあり。\r\n            ラベルx=グラフ:_原点x-15。\r\n            ラベルy=グラフ:_原点y+(自分:_間隔)。\r\n            \r\n            ラベルサイズ=「自分:_プロット幅  >  10」  !なら「8」そうでなければ「自分:_プロット幅」実行。\r\n            data_y:データ!「|n  i|\r\n                \r\n                val=data_x!(i)  読む。\r\n                メモリ調整＝((val+\"\")!長さ?)*12。\r\n                「n  >=  自分:_最大メモリ」！なら「\r\n                    n=自分:_最大メモリ。\r\n                」そうでなければ「n  <=  自分:_最小メモリ」なら「\r\n                    n=自分:_最小メモリ。\r\n                」実行。\r\n                \r\n                「n  >=  自分:_最小メモリ」!なら「\r\n                    n=(n-自分:_起点メモリ)*(自分:_DACOL)。\r\n                    ペン！ペンあり    (n)  歩く    90  左回り    (自分:_プロット幅+((自分:_間隔*要素数-自分:_間隔)/要素数))  歩く    90  左回り    (n)  歩く    180  左回り  (色！  0xE0E0F8  作る)    図形にする。\r\n                    ペン!ぺんなし    0  (-1*(自分:_プロット幅+((自分:_間隔*要素数-自分:_間隔)/要素数)))  移動する。\r\n                    ペン！(色！  0x555555  作る)    線の色    ペンあり    (n)  歩く    90  左回り    (自分:_プロット幅+((自分:_間隔*要素数-自分:_間隔)/要素数))  歩く    90  左回り    (n)  歩く    180  左回り    図形を作る。\r\n                」そうでなければ「\r\n                    ペン！  0  (自分:_プロット幅+((自分:_間隔*要素数-自分:_間隔)/要素数))  移動する。\r\n                」実行。\r\n                \r\n                「i==1」！なら「\r\n                    ラベルペン=タートル!    作る  90    左回り  1    線の太さ    ペンなし(ラベルx)  (ラベルy)  位置        ペンあり  (自分:_縦幅-自分：_間隔*2)    歩く    90  左回り。\r\n                」実行。\r\n                ニョロ位置=((data_x!(i)  読む)+\"\")!  \"~\"  何文字目?。\r\n                横軸ラベル=((data_x!(i)  読む)+\"\")!  1  (ニョロ位置-1)    部分。\r\n                ラベルペン!ペンなし  (ラベルx)  (ラベルy)  位置  ペンあり  10  歩く。\r\n                横軸ラベル長=(横軸ラベル+\"\")!長さ?。\r\n                ラベル!  (横軸ラベル)  作る    (自分：_軸ラベルサイズ)    文字サイズ    (ラベルx-(横軸ラベル長*7)-10)  (ラベルy+10)  位置。\r\n                ラベルy=ラベルy+自分:_プロット幅+((自分:_間隔*要素数-自分:_間隔)/要素数)。\r\n                「自分:_左端  >=  (ラベルx-メモリ調整-30)」!なら「\r\n                    自分:_左端=ラベルx-メモリ調整    -30。\r\n                」実行。\r\n            」それぞれ実行。\r\n            横軸ラベル=(data_x!(要素数)  読む)!  (ニョロ位置+1)  (((data_x!(要素数)  読む)+\"\")!    長さ？)    部分。\r\n            ラベルペン!ペンなし  (ラベルx)  (ラベルy)  位置  ペンあり  10  歩く。\r\n            ラベル!  (横軸ラベル)  作る    (自分：_軸ラベルサイズ)    文字サイズ    (ラベルx-(横軸ラベル長*7)-10)  (ラベルy+10)  位置。\r\n        」実行。\r\n        \r\n        「系列数  >  1」！なら「\r\n            「自分:_方向==\"横\"」！なら「\r\n                ペン!ペンなし  (グラフ:_原点x)  (自分:_底-5)  位置。\r\n            」そうでなければ「\r\n                ペン!ペンなし  (グラフ:_原点x)  (自分:_底-10)  位置。\r\n            」実行。\r\n            系列ラベルx  =    グラフ:_原点x+10。\r\n            系列ラベルy  =  自分:_底。\r\n            「|i|\r\n                系列名=f2!(i)    読む。\r\n                系列名長=(系列名+\"\")!長さ？。\r\n                ペン！ペンあり  6  4  角形    (自分!(i)    着色)    図形を作る。\r\n                a=ラベル!    (系列名)    作る    （系列ラベルx）  (系列ラベルy)    位置  (自分：_軸ラベルサイズ-2)  文字サイズ。\r\n                ペン!ペンなし    (系列名長*１0+16)    0  移動する。\r\n                系列ラベルx  =  系列ラベルx+(系列名長*１0+16)。\r\n            」!(系列数)    繰り返す。\r\n            自分:_底＝自分:_底-20。\r\n        」実行。\r\n        ペン！消える。\r\n        ラベルペン！消える。\r\n        \r\n        「_横軸タイトル文==undef」！なら「\r\n            自分！(\"階級\")  横軸タイトル。\r\n        」実行。\r\n        「_縦軸タイトル文==undef」！なら「\r\n            自分！(\"度数\")  縦軸タイトル。\r\n        」実行。\r\n        自分！縦軸タイトル描画。\r\n        自分！横軸タイトル描画。\r\n        グラフ:_原点x=自分:_右端+60．\r\n        //テーブル:x=自分:_右端。\r\n        自分:_最小メモリ=undef。\r\n        自分。\r\n    」。\r\n    \r\n    「どれか!(_ヒストグラム:f2==undef)  (_ヒストグラム:_DATA==undef)  本当」！なら「\r\n        undef。\r\n    」そうでなければ「\r\n        「_ヒストグラム:_DATA！(_ヒストグラム:f2)    check_fn」!なら「\r\n            「_ヒストグラム:_DATA！(_ヒストグラム:f2)  射影  check_dt」！なら「\r\n                //グラフ：個体番号＝グラフ：個体番号+1。\r\n                _ヒストグラム。\r\n            」そうでなければ「\r\n                undef。\r\n            」実行。\r\n        」そうでなければ「\r\n            undef。\r\n        」実行。\r\n    」実行。\r\n」。\r\n\r\nテーブル：積み上げ棒グラフ=「|  |\r\n    _積み上げ棒グラフ＝グラフ！作る。\r\n    _積み上げ棒グラフ：種類=\"積み上げ棒グラフ\"。\r\n    _積み上げ棒グラフ:_DATA=自分。\r\n    _積み上げ棒グラフ:f1  =  自分:フィールド名！1  読む。\r\n    _積み上げ棒グラフ:f2  =  自分!(_rest)  getarg。\r\n    _積み上げ棒グラフ:描画=「|  |\r\n        自分！位置確定。\r\n        自分！初期化。\r\n        「f2==undef」！なら「\r\n            //tmp  =  自分:_DATA:フィールド名  !作る。\r\n            tmp  =  自分:_DATA:フィールド名  !  concat。\r\n            f2=(tmp)!  1  位置で消す。\r\n        」実行。\r\n        \r\n        tmp_data  =  自分:_DATA!  (f2)  射影。\r\n        data_x=自分:_DATA!  (f1)  射影。\r\n        フィールド数=f2!要素数?。\r\n        系列数=data_x:データ!要素数?。\r\n        正合計配列=配列!作る。\r\n        負合計配列=配列!作る。\r\n        データ補正用配列=配列!  作る。\r\n        データ補正用配列:データ=配列!  作る。\r\n        「\r\n            正合計配列! 0 書く。\r\n            負合計配列! 0 書く。\r\n        」！(フィールド数)  繰り返す。\r\n        \r\n        「|  i  |\r\n            「|  j  |\r\n                「(tmp_data!((i-1)*フィールド数+j)  読む)  >  0」！なら「\r\n                    正合計配列!  (j)  ((正合計配列!(j)  読む)+(tmp_data!((i-1)*フィールド数+j)  読む))    上書き。\r\n                」そうでなければ「\r\n                    負合計配列!  (j)  ((負合計配列!(j)  読む)+(tmp_data!((i-1)*フィールド数+j)  読む))    上書き。\r\n                」実行。\r\n            」!(フィールド数)    繰り返す。\r\n        」!(系列数)    繰り返す。\r\n        データ補正用配列:データ=正合計配列！(負合計配列)  連結。\r\n        描画用データ=自分:_DATA!  (f2!  1  (f1)  挿入)  射影  行列入れ替え。\r\n        f2!1 位置で消す。\r\n        正高さ配列=配列！作る。\r\n        負高さ配列=配列！作る。\r\n        自分!  (フィールド数)横幅設定。\r\n        自分!  (データ補正用配列)  縦幅設定。\r\n        自分!  (フィールド数)  メモリ線描画。\r\n        ペン＝タートル!作る  1  線の太さ。\r\n        ペン！ぺんなし    (グラフ:_原点x+自分:_間隔)  (グラフ:_原点y)  位置 ９０ 左回り。\r\n        ラベルx=グラフ:_原点x+自分:_間隔+自分:_プロット幅/2。\r\n        ラベルy=グラフ:_原点y-10。\r\n        \r\n        「|  j  |\r\n            data_y=描画用データ!  ((data_x:データ!(j)  読む)+\"\")  射影。\r\n            ラベルサイズ=「自分:_プロット幅  >  10」!なら「10」そうでなければ「自分:_プロット幅」実行。\r\n            「| i;  n    |\r\n                「j==1」！なら「\r\n                    正高さ配列! 0  書く。\r\n                    負高さ配列!0  書く。\r\n                」実行。\r\n                n=data_y:データ!(i)  読む。\r\n                「n  >=  自分:_最大メモリ」！なら「\r\n                    n=自分:_最大メモリ。\r\n                」そうでなければ「n  <=  自分:_最小メモリ」なら「\r\n                    n=自分:_最小メモリ。\r\n                」実行。\r\n                「n  >=  自分:_最小メモリ」!なら「\r\n                    「n  >  0」!なら「\r\n                        移動値=正高さ配列!(i)  読む。\r\n                    」そうでなければ「\r\n                        移動値=負高さ配列!(i)  読む。\r\n                    」実行。\r\n                    n=(n-自分:_起点メモリ)*(自分:_DACOL)。\r\n                    ペン！ぺんなし 0  (移動値)  移動する。\r\n                    ペン！ペンあり (n)  歩く 90  右回り (自分:_プロット幅)  歩く    90  右回り    (n)  歩く    180  右回り  (自分!(j)    着色)    図形にする。\r\n                」そうでなければ「\r\n                    ペン！  (自分:_プロット幅)  0  移動する。\r\n                」実行。\r\n                ペン!ペンなし (自分:_間隔)  (-1*移動値)  移動する。\r\n                \r\n                「  n  >  0  」!なら「\r\n                    正高さ配列!(i)    ((正高さ配列!(i)読む)+n)  上書き。\r\n                」そうでなければ「\r\n                    負高さ配列!(i)    ((負高さ配列!(i)読む)+n)  上書き。\r\n                」実行。\r\n                \r\n                「j==1」！なら「\r\n                    横軸ラベル=f2!(i)  読む。\r\n                    横軸ラベル長=(横軸ラベル+\"\")!長さ?。\r\n                    調整=0。\r\n                    「横軸ラベル長  <  3」!なら「\r\n                        調整=(3-横軸ラベル長)*5。\r\n                    」そうでなければ「横軸ラベル長  >  3」なら「\r\n                        調整=-1*(横軸ラベル長-3)*3。\r\n                    」実行。\r\n                    ラベル!  (横軸ラベル)  作る    (自分：_軸ラベルサイズ)    文字サイズ    (ラベルx+調整-横軸ラベル長*3)  (ラベルy)  位置。\r\n                    ラベルx=ラベルx+自分:_間隔+自分:_プロット幅。\r\n                」実行。\r\n                \r\n            」!(フィールド数)    繰り返す。\r\n            \r\n            「自分:_底  >=  ラベルy」!なら「自分:_底=ラベルy-30」実行。\r\n            ペン！ぺんなし (グラフ:_原点x+自分:_間隔)  (グラフ:_原点y)  位置。\r\n            \r\n        」!  (系列数)  繰り返す。\r\n        「系列数  >  1」！なら「\r\n            ペン!ペンなし  (グラフ:_原点x)  (自分:_底-10)  位置。\r\n            系列ラベルx  =    グラフ:_原点x+10。\r\n            系列ラベルy  =  自分:_底+10。\r\n            「|i|\r\n                系列名=data_x!(i)    読む。\r\n                \r\n                系列名長=(系列名+\"\")!長さ？。\r\n                ペン！ペンあり  6  4  角形  (自分!(i)  着色)    図形を作る。\r\n                a=ラベル!    (系列名)    作る    （系列ラベルx）  (系列ラベルy)    位置  (自分：_軸ラベルサイズ-2)  文字サイズ。\r\n                ペン!ペンなし    (系列名長*１0+16)    0  移動する。\r\n                系列ラベルx  =  系列ラベルx+(系列名長*１0+16)。\r\n            」!(系列数)    繰り返す。\r\n            自分:_底＝自分:_底-20。\r\n        」実行。\r\n        \r\n        ペン！消える。\r\n        「_横軸タイトル文==undef」！なら「\r\n            自分！(\"項目\")  横軸タイトル。\r\n        」実行。\r\n        「_縦軸タイトル文==undef」！なら「\r\n            自分！(\"\")  縦軸タイトル。\r\n        」実行。\r\n        自分！縦軸タイトル描画。\r\n        自分！横軸タイトル描画。\r\n        グラフ:_原点x=自分:_右端+60．\r\n        //テーブル:x=自分:_右端。\r\n        自分:_最小メモリ=undef。\r\n        自分。\r\n    」。\r\n    //グラフ：個体番号＝グラフ：個体番号+1。\r\n    「_積み上げ棒グラフ:f2==undef」!なら「\r\n        _積み上げ棒グラフ。\r\n    」そうでなければ「\r\n        「自分!(_積み上げ棒グラフ:f2)  check_fn」!なら「\r\n            「_積み上げ棒グラフ:_DATA!(_積み上げ棒グラフ:f2!1  読む)    射影  check_dt」!なら「\r\n                _積み上げ棒グラフ。\r\n            」そうでなければ「\r\n                undef。\r\n            」実行。\r\n        」そうでなければ「\r\n            undef。\r\n        」実行。\r\n    」実行。\r\n」。\r\n\r\nテーブル：折れ線グラフ=「|  ;_max  _maxf  |\r\n    _折れ線グラフ＝グラフ！作る．\r\n    _折れ線グラフ：種類=\"折れ線グラフ\"。\r\n    _折れ線グラフ:_DATA=自分．\r\n    _折れ線グラフ:f1  =  自分:フィールド名！1  読む。\r\n    _折れ線グラフ:f2  =  自分!(_rest)  getarg。\r\n    _折れ線グラフ:描画=「|    |\r\n        自分:_向き=\"縦\"。\r\n        自分！位置確定。\r\n        data_x=_DATA!(f1)  射影。\r\n        「f2==undef」！なら「\r\n            f2=配列！作る。\r\n            _DATA:フィールド名!「|  n  |\r\n                f2!(n)  書く。\r\n            」それぞれ実行。\r\n            f2!1  位置で消す。\r\n        」実行。\r\n        \r\n        data_y=_DATA！（f2）射影。\r\n        要素数=data_x:データ!要素数?。\r\n        系列数=f2!要素数?。\r\n        最大長=0。\r\n        \r\n        data_x:データ!「|  n  i  |\r\n            「((n+\"\")!長さ？)  >  最大長」！なら「最大長=(n+\"\")!長さ？」実行。\r\n        」それぞれ実行。\r\n        ラベル数=ceil(要素数/32)。\r\n        \r\n        自分!  (要素数) 横幅設定。\r\n        自分!  (data_y) 縦幅設定。\r\n        自分!  (要素数) メモリ線描画。\r\n        \r\n        ペン＝タートル!作る  2  線の太さ。\r\n        ラベルx=グラフ:_原点x+(自分:_間隔)。\r\n        ラベルy=グラフ:_原点y-10。\r\n        \r\n        「|  j  |\r\n            \r\n            data_y=自分:_DATA!(f2!(j)  読む)  射影。\r\n            ラベルサイズ=「自分:_プロット幅  >  10」  !なら「10」そうでなければ「自分:_プロット幅」実行。\r\n            data_y:データ!「|n  i|\r\n                「自分:_メモリ範囲」！なら「\r\n                    「n  >=  自分:_最大メモリ」！なら「\r\n                        n=自分:_最大メモリ。\r\n                    」そうでなければ「n  <=  自分:_最小メモリ」なら「\r\n                        //n=自分:_最小メモリ。\r\n                    」実行。\r\n                」実行。\r\n                「i==1」！なら「\r\n                    plot_flag=false。\r\n                    y1=(n-自分:_起点メモリ)*(自分:_DACOL)+グラフ:_原点y。\r\n                    「y1  >=  自分:_最小メモリ」!なら「plot_flag=true」実行。\r\n                    プロットx=グラフ:_原点x+自分:_間隔+自分:_プロット幅/2。\r\n                    ペン!ペンなし  (プロットx)    (y1)    位置。\r\n                    x1=プロットx。\r\n                」実行。\r\n                「n  >=  自分:_最小メモリ」!なら「\r\n                    n=(n-自分:_起点メモリ)*(自分:_DACOL)+グラフ:_原点y。\r\n                    x2=x1+(自分:_間隔+自分:_プロット幅)。\r\n                    y2=n。\r\n                    「plot_flag」！なら「\r\n                        「自分:_マーカフラグ」！なら「\r\n                            ペン!ペンあり  4  8  角形  (自分!(j)    着色)    図形にする  -2  5  移動する。\r\n                        」実行。\r\n                    」実行。\r\n                    ペン!ぺんあり    (プロットx)  (n)      位置  (自分!(j)    着色)    図形を作る。\r\n                    プロットx=プロットx+(自分:_間隔+自分:_プロット幅)。\r\n                    ｘ１＝ｘ２。\r\n                    y1=y2。\r\n                    「i==要素数」！なら「\r\n                        「自分:_マーカフラグ」！なら「\r\n                            ペン!ペンあり  4  8  角形  (自分!(j)    着色)    図形にする  -2  5  移動する。\r\n                        」実行。\r\n                    」実行。\r\n                    plot_flag=true。\r\n                」そうでなければ「\r\n                    n=(n-自分:_起点メモリ)*(自分:_DACOL)。\r\n                    //x=(y-y1)/(y2-y1)/(x2-x1)+x1\r\n                    x2=x1+(自分:_間隔+自分:_プロット幅)。\r\n                    y2=n。\r\n                    x軸交点=-1*y1/(y2-y1)/(x2-x1)+x1。\r\n                    「plot_flag」！なら「\r\n                        「自分:_マーカフラグ」！なら「\r\n                            ペン!ペンあり  4  8  角形  (自分!(j)    着色)    図形にする  -2  5  移動する。\r\n                            ペン!ぺんあり    (x軸交点)  (グラフ:_原点y)    位置  (自分!(j)    着色)    図形を作る。\r\n                        」実行。\r\n                    」そうでなければ「\r\n                        ペン!ぺんなし    (x軸交点)  (グラフ:_原点y)    位置\r\n                    」実行。\r\n                    プロットx=プロットx+(自分:_間隔+自分:_プロット幅)。\r\n                    ｘ１＝ｘ２。\r\n                    y1=y2。\r\n                    plot_flag=false。\r\n                」実行。\r\n                \r\n                「j==1」！なら「\r\n                    「((i-1)%(ラベル数))==0」！なら「\r\n                        横軸ラベル=data_x!(i)  読む。\r\n                        横軸ラベル長=(横軸ラベル+\"\")!長さ?。\r\n                        「(最大長*5)  >  自分:_プロット幅」！なら「\r\n                            自分!  (横軸ラベル)  (ラベルx)  (ラベルy)  \"\"  (最大長)  縦表示。\r\n                        」そうでなければ「\r\n                            ラベル!  (横軸ラベル)  作る    (自分：_軸ラベルサイズ)    文字サイズ    (ラベルx-横軸ラベル長*5/2)  (ラベルy)  位置。\r\n                        」実行。\r\n                        ラベルx=ラベルx+(自分:_間隔+自分:_プロット幅)*ラベル数。\r\n                    」実行。\r\n                」実行。\r\n                \r\n            」それぞれ実行。\r\n            「自分:_底  >=  ラベルy」!なら「自分:_底=ラベルy-30」実行。\r\n            \r\n        」!  (系列数)  繰り返す。\r\n        \r\n        「系列数  >  1」！なら「\r\n            ペン!ペンなし  (グラフ:_原点x)  (自分:_底-12)  位置。\r\n            系列ラベルx  =  グラフ:_原点x+10。\r\n            系列ラベルy  =  自分:_底。\r\n            「|i|\r\n                系列名=f2!(i)    読む。\r\n                系列名長=(系列名+\"\")!長さ？。\r\n                ペン！ペンあり  6  4  角形    (自分!(i)    着色)    図形を作る。\r\n                a=ラベル!    (系列名)    作る    （系列ラベルx）  (系列ラベルy)    位置  (自分：_軸ラベルサイズ)  文字サイズ。\r\n                ペン!ペンなし    (系列名長*16+16)    0  移動する。\r\n                系列ラベルx  =  系列ラベルx+(系列名長*16+16)。\r\n            」!(系列数)    繰り返す。\r\n            自分:_底＝自分:_底-20。\r\n        」実行。\r\n        \r\n        「_横軸タイトル文==undef」！なら「\r\n            自分！(f1)  横軸タイトル。\r\n        」実行。\r\n        「_縦軸タイトル文==undef」！なら「\r\n            自分！(\"\")  縦軸タイトル。\r\n        」実行。\r\n        自分！縦軸タイトル描画。\r\n        自分！横軸タイトル描画。\r\n        グラフ:_原点x=自分:_右端+60．\r\n        //テーブル:x=自分:_右端。\r\n        ペン！  消える。\r\n        自分:_最小メモリ=undef。\r\n        自分。\r\n    」。\r\n    \r\n    //グラフ：個体番号＝グラフ：個体番号+1。\r\n    「_折れ線グラフ:f2==undef」!なら「\r\n        _折れ線グラフ。\r\n    」そうでなければ「\r\n        「自分!(_折れ線グラフ:f2)  check_fn」!なら「\r\n            「_折れ線グラフ:_DATA!(_折れ線グラフ:f2!1  読む)    射影   check_dt」!なら「\r\n                _折れ線グラフ。\r\n            」そうでなければ「\r\n                undef。\r\n            」実行。\r\n        」そうでなければ「\r\n            undef。\r\n        」実行。\r\n    」実行。\r\n」。\r\n\r\n\r\nテーブル：円グラフ=「  |f2|\r\n    「どれか！(f2==\"\")  (f2==undef)  本当」!なら「f2=(自分:フィールド名)!2  読む」実行。\r\n    _円グラフ=グラフ！作る．\r\n    _円グラフ:_DATA=自分．\r\n    _円グラフ:f1  =  自分:フィールド名！1  読む。\r\n    _円グラフ:f2  =  f2。\r\n    _円グラフ:描画=「|  i  |\r\n        自分!位置確定。\r\n        自分!  20  0  移動する。\r\n        ペン＝タートル！作る。\r\n        D_f1=_DATA!    (f2)    小さい順  (f1)  射影。\r\n        r=グラフ:_縦幅/2.    x=90.    x_pos=  r+20.    y_pos=  -1*r.\r\n        自分:_円原点x=グラフ:_原点x+r。\r\n        自分:_円原点y=グラフ:_原点y+r/2。\r\n        d_arr=_DATA！(f2)  小さい順  (f2)  射影。\r\n        sum=d_arr!(f2)  合計値    値読み出し。\r\n        add=0。\r\n        自分:_左端=(自分:_円原点x)-(r)-20。\r\n        自分:_天井=(自分:_円原点y)+(r)+30。\r\n        自分:_底=(自分:_円原点y)+y_pos-20。\r\n        \r\n        要素数=d_arr:データ!要素数?。\r\n        _max_length=1。\r\n        角度合計  =  ０。\r\n        割合合計  =  0。\r\n        d_arr：データ!「|  val  j|\r\n            prop=round((val/sum)*1000)。\r\n            prop=prop/10.\r\n            チーズ角度  =  round(prop*3.6)。\r\n            col=  グラフ！(j)  着色。\r\n            long=0。\r\n            割合合計=割合合計+prop。\r\n            角度合計=角度合計+    チーズ角度。\r\n            「j  ==  要素数」！なら「\r\n                「角度合計  >  360」  !なら    「\r\n                    チーズ角度=チーズ角度-(角度合計-360)。\r\n                」そうでなければ「    角度合計  <  360」  なら    「\r\n                    チーズ角度=チーズ角度+(360-角度合計)。\r\n                」実行。\r\n                「割合合計  >  100」!なら「\r\n                    prop=prop-(割合合計-100)。\r\n                」そうでなければ「割合合計  <  100」なら「\r\n                    prop=prop+(100-割合合計)。\r\n                」実行。\r\n                prop=(round(prop*10))/10。\r\n            」実行。\r\n            ペン！ペンなし  0  0  位置．\r\n            「チーズ角度!=0」!なら「\r\n                チーズ＝「\r\n                    ペン！ペンあり  1  線の太さ  ((r)*cos(x))  ((r)*sin(x))  位置．\r\n                    x=x+1．\r\n                    long=long+1.\r\n                    ペン．\r\n                」!  (チーズ角度)  繰り返す  0  0  位置  (col)  図形を作る．\r\n                チーズ！(自分:_円原点x)  (自分:_円原点y)  位置。\r\n                \r\n                「(long)  >=  20」！なら「\r\n                    \r\n                    ラベル！(prop+\"%\")  作る  (自分:_円原点x+(r/3*2)*cos(x-(long/2))-5)  (自分:_円原点y+(r/3*2)*sin(x-(long/2)))  位置  (自分：_軸ラベルサイズ-4)  文字サイズ。\r\n                」そうでなければ「\r\n                    \r\n                    ラベル！(prop+\"%\")  作る  (自分:_円原点x+(r/4*5)*cos(x-(long/2))-5)  (自分:_円原点y+(r/4*5)*sin(x-(long/2)))  位置  (自分：_軸ラベルサイズ-5)  文字サイズ。\r\n                    \r\n                    ペン!ペンなし  (自分:_円原点x+(r/4*5)*cos(x-(long/2))+5)  (自分:_円原点y+(r/4*5)*sin(x-(long/2))-25)      位置  ペンあり  (自分:_円原点x+(r)*cos(x-(long/2)))  (自分:_円原点y+(r)*sin(x-(long/2)))      位置  (黒)      図形を作る。\r\n                」実行。\r\n                \r\n                ペン！ペンなし  (自分:_円原点x+x_pos)  (自分:_円原点y+y_pos)  位置  ペンあり  10  4  角形  (col)  図形を作る。\r\n                A=ラベル!  (D_f1:データ！  (j)  読む)  作る  (自分:_円原点x+x_pos+15)  (自分:_円原点y+y_pos+10)  位置  (自分：_軸ラベルサイズ)    文字サイズ。\r\n                \r\n                ラベル!  (\"  \"+(d_arr！  (j)  読む)+\"件\")  作る  (自分:_円原点x+x_pos+15+(A!幅？))  (自分:_円原点y+y_pos+10)  位置    (自分：_軸ラベルサイズ)  文字サイズ。\r\n                y_pos  =  y_pos  +  20。\r\n                sum_length=(((D_f1:データ！  (j)  読む)+\"\")!    長さ？)  +  ((\"    \"+(d_arr！  (j)  読む)+\"件\")  !長さ?)。\r\n                「_max_length<sum_length」!なら「_max_length=sum_length」実行。\r\n            」実行。\r\n        」それぞれ実行。\r\n        \r\n        自分:_右端=自分:_円原点x+x_pos+15*(_max_length)。\r\n        グラフ:_原点x=自分:_右端+60．\r\n        ペン！消える．\r\n        自分:_最小メモリ=undef。\r\n        自分。\r\n    」.\r\n    //グラフ：個体番号＝グラフ：個体番号+1。\r\n    「どれか!(f2==undef)  (_円グラフ:_DATA==undef)  本当」！なら「\r\n        undef。\r\n    」そうでなければ「\r\n        「自分！(_円グラフ:f2)    check_fn」!なら「\r\n            「自分!(_円グラフ:f2)  射影  check_dt」！なら「\r\n                //グラフ：個体番号＝グラフ：個体番号+1。\r\n                _円グラフ。\r\n            」そうでなければ「\r\n                undef。\r\n            」実行。\r\n        」そうでなければ「\r\n            undef。\r\n        」実行。\r\n    」実行。\r\n」。\r\n\r\nテーブル：帯グラフ=「|;補正  |\r\n    _帯グラフ=グラフ！作る。\r\n    _帯グラフ:_DATA=自分。\r\n    _帯グラフ:f1  =  自分:フィールド名！1  読む。\r\n    _帯グラフ:joint_pos=配列！作る。\r\n    _帯グラフ:f2  =  自分!(_rest)  getarg。\r\n    _帯グラフ:_帯長さ=(_帯グラフ:_横幅)/100．\r\n    _帯グラフ:_方向=\"帯\"。\r\n    _帯グラフ:描画=「|;系列長    kxpos  |\r\n        自分!位置確定。\r\n        \r\n        「f2==undef」！なら「\r\n            //tmp=(_DATA：フィールド名)！作る。\r\n            tmp=(_DATA：フィールド名)！concat。\r\n            f2=tmp!1  位置で消す。\r\n        」実行。\r\n        \r\n        型配列=自分!(_DATA)  型判定。\r\n        「(型配列!要素数?)>0」!なら「\r\n            型配列!「|n|\r\n                f2=f2!(n)  消す。\r\n            」それぞれ実行。\r\n        」実行。\r\n        \r\n        data_x=_DATA！(f1)  射影。\r\n        フィールド数=f2!要素数?。\r\n        系列数=data_x:データ!要素数?。\r\n        ペン=タートル!  作る    1  線の太さ    。\r\n        横の位置配列=配列！作る。\r\n        注釈フラグ=false。\r\n        描画用データ=自分:_DATA!  (f2!  1  (f1)  挿入)  射影  行列入れ替え。\r\n        f2!1    位置で消す。\r\n        自分!  (フィールド数)  横幅設定。\r\n        自分!  (フィールド数)  メモリ線描画。\r\n        自分:_プロット幅  =  自分:_プロット幅。\r\n        \r\n        ペン！    ぺんなし    (グラフ:_原点x)  (グラフ:_原点y+自分:_間隔)  位置。\r\n        ラベルx=グラフ:_原点x-10。\r\n        ラベルy=グラフ:_原点y+(自分:_間隔+自分:_プロット幅/2+(自分：_軸ラベルサイズ))。\r\n        割合ラベルy=グラフ:_原点y+(自分:_間隔+自分:_プロット幅/2+(自分：_軸ラベルサイズ))。\r\n        \r\n        「|  j  |\r\n            data_y=描画用データ!((data_x!(j)  読む)+\"\")  射影。\r\n            \r\n            「|  i  ;n|\r\n                合計=自分:_DATA!(f2!(i)  読む)  合計値  数にする。\r\n                「j==1」！なら「\r\n                    横の位置配列!0  書く。\r\n                」実行。\r\n                n=data_y:データ!(i)  読む。\r\n                「n==\"\"」!なら「n=0」実行。\r\n                val=f2!(i)  読む。\r\n                メモリ調整＝((val+\"\")!長さ?)*12。\r\n                割合=round((n/合計)*1000)/10。\r\n                ペン!ペンなし    (横の位置配列!(i)  読む)  0    移動する。\r\n                ペン！ペンあり    ((自分:_帯長さ)*割合)  歩く    90  左回り    (自分:_プロット幅)  歩く    90  左回り    ((自分:_帯長さ)*割合)  歩く    180  左回り  (自分!(j)    着色)    図形にする。\r\n                ペン!ペンなし    0  (自分:_間隔)  移動する。\r\n                ペン!ペンなし    (-1*(横の位置配列!(i)  読む))  0    移動する。\r\n                「割合!=0」！なら「\r\n                    ラベル!(割合+\"%\")  作る  (グラフ:_原点x+(横の位置配列!(i)読む)+((自分:_帯長さ)*割合)/2-10)  (割合ラベルy)    位置    (自分：_軸ラベルサイズ)  文字サイズ。\r\n                」実行。\r\n                横の位置配列!(i)    ((横の位置配列!(i)読む)+(自分:_帯長さ)*割合)    上書き。\r\n                割合ラベルy=割合ラベルy+(自分:_間隔+自分:_プロット幅)。\r\n                「j==1」！なら「\r\n                    ラベル!  (val)  作る    (自分：_軸ラベルサイズ)    文字サイズ    (ラベルx-メモリ調整)  (ラベルy)  位置。\r\n                    ラベルy=ラベルy+(自分:_間隔+自分:_プロット幅)。\r\n                    「自分:_左端  >=  (ラベルx-メモリ調整-30)」!なら「\r\n                        自分:_左端=ラベルx-メモリ調整  -30。\r\n                    」実行。\r\n                」実行。\r\n            」!(フィールド数)  繰り返す。\r\n            割合ラベルy=グラフ:_原点y+(自分:_間隔+自分:_プロット幅/2+(自分：_軸ラベルサイズ))。\r\n            ペン！    ぺんなし    (グラフ:_原点x)  (グラフ:_原点y+自分:_間隔)  位置。\r\n            \r\n            横の位置配列!「|  n  i  |\r\n                「i==１」！なら「\r\n                    ペン2=タートル!作る  (色!0xBDBDBD  作る)  線の色．\r\n                    ペン2!  (赤)  線の色  ペンなし  (グラフ:_原点x+n)  (グラフ:_原点y+自分:_間隔+自分:_プロット幅)    位置。\r\n                」そうでなければ「\r\n                    ペン2!(色!0xBDBDBD  作る)  線の色  ペンあり  (グラフ:_原点x+n)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*i-自分:_プロット幅)    位置  図形を作る。\r\n                    ペン2!  ペンなし  0  (自分:_プロット幅)    移動する  消える。\r\n                」実行。\r\n                ペン2!消える．\r\n            」それぞれ実行。\r\n            ペン！    ぺんなし    (グラフ:_原点x)  (グラフ:_原点y+自分:_間隔)  位置。\r\n            \r\n        」!  (系列数)  繰り返す。\r\n        \r\n        \r\n        「系列数  >  1」！なら「\r\n            //JAVA _底-7\r\n            ペン!ペンなし  (グラフ:_原点x)  (自分:_底+1)  位置。\r\n            系列ラベルx  =    グラフ:_原点x+10。\r\n            系列ラベルy  =  自分:_底+7。\r\n            「|i|\r\n                系列名=data_x!(i)    読む。\r\n                系列名長=(系列名+\"\")!長さ？。\r\n                ペン！ペンあり  6  4  角形    (自分!(i)    着色)    図形を作る。\r\n                ラベル!    (系列名)    作る    （系列ラベルx）  (系列ラベルy)    位置  (自分：_軸ラベルサイズ-2)  文字サイズ。\r\n                ペン!ペンなし    (系列名長*12+16)    0  移動する。\r\n                系列ラベルx  =  系列ラベルx+(系列名長*12+16)。\r\n            」!(系列数)    繰り返す。\r\n            自分:_底＝自分:_底-20。\r\n        」実行。\r\n        \r\n        ペン！消える。\r\n        「自分:_横軸タイトル文==undef」！なら「\r\n            自分！(自分:f1)  横軸タイトル。\r\n        」実行。\r\n        「自分:_縦軸タイトル文==undef」！なら「\r\n            自分！(\"\")  縦軸タイトル。\r\n        」実行。\r\n        自分！縦軸タイトル描画。\r\n        自分！横軸タイトル描画。\r\n        グラフ:_原点x=自分:_右端+60．\r\n        //テーブル:x=自分:_右端。\r\n        自分:_最小メモリ=undef。\r\n        自分。\r\n    」。\r\n    //グラフ：個体番号＝グラフ：個体番号+1。\r\n    「_帯グラフ:f2==undef」!なら「\r\n        _帯グラフ。\r\n    」そうでなければ「\r\n        「全部!  (自分!(_帯グラフ:f2)  check_fn)  (_帯グラフ:_DATA!=undef)    本当」!なら「\r\n            「_帯グラフ:_DATA!(_帯グラフ:f2!1  読む)    射影  check_dt」!なら「\r\n                _帯グラフ。\r\n            」そうでなければ「\r\n                undef。\r\n            」実行。\r\n        」そうでなければ「\r\n            undef。\r\n        」実行。\r\n    」実行。\r\n」。\r\n\r\nテーブル:散布図＝「|f1  f2  flag|\r\n    _散布図＝グラフ！作る。\r\n    _散布図:_DATA=自分。\r\n    _散布図:f1  =  f1。\r\n    _散布図:f2  =  f2。\r\n    _散布図:_方向=\"散布図\"。\r\n    _散布図:_グリッド線なし=false。\r\n    _散布図:_横幅=グラフ:_縦幅。\r\n    _散布図:_縦幅=グラフ:_縦幅。\r\n    _散布図:_天井=_散布図:_原点y+_散布図:_横幅。\r\n    //_散布図:_右端=_散布図:_原点x+_散布図:_横幅。\r\n    _散布図:_原点y=_散布図:_原点y-10。\r\n    _散布図：描画=「||\r\n        自分!位置確定。\r\n        //「(グラフ:_原点x)==(グラフ:_原点x)」!なら「自分!位置確定。」実行。\r\n        ペン=タートル!作る。\r\n        data_x=_DATA!(f1)  射影。\r\n        data_y=_DATA!(f2)  射影。\r\n        \r\n        自分:    _DACOLX=自分!(data_x:データ)  (自分:_横幅)  データ補正値計算。\r\n        自分:_scalex=自分:_scale。\r\n        自分:_段数x=自分:_段数。\r\n        自分:_桁x=自分:_digit。\r\n        自分:_最大メモリ=undef。\r\n        自分:_最小メモリ=undef。\r\n        自分:_DACOLY=自分!(data_y:データ)  (自分:_縦幅)  データ補正値計算。\r\n        自分:_scaley=自分:_scale。\r\n        自分:_段数y=自分:_段数。\r\n        自分:_桁y=自分:_digit。\r\n        自分!メモリ線描画。\r\n        \r\n        data_x:データ!「|val  cnt|\r\n            ペン！ペンなし  (グラフ:_原点x+val*自分:_DACOLX)  ((data_y:データ!(cnt)  読む)*自分:_DACOLY+グラフ:_原点y+3)  位置  ペンあり  4  6  角形  (赤)    図形を作る。\r\n        」それぞれ実行。\r\n        \r\n        「_横軸タイトル文==undef」！なら「\r\n            自分！(f1)  横軸タイトル。\r\n        」実行。\r\n        「_縦軸タイトル文==undef」！なら「\r\n            自分！(f2)  縦軸タイトル。\r\n        」実行。\r\n        自分！縦軸タイトル描画。\r\n        自分！横軸タイトル描画。\r\n        ペン!消える。\r\n        \r\n        「自分:_近似」！なら「\r\n            自分!最小二乗法。\r\n            自分:_近似=false。\r\n        」実行。\r\n        \r\n        グラフ:_原点x=自分:_右端+60．\r\n        自分:_最小メモリ=undef。\r\n        自分。\r\n    」。\r\n    //グラフ：個体番号＝グラフ：個体番号+1。\r\n    「どれか！(_散布図:f1==undef)  (_散布図:f2==undef)  本当」!なら「\r\n        undef。\r\n    」そうでなければ「\r\n        「全部!  (自分!(_散布図:f1)  check_fn)  (自分!(_散布図:f2)  check_fn)  本当」!なら「\r\n            「全部!(_散布図:_DATA!(_散布図:f1)    射影  check_dt)  (_散布図:_DATA!(_散布図:f2)    射影  check_dt)  本当」!なら「\r\n                _散布図。\r\n            」そうでなければ「\r\n                undef。\r\n            」実行。\r\n        」そうでなければ「\r\n            undef。\r\n        」実行。\r\n    」実行。\r\n」。\r\n\r\n\r\n\r\nテーブル：箱ひげ図=「  |f1  f2|\r\n    _箱ひげ図＝グラフ！作る。\r\n    _箱ひげ図:_DATA=自分．\r\n    _箱ひげ図:f1  =  f1。\r\n    _箱ひげ図:f2  =  f2。\r\n    \r\n    _箱ひげ図：描画=「||\r\n        自分!位置確定。\r\n        //一つ目の引数(x軸の要素)を取得し値の重複を除く。\r\n        data_x=_DATA！(f1)  内部_重複なし。\r\n        f1_num＝0．\r\n        f2_num＝0．\r\n        data_y  =  _DATA！(f2）射影．\r\n        \r\n        要素数=data_x:データ!要素数?。\r\n        プロット数=data_y:データ!要素数?。\r\n        自分!  (要素数)横幅設定。\r\n        自分!  (data_y)  縦幅設定。\r\n        自分!  (要素数)  メモリ線描画。\r\n        \r\n        //引数に取られたフィールドがそれぞれ何番目の要素であるかを調べる\r\n        「｜番号｜\r\n            「（_DATA:フィールド名！（番号）読む）＝＝  (f1)」！なら\r\n            「f1_num＝番号。」そうでなければ\r\n            「（_DATA:フィールド名！（番号）読む）＝＝  (f2)」なら\r\n            「f2_num＝番号。」実行。\r\n        」！（_DATA:フィールド名！要素数？）繰り返す。\r\n        ペン＝タートル！作る  1  線の太さ。\r\n        data_x:データ!「|f  cnt|\r\n            tmp=_DATA!(f)  (f1_num)  レコード取り出し。//選択に相当\r\n            tmp2=tmp!(f2)  射影。\r\n            tmp3=tmp!(f2)  射影。\r\n            qua3=tmp!(f2)  第3四分位数  値読み出し。\r\n            qua2=tmp!(f2)  中央値  値読み出し。\r\n            qua1=tmp!(f2)  第1四分位数  値読み出し。\r\n            ave=tmp!(f2)  平均値  値読み出し。\r\n            \r\n            「qua1!=undef」!なら「\r\n                IRQ=qua3-qua1。\r\n                「自分:_方向==\"縦\"」！なら「\r\n                    \r\n                    tmp2:データ!「|n  i|\r\n                        「どれか!(n  >  (qua3+IRQ*1.5))  (n  <  (qua1-IRQ*1.5))  本当」！なら「\r\n                            ペン！ペンなし  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2))  (グラフ:_原点y+n*_DACOL)  位置  ぺんあり  3  円。\r\n                            tmp3:データ!(n)  消す。\r\n                        」実行。\r\n                    」それぞれ実行。\r\n                    _max=tmp3!(f2)  最大値    値読み出し。\r\n                    _min=tmp3!(f2)  最小値    値読み出し。\r\n                    //平均のバッテン\r\n                    ペン！ぺんなし    (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2)-((20/sqrt(2))/2))  (グラフ:_原点y+ave*(_DACOL)+((20/sqrt(2))/2))  位置  45  右回り  ぺんあり  20  歩く    ペンなし  位置  45  左回り    ．\r\n                    ペン！ぺんなし    (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2)-((20/sqrt(2))/2))  (グラフ:_原点y+ave*(_DACOL)-((20/sqrt(2))/2))  位置  45  左回り  ぺんあり  20  歩く  ペンなし    位置  45  右回り．\r\n                    //縦棒\r\n                    ペン！ペンなし  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2))  (グラフ:_原点y+_max*_DACOL)\r\n                    位置  ペンあり  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2))  (グラフ:_原点y+qua3*_DACOL)  位置．\r\n                    ペン！ペンなし  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2))  (グラフ:_原点y+qua1*_DACOL)\r\n                    位置  ペンあり  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2))  (グラフ:_原点y+_min*_DACOL)  位置．\r\n                    ペン！ペンなし  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  (グラフ:_原点y+qua3*_DACOL)\r\n                    位置  ペンあり  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  (グラフ:_原点y+qua1*_DACOL)  位置．\r\n                    ペン！ペンなし  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt)  (グラフ:_原点y+qua3*_DACOL)\r\n                    位置  ペンあり  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt)  (グラフ:_原点y+qua1*_DACOL)  位置。\r\n                    //横棒\r\n                    ペン！ペンなし  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  (グラフ:_原点y+qua3*_DACOL)  位置    ペンあり  (自分:_プロット幅)  歩く。\r\n                    ペン！ペンなし  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  (グラフ:_原点y+qua2*_DACOL)  位置    ペンあり  (自分:_プロット幅)  歩く。\r\n                    ペン！ペンなし  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  (グラフ:_原点y+qua1*_DACOL)  位置    ペンあり  (自分:_プロット幅)  歩く。\r\n                    ペン！ペンなし  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  (グラフ:_原点y+_max*_DACOL)  位置    ペンあり  (自分:_プロット幅)  歩く。\r\n                    ペン！ペンなし  (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  (グラフ:_原点y+_min*_DACOL)  位置    ペンあり  (自分:_プロット幅)  歩く    ペンなし。\r\n                    プロット＝ペン！図形にする。\r\n                    \r\n                    「cnt  ==  1」！なら「\r\n                        data_x:データ!「|  n  i  |\r\n                            長=(n+\"\")!長さ?。\r\n                            調整=0。\r\n                            「長  <  3」!なら「\r\n                                調整=(3-長)*5。\r\n                            」そうでなければ「長  >  3」なら「\r\n                                調整=-1*(長-3)*2。\r\n                            」実行。\r\n                            ラベル!  (n)  作る    (自分：_軸ラベルサイズ)    文字サイズ    (グラフ:_原点x+(自分:_間隔+自分:_プロット幅)*i-自分:_プロット幅/2-長*5)  (グラフ:_原点y-10)  位置。\r\n                        」それぞれ実行。\r\n                        自分:_底=自分:_底-30。\r\n                        \r\n                    」実行。\r\n                    \r\n                」そうでなければ「自分:_方向==\"横\"」なら「\r\n                    「cnt==1」！なら「\r\n                        ペン!90  左回り。\r\n                    」実行。\r\n                    tmp2:データ!「|n  i|\r\n                        「どれか!(n  >  (qua3+IRQ*1.5))  (n  <  (qua1-IRQ*1.5))  本当」！なら「\r\n                            ペン！ペンなし  (グラフ:_原点x+n*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2))    位置  ぺんあり  3  円。\r\n                            tmp3:データ!(n)  消す。\r\n                        」実行。\r\n                    」それぞれ実行。\r\n                    \r\n                    _max=tmp3!(f2)  最大値    値読み出し。\r\n                    _min=tmp3!(f2)  最小値    値読み出し。\r\n                    //平均のバッテン\r\n                    ペン！ぺんなし  (グラフ:_原点x+ave*(_DACOL)-((20/sqrt(2))/2))  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2)-((20/sqrt(2))/2))位置  45  右回り  ぺんあり  20  歩く    ペンなし  位置  45  左回り    ．\r\n                    ペン！ぺんなし  (グラフ:_原点x+ave*(_DACOL)+((20/sqrt(2))/2))  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2)-((20/sqrt(2))/2))  位置  45  左回り  ぺんあり  20  歩く  ペンなし    位置  45  右回り。\r\n                    //縦棒\r\n                    ペン！ペンなし  (グラフ:_原点x+_max*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2))\r\n                    位置  ペンあり  (グラフ:_原点x+qua3*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2))  位置．\r\n                    \r\n                    ペン！ペンなし  (グラフ:_原点x+qua1*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2))\r\n                    位置  ペンあり    (グラフ:_原点x+_min*_DACOL)      (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅+(自分:_プロット幅/2))位置．\r\n                    \r\n                    ペン！ペンなし  (グラフ:_原点x+qua3*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  位置  ペンあり    (グラフ:_原点x+qua1*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  位置．\r\n                    ペン！ペンなし  (グラフ:_原点x+qua3*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt)  位置  ペンあり  (グラフ:_原点x+qua1*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt)  位置。\r\n                    //横棒\r\n                    ペン！ペンなし  (グラフ:_原点x+qua3*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  位置    ペンあり  (自分:_プロット幅)  歩く。\r\n                    ペン！ペンなし  (グラフ:_原点x+qua2*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  位置    ペンあり  (自分:_プロット幅)  歩く。\r\n                    ペン！ペンなし  (グラフ:_原点x+qua1*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)位置    ペンあり  (自分:_プロット幅)  歩く。\r\n                    ペン！ペンなし  (グラフ:_原点x+_max*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  位置    ペンあり  (自分:_プロット幅)  歩く。\r\n                    ペン！ペンなし  (グラフ:_原点x+_min*_DACOL)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*cnt-自分:_プロット幅)  位置    ペンあり  (自分:_プロット幅)  歩く    ペンなし。\r\n                    プロット＝ペン！図形にする。\r\n                    \r\n                    「cnt  ==  1」！なら「\r\n                        最長=0。\r\n                        data_x:データ!「|  n  i  |\r\n                            長=(n+\"\")!長さ?。\r\n                            「長  >  最長」!なら「最長=長」実行。\r\n                            調整=0。\r\n                            「長  <  3」!なら「\r\n                                調整=(3-長)*5。\r\n                            」そうでなければ「長  >  3」なら「\r\n                                調整=-1*(長-3)*2。\r\n                            」実行。\r\n                            ラベル!  (n)  作る    (自分：_軸ラベルサイズ)    文字サイズ    (グラフ:_原点x-20+長-長*10)  (グラフ:_原点y+(自分:_間隔+自分:_プロット幅)*i-自分:_プロット幅/2+10)  位置。\r\n                        」それぞれ実行。\r\n                        自分:_左端=自分:_左端-最長*15。\r\n                        \r\n                    」実行。\r\n                」実行。\r\n            」実行。\r\n            \r\n        」それぞれ実行。\r\n        \r\n        「_横軸タイトル文==undef」！なら「\r\n            自分！(\"項目\")  横軸タイトル。\r\n        」実行。\r\n        「_縦軸タイトル文==undef」！なら「\r\n            自分！(\"\")  縦軸タイトル。\r\n        」実行。\r\n        自分！縦軸タイトル描画。\r\n        自分！横軸タイトル描画。\r\n        グラフ:_原点x=自分:_右端+60．\r\n        ペン！図形にする。\r\n        ペン！消える。\r\n        自分:_最小メモリ=undef。\r\n        自分。\r\n    」．\r\n    //グラフ：個体番号＝グラフ：個体番号+1。\r\n    「どれか！(_箱ひげ図:f1==undef)  (_箱ひげ図:f2==undef)  本当」!なら「\r\n        undef。\r\n    」そうでなければ「\r\n        「全部!  (自分!(_箱ひげ図:f1)  check_fn)  (自分!(_箱ひげ図:f2)  check_fn)  本当」!なら「\r\n            「  _箱ひげ図:_DATA!(_箱ひげ図:f2)    射影  check_dt」!なら「\r\n                _箱ひげ図。\r\n            」そうでなければ「\r\n                undef。\r\n            」実行。\r\n        」そうでなければ「\r\n            undef。\r\n        」実行。\r\n    」実行。\r\n」．\r\n"]}