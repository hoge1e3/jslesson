* ログ
   ファイル別検索
   いつやっていたか（日をまたいで検索）
   class Bar:
    def __init__(self, x):
        self.len = x
    #:ここに__str__メソッドを定義<-これでエラー
    def __str__(self):
        x=""
        for i in range(self.len):
            x+="#"
        return x
* Tonyu
 - OK IE support?(TJS only)
 - OK music icon
 - OK Mezonetプラグイン
 - クラス名前変更
 - Zip dl/up
 - OK 実行メニュー
 - リサイズ
 - OK 新規作成でこわれる
 - OK サムネ作らない設定
 - OK 画像追加できない
 - OK 別ページ実行
* 自動インデント:コメントは対象外
* config.php
  - Pythonのプロセス個数＆時間
* docker対応
  - branch docker
* 作品一覧
* OK personalクラス

*OK 隠し from teacher(オプションで再出現)
-未採点の課題
-採点状況
*OK 隠し from editor（オプションで再出現）
-提出
-プロジェクトを配布（出現しない）
-課題作成

-beta->stable
-- OK 先生アカウント（アカウントとメールアドレス名寄せ）とユーザ（homeの下なめる）移行
-- nearly ok 使い方（クラス・ユーザ登録）
-- Chk 古いバージョン(2017-0328)へのリンク
--- Chk お知らせメッセージ
-- branch  file   urlNOW   urlNEW
--- 1808   /var/www/html/bitarrowbeta/   /bitarrowbeta  ->  /bitarrow
--- stable-phpless /var/www/html/ba-phpless/  /bitarrow  -> /2017_0328
--- master (new beta) ->                                    /beta1808
--- チェック ： fs/pub はOK?
----- 2017_0328はOK
-統計・グラフの組み込み
-音楽
-OK DNCL

-OK register?(メッセージを親切に！) -> ユーザIDを書き換えて登録できないように変更、メッセージ追加
--OK? disableRegistrationByUser->クラスごと設定
-OK? autologexecの他言語対応
--OK Auto_{js,c,dtl}/AutoExec.{tonyu,c,dtl} を自動作成

*環境へ対する要望等

-日本語プロジェクト作成可能に
-実習画面にユーザとクラス
-ウィンドウサイズを変えるとiframeも変わる
-なるべくソースコードとかぶらない位置に表示
-エラーメッセージスタックトレース隠す

*言語

ドリトル対応
__question
lib.jsからは日本語の命令を削除
-Turtle on SVG
--90% 図形のあたり判定
---グループ図形
--スマホ対応
--タイマー=timer.
-Block ! and
-Block ! elsif
-Block ! unless
-Bool ! then
-root ! (a) typeof
--typeof a
-Array:mapもほしいけどいい名前が思いついていない（同じ名前で上書きしたくない）
- 한굴 명령 사용시 에러!

C対応
float f=0;printf("%d",f);  // エラー！

*ログ
-１行フォーマット＋詳細

*採点
-課題の作成

*内部実装

-実行方式をFS連動型iframeへ OK?
-UIの自動テスト

*大規模修繕
** ファイルシステム変更   FS   www/fs がルート  パーミッション設定
** プロジェクト毎同期 / プロジェクトリストをサーバから取得。置き場は/Tonyu/Projects/やめる OK?

*ファイル共有


C : fopen
JS: putToServer /getFromServer
Dtl: テキストファイル！"test.txt" 作る    ？
    オブジェクトファイル ! "test.obj" 作る

-共有レベル（Simplified)
-- クラスC
-- グループG
-- ユーザU
-- アプリケーションA

0 「全部なし」は除く
1 C(クラスみんなでどのアプリケーションからも同じデータにアクセス)★
2 G(グループみんなでどのアプリケーションからも同じデータにアクセス)★
3 CG これは Gと同じ
4 U(どのアプリケーションからもアクセスできるが，ユーザごとに違うデータにアクセス．個人の設定とか？Miiぽい何か？あまり需要なさそう)
567 GU CU CGU これらは U と同じ(GUは１ユーザが複数グループに属するなら意味ある？)
8 A(このアプリケーションの共有データをクラスみんなでアクセス．掲示板とか，ネットランキングとか)★（これがデフォルトが楽しい．公開しなければUAとほぼ等価？）
9 GA(このアプリケーションのデータを，グループごとに違うデータでアクセス．グループごとのセーブデータとか，ってそんなのある？そもそも他グループのアプリを見るかどうか)
10 CGA => GAと同じ
11 UA(このアプリケーションのデータを，ユーザごとに違うデータでアクセス．個人のセーブデータとか)★ → ログインしていないときはlocalStorageへ．．．
   publishしたときにほかの選択肢を提示？
12,13,14 GUA CUA CGUA  => UAと同じ
15 CA(このアプリケーションのデータを，クラスごとに違うデータでアクセス，ってほかのクラスのアプリ見る？)

-共有方法を選択してください．
  - ☆[A]プロジェクトで共有（このプロジェクトにアクセスするすべてのユーザが同じファイルを共有します）
  - [C]クラスで共有（クラス全体の共有領域に読み書きします）
  - [G]グループで共有（グループの共有領域に読み書きします）
    - グループ名の設定
  - [UA]共有しない（ユーザごとに違うファイルにアクセスします）
  [*]内の値をKeyValueのshareLevelパラメタに渡す
    shareLevel -> additional params
    A   -> url
    C   -> url or session::class
    G   -> (url or session::class) ,group
    UA  -> url, session::user (localStorageに保存する場合はそもそも通信しない)
- keyvalue:: class       user group
   - class  常にクラス名
   - user  書き込んだユーザ名（キーとしては不使用）
   - group
     - UA:publishedURL+'/'+username
     - A: publishedURL
     - C: 'default'
     - G: groupName


//------以下OK----
*言語
-Dtl
--OK パースエラーのファイル名
-OK 画像の大きさ
--OK  図形にする
--OK 図形塗る
-OK Block ! or
--[a] ! [b] [c] or
--aがJSのtrue相当の値ならaを返す、そうでなければbがtrue相当の値ならbを返す、そうでなければc....
-OK root ! (a) (b) instanceof
--a instanceof b
-OK root ! (a) is
-- thisが aを親（または祖先）に持つかどうか。instanceofとは挙動が全然ちがう
-- b=a!create.
-- b ! (a) is.  //true
-- c=a! create.
-- c ! (a) is.  //true
-OK Array ! [f] each   // f.executeで呼び出す（JS組み込みのforEachとは挙動が違い、fがちゃんと外側のthisを保って実行される)


*環境
OK-エディタの文字サイズが小さい
OK--初期18ぐらいがいいと思う
OK-エディタ画面に出てくるファイルリストは新しいものを上に?
更新可-先生用の画面もソートして(学生番号順?)
更新可-同期確認メッセージ
Ok セッションの長さ
OK-インデントがへん
aaa({

});
OK -実行終了後、フォーカスをエディタ画面(元の場所)へ戻す


*OKクラス別アカウントの作成

** ユーザ向け仕様

クラスごとにアカウントを発行する
- クラスIDはランダムに生成した番号（記号含む？）

ログイン時にはクラスID+好きなユーザIDを用いる

** アカウントの申請方法

とりあえず手動メール (専用メールアドレスを作成）
クラスを作成し、クラスIDを手で返信する

*ユーザ管理
2016/2/14現在 www/fs/home/$USER  となっているが、これを
www/fs/home/$CLASS/$USER に変更

login.php or www/auth.php
  ログイン画面にクラスIDを追加
  $_SESSION["classID"] に保存
  同期の部分のプログラムを変更する
  Auth::getFSあたりに$classIDが入る

*内部実装
-OK 同期高速化（アップロード待ち）
-OK シェル操作中にBSを押してもダイアログが出ない
